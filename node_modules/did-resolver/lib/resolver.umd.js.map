{"version":3,"file":"resolver.umd.js","sources":["../src/resolver.ts"],"sourcesContent":["// Copyright 2018 Consensys AG\n\n// Licensed under the Apache License, Version 2.0(the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n\n// http://www.apache.org/licenses/LICENSE-2.0\n\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Defines an object type that can be extended with other properties.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type Extensible = Record<string, any>\n\n/**\n * Defines the result of a DID resolution operation.\n *\n * @see {@link Resolvable.resolve}\n * @see {@link https://www.w3.org/TR/did-core/#did-resolution}\n */\nexport interface DIDResolutionResult {\n  '@context'?: 'https://w3id.org/did-resolution/v1' | string | string[]\n  didResolutionMetadata: DIDResolutionMetadata\n  didDocument: DIDDocument | null\n  didDocumentMetadata: DIDDocumentMetadata\n}\n\n/**\n * Describes the options forwarded to the resolver when executing a {@link Resolvable.resolve} operation.\n *\n * @see {@link https://www.w3.org/TR/did-core/#did-resolution-options}\n */\nexport interface DIDResolutionOptions extends Extensible {\n  accept?: string\n}\n\n/**\n * Encapsulates the resolution metadata resulting from a {@link Resolvable.resolve} operation.\n *\n * @see {@link https://www.w3.org/TR/did-core/#did-resolution-metadata}\n */\nexport interface DIDResolutionMetadata extends Extensible {\n  contentType?: string\n  error?: 'invalidDid' | 'notFound' | 'representationNotSupported' | 'unsupportedDidMethod' | string\n}\n\n/**\n * Represents metadata about the DID document resulting from a {@link Resolvable.resolve} operation.\n *\n * @see {@link https://www.w3.org/TR/did-core/#did-document-metadata}\n */\nexport interface DIDDocumentMetadata extends Extensible {\n  created?: string\n  updated?: string\n  deactivated?: boolean\n  versionId?: string\n  nextUpdate?: string\n  nextVersionId?: string\n  equivalentId?: string\n  canonicalId?: string\n}\n\n/**\n * Represents the Verification Relationship between a DID subject and a Verification Method.\n *\n * @see {@link https://www.w3.org/TR/did-core/#verification-relationships}\n */\nexport type KeyCapabilitySection =\n  | 'authentication'\n  | 'assertionMethod'\n  | 'keyAgreement'\n  | 'capabilityInvocation'\n  | 'capabilityDelegation'\n\n/**\n * Represents a DID document.\n *\n * @see {@link https://www.w3.org/TR/did-core/#did-document-properties}\n */\nexport type DIDDocument = {\n  '@context'?: 'https://www.w3.org/ns/did/v1' | string | string[]\n  id: string\n  alsoKnownAs?: string[]\n  controller?: string | string[]\n  verificationMethod?: VerificationMethod[]\n  service?: Service[]\n  /**\n   * @deprecated\n   */\n  publicKey?: VerificationMethod[]\n} & {\n  [x in KeyCapabilitySection]?: (string | VerificationMethod)[]\n}\n\n/**\n * Represents a Service entry in a {@link https://www.w3.org/TR/did-core/#did-document-properties | DID document}.\n *\n * @see {@link https://www.w3.org/TR/did-core/#services}\n * @see {@link https://www.w3.org/TR/did-core/#service-properties}\n */\nexport interface Service {\n  id: string\n  type: string\n  serviceEndpoint: ServiceEndpoint | ServiceEndpoint[]\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [x: string]: any\n}\n\n/**\n * Represents an endpoint of a Service entry in a DID document.\n *\n * @see {@link https://www.w3.org/TR/did-core/#dfn-serviceendpoint}\n * @see {@link https://www.w3.org/TR/did-core/#services}\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type ServiceEndpoint = string | Record<string, any>\n\n/**\n * Encapsulates a JSON web key type that includes only the public properties that\n * can be used in DID documents.\n *\n * The private properties are intentionally omitted to discourage the use\n * (and accidental disclosure) of private keys in DID documents.\n *\n * @see {@link https://www.rfc-editor.org/rfc/rfc7517 | RFC7517 JsonWebKey (JWK)}\n */\nexport interface JsonWebKey extends Extensible {\n  alg?: string\n  crv?: string\n  e?: string\n  ext?: boolean\n  key_ops?: string[]\n  kid?: string\n  kty: string\n  n?: string\n  use?: string\n  x?: string\n  y?: string\n}\n\n/**\n * Represents the properties of a Verification Method listed in a DID document.\n *\n * This data type includes public key representations that are no longer present in the spec but are still used by\n * several DID methods / resolvers and kept for backward compatibility.\n *\n * @see {@link https://www.w3.org/TR/did-core/#verification-methods}\n * @see {@link https://www.w3.org/TR/did-core/#verification-method-properties}\n */\nexport interface VerificationMethod {\n  id: string\n  type: string\n  controller: string\n  publicKeyBase58?: string\n  publicKeyBase64?: string\n  publicKeyJwk?: JsonWebKey\n  publicKeyHex?: string\n  publicKeyMultibase?: string\n  blockchainAccountId?: string\n  ethereumAddress?: string\n\n  // ConditionalProof2022 subtypes\n  conditionOr?: VerificationMethod[]\n  conditionAnd?: VerificationMethod[]\n  threshold?: number\n  conditionThreshold?: VerificationMethod[]\n  conditionWeightedThreshold?: ConditionWeightedThreshold[]\n  conditionDelegated?: string\n  relationshipParent?: string[]\n  relationshipChild?: string[]\n  relationshipSibling?: string[]\n}\n\nexport interface ConditionWeightedThreshold {\n  condition: VerificationMethod\n  weight: number\n}\n\n/**\n * URI params resulting from parsing a DID URI\n */\nexport interface Params {\n  [index: string]: string\n}\n\n/**\n * An object containing the results of parsing a DID URI string.\n *\n * This is forwarded to implementations of particular DID resolvers when calling the `resolve` method.\n *\n * @see {@link Resolver}\n * @see {@link Resolvable.resolve}\n */\nexport interface ParsedDID {\n  did: string\n  didUrl: string\n  method: string\n  id: string\n  path?: string\n  fragment?: string\n  query?: string\n  params?: Params\n}\n\n/**\n * The DID resolution function that DID Resolver implementations must implement.\n */\nexport type DIDResolver = (\n  did: string,\n  parsed: ParsedDID,\n  resolver: Resolvable,\n  options: DIDResolutionOptions\n) => Promise<DIDResolutionResult>\nexport type WrappedResolver = () => Promise<DIDResolutionResult>\nexport type DIDCache = (parsed: ParsedDID, resolve: WrappedResolver) => Promise<DIDResolutionResult>\nexport type LegacyDIDResolver = (did: string, parsed: ParsedDID, resolver: Resolvable) => Promise<DIDDocument>\n\nexport type ResolverRegistry = Record<string, DIDResolver>\n\nexport interface LegacyResolverRegistry {\n  [index: string]: LegacyDIDResolver\n}\n\nexport interface ResolverOptions {\n  cache?: DIDCache | boolean | undefined\n  legacyResolvers?: LegacyResolverRegistry\n}\n\nexport function inMemoryCache(): DIDCache {\n  const cache: Map<string, DIDResolutionResult> = new Map()\n  return async (parsed: ParsedDID, resolve) => {\n    if (parsed.params && parsed.params['no-cache'] === 'true') return await resolve()\n\n    const cached = cache.get(parsed.didUrl)\n    if (cached !== undefined) return cached\n    const result = await resolve()\n    if (result.didResolutionMetadata?.error !== 'notFound') {\n      cache.set(parsed.didUrl, result)\n    }\n    return result\n  }\n}\n\nexport function noCache(parsed: ParsedDID, resolve: WrappedResolver): Promise<DIDResolutionResult> {\n  return resolve()\n}\n\nconst PCT_ENCODED = '(?:%[0-9a-fA-F]{2})'\nconst ID_CHAR = `(?:[a-zA-Z0-9._-]|${PCT_ENCODED})`\nconst METHOD = '([a-z0-9]+)'\nconst METHOD_ID = `((?:${ID_CHAR}*:)*(${ID_CHAR}+))`\nconst PARAM_CHAR = '[a-zA-Z0-9_.:%-]'\nconst PARAM = `;${PARAM_CHAR}+=${PARAM_CHAR}*`\nconst PARAMS = `((${PARAM})*)`\nconst PATH = `(/[^#?]*)?`\nconst QUERY = `([?][^#]*)?`\nconst FRAGMENT = `(#.*)?`\nconst DID_MATCHER = new RegExp(`^did:${METHOD}:${METHOD_ID}${PARAMS}${PATH}${QUERY}${FRAGMENT}$`)\n\n/**\n * Parses a DID URL and builds a {@link ParsedDID | ParsedDID object}\n *\n * @param didUrl - the DID URL string to be parsed\n * @returns a ParsedDID object, or null if the input is not a DID URL\n */\nexport function parse(didUrl: string): ParsedDID | null {\n  if (didUrl === '' || !didUrl) return null\n  const sections = didUrl.match(DID_MATCHER)\n  if (sections) {\n    const parts: ParsedDID = {\n      did: `did:${sections[1]}:${sections[2]}`,\n      method: sections[1],\n      id: sections[2],\n      didUrl,\n    }\n    if (sections[4]) {\n      const params = sections[4].slice(1).split(';')\n      parts.params = {}\n      for (const p of params) {\n        const kv = p.split('=')\n        parts.params[kv[0]] = kv[1]\n      }\n    }\n    if (sections[6]) parts.path = sections[6]\n    if (sections[7]) parts.query = sections[7].slice(1)\n    if (sections[8]) parts.fragment = sections[8].slice(1)\n    return parts\n  }\n  return null\n}\n\nconst EMPTY_RESULT: DIDResolutionResult = {\n  didResolutionMetadata: {},\n  didDocument: null,\n  didDocumentMetadata: {},\n}\n\nexport function wrapLegacyResolver(resolve: LegacyDIDResolver): DIDResolver {\n  return async (did, parsed, resolver) => {\n    try {\n      const doc = await resolve(did, parsed, resolver)\n      return {\n        ...EMPTY_RESULT,\n        didResolutionMetadata: { contentType: 'application/did+ld+json' },\n        didDocument: doc,\n      }\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (e: any) {\n      return {\n        ...EMPTY_RESULT,\n        didResolutionMetadata: {\n          error: 'notFound',\n          message: e.toString(), // This is not in spec, but may be helpful\n        },\n      }\n    }\n  }\n}\n\n/**\n * The method signature implemented by this resolver.\n */\nexport interface Resolvable {\n  resolve: (didUrl: string, options?: DIDResolutionOptions) => Promise<DIDResolutionResult>\n}\n\n/**\n * This implementation of {@link Resolvable} bundles together multiple implementations of {@link DIDResolver} and\n * presents a single function call to users.\n */\nexport class Resolver implements Resolvable {\n  private readonly registry: ResolverRegistry\n  private readonly cache: DIDCache\n\n  constructor(registry: ResolverRegistry = {}, options: ResolverOptions = {}) {\n    this.registry = registry\n    this.cache = options.cache === true ? inMemoryCache() : options.cache || noCache\n    if (options.legacyResolvers) {\n      Object.keys(options.legacyResolvers).map((methodName) => {\n        if (!this.registry[methodName]) {\n          this.registry[methodName] = wrapLegacyResolver(\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            options.legacyResolvers![methodName]\n          )\n        }\n      })\n    }\n  }\n\n  async resolve(didUrl: string, options: DIDResolutionOptions = {}): Promise<DIDResolutionResult> {\n    const parsed = parse(didUrl)\n    if (parsed === null) {\n      return {\n        ...EMPTY_RESULT,\n        didResolutionMetadata: { error: 'invalidDid' },\n      }\n    }\n    const resolver = this.registry[parsed.method]\n    if (!resolver) {\n      return {\n        ...EMPTY_RESULT,\n        didResolutionMetadata: { error: 'unsupportedDidMethod' },\n      }\n    }\n    return this.cache(parsed, () => resolver(parsed.did, parsed, this, options))\n  }\n}\n"],"names":["inMemoryCache","cache","Map","parsed","resolve","cached","get","didUrl","undefined","result","didResolutionMetadata","error","set","params","noCache","PCT_ENCODED","ID_CHAR","METHOD","METHOD_ID","PARAM_CHAR","PARAM","PARAMS","PATH","QUERY","FRAGMENT","DID_MATCHER","RegExp","parse","sections","match","parts","did","method","id","slice","split","p","kv","path","query","fragment","EMPTY_RESULT","didDocument","didDocumentMetadata","wrapLegacyResolver","resolver","doc","contentType","e","message","toString","Resolver","constructor","registry","options","legacyResolvers","Object","keys","map","methodName"],"mappings":"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"}