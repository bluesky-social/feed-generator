import { OperationNode } from './operation-node.js';
import { ReferenceExpressionNode, ValueExpressionNode } from './operation-node-utils.js';
import { OperatorNode } from './operator-node.js';
import { RawNode } from './raw-node.js';
export declare type FilterOperatorNode = OperatorNode | RawNode;
export interface FilterNode extends OperationNode {
    readonly kind: 'FilterNode';
    readonly left?: ReferenceExpressionNode;
    readonly op: OperatorNode | RawNode;
    readonly right: ValueExpressionNode;
}
/**
 * @internal
 */
export declare const FilterNode: Readonly<{
    is(node: OperationNode): node is FilterNode;
    create(left: ReferenceExpressionNode | undefined, op: OperatorNode | RawNode, right: ValueExpressionNode): FilterNode;
}>;
