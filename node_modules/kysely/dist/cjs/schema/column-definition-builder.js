"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ColumnDefinitionBuilder = void 0;
const check_constraint_node_js_1 = require("../operation-node/check-constraint-node.js");
const reference_node_js_1 = require("../operation-node/reference-node.js");
const references_node_js_1 = require("../operation-node/references-node.js");
const select_all_node_js_1 = require("../operation-node/select-all-node.js");
const reference_parser_js_1 = require("../parser/reference-parser.js");
const prevent_await_js_1 = require("../util/prevent-await.js");
const column_definition_node_js_1 = require("../operation-node/column-definition-node.js");
const default_value_parser_js_1 = require("../parser/default-value-parser.js");
const generated_node_js_1 = require("../operation-node/generated-node.js");
const default_value_node_js_1 = require("../operation-node/default-value-node.js");
const on_modify_action_parser_js_1 = require("../parser/on-modify-action-parser.js");
class ColumnDefinitionBuilder {
    #node;
    constructor(node) {
        this.#node = node;
    }
    autoIncrement() {
        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, { autoIncrement: true }));
    }
    primaryKey() {
        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, { primaryKey: true }));
    }
    references(ref) {
        const references = (0, reference_parser_js_1.parseStringReference)(ref);
        if (!reference_node_js_1.ReferenceNode.is(references) || select_all_node_js_1.SelectAllNode.is(references.column)) {
            throw new Error(`invalid call references('${ref}'). The reference must have format table.column or schema.table.column`);
        }
        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, {
            references: references_node_js_1.ReferencesNode.create(references.table, [
                references.column,
            ]),
        }));
    }
    onDelete(onDelete) {
        if (!this.#node.references) {
            throw new Error('on delete constraint can only be added for foreign keys');
        }
        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, {
            references: references_node_js_1.ReferencesNode.cloneWithOnDelete(this.#node.references, (0, on_modify_action_parser_js_1.parseOnModifyForeignAction)(onDelete)),
        }));
    }
    onUpdate(onUpdate) {
        if (!this.#node.references) {
            throw new Error('on update constraint can only be added for foreign keys');
        }
        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, {
            references: references_node_js_1.ReferencesNode.cloneWithOnUpdate(this.#node.references, (0, on_modify_action_parser_js_1.parseOnModifyForeignAction)(onUpdate)),
        }));
    }
    unique() {
        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, { unique: true }));
    }
    notNull() {
        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, { notNull: true }));
    }
    unsigned() {
        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, { unsigned: true }));
    }
    defaultTo(value) {
        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, {
            defaultTo: default_value_node_js_1.DefaultValueNode.create((0, default_value_parser_js_1.parseDefaultValueExpression)(value)),
        }));
    }
    check(expression) {
        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, {
            check: check_constraint_node_js_1.CheckConstraintNode.create(expression.toOperationNode()),
        }));
    }
    generatedAlwaysAs(expression) {
        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, {
            generated: generated_node_js_1.GeneratedNode.createWithExpression(expression.toOperationNode()),
        }));
    }
    generatedAlwaysAsIdentity() {
        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, {
            generated: generated_node_js_1.GeneratedNode.create({ identity: true, always: true }),
        }));
    }
    generatedByDefaultAsIdentity() {
        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, {
            generated: generated_node_js_1.GeneratedNode.create({ identity: true, byDefault: true }),
        }));
    }
    stored() {
        if (!this.#node.generated) {
            throw new Error('stored() can only be called after generatedAlwaysAs');
        }
        return new ColumnDefinitionBuilder(column_definition_node_js_1.ColumnDefinitionNode.cloneWith(this.#node, {
            generated: generated_node_js_1.GeneratedNode.cloneWith(this.#node.generated, {
                stored: true,
            }),
        }));
    }
    toOperationNode() {
        return this.#node;
    }
}
exports.ColumnDefinitionBuilder = ColumnDefinitionBuilder;
(0, prevent_await_js_1.preventAwait)(ColumnDefinitionBuilder, "don't await ColumnDefinitionBuilder instances directly.");
