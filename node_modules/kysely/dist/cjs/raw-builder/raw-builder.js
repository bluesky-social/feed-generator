"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AliasedRawBuilder = exports.RawBuilder = void 0;
const alias_node_js_1 = require("../operation-node/alias-node.js");
const operation_node_source_js_1 = require("../operation-node/operation-node-source.js");
const prevent_await_js_1 = require("../util/prevent-await.js");
const object_utils_js_1 = require("../util/object-utils.js");
const noop_query_executor_js_1 = require("../query-executor/noop-query-executor.js");
const identifier_node_js_1 = require("../operation-node/identifier-node.js");
/**
 * An instance of this class can be used to create raw SQL snippets or queries.
 *
 * You shouldn't need to create `RawBuilder` instances directly. Instead you should
 * use the {@link sql} template tag.
 */
class RawBuilder {
    #props;
    constructor(props) {
        this.#props = (0, object_utils_js_1.freeze)(props);
    }
    as(alias) {
        return new AliasedRawBuilder(this, alias);
    }
    /**
     * Change the output type of the raw expression.
     *
     * This method call doesn't change the SQL in any way. This methods simply
     * returns a copy of this `RawBuilder` with a new output type.
     */
    castTo() {
        return new RawBuilder({ ...this.#props });
    }
    /**
     * Adds a plugin for this SQL snippet.
     */
    withPlugin(plugin) {
        return new RawBuilder({
            ...this.#props,
            plugins: this.#props.plugins !== undefined
                ? (0, object_utils_js_1.freeze)([...this.#props.plugins, plugin])
                : (0, object_utils_js_1.freeze)([plugin]),
        });
    }
    toOperationNode() {
        const executor = this.#props.plugins !== undefined
            ? noop_query_executor_js_1.NOOP_QUERY_EXECUTOR.withPlugins(this.#props.plugins)
            : noop_query_executor_js_1.NOOP_QUERY_EXECUTOR;
        return this.#toOperationNode(executor);
    }
    async execute(executorProvider) {
        const executor = this.#props.plugins !== undefined
            ? executorProvider.getExecutor().withPlugins(this.#props.plugins)
            : executorProvider.getExecutor();
        return executor.executeQuery(this.#compile(executor), this.#props.queryId);
    }
    #toOperationNode(executor) {
        return executor.transformQuery(this.#props.rawNode, this.#props.queryId);
    }
    #compile(executor) {
        return executor.compileQuery(this.#toOperationNode(executor), this.#props.queryId);
    }
}
exports.RawBuilder = RawBuilder;
(0, prevent_await_js_1.preventAwait)(RawBuilder, "don't await RawBuilder instances directly. To execute the query you need to call `execute`");
/**
 * {@link RawBuilder} with an alias. The result of calling {@link RawBuilder.as}.
 */
class AliasedRawBuilder {
    #rawBuilder;
    #alias;
    /**
     * @private
     *
     * This needs to be here just so that the typings work. Without this
     * the generated .d.ts file contains no reference to the type param A
     * which causes this type to be equal to AliasedRawBuilder with any A
     * as long as O is the same.
     */
    get alias() {
        return this.#alias;
    }
    toOperationNode() {
        return alias_node_js_1.AliasNode.create(this.#rawBuilder.toOperationNode(), (0, operation_node_source_js_1.isOperationNodeSource)(this.#alias)
            ? this.#alias.toOperationNode()
            : identifier_node_js_1.IdentifierNode.create(this.#alias));
    }
    constructor(rawBuilder, alias) {
        this.#rawBuilder = rawBuilder;
        this.#alias = alias;
    }
}
exports.AliasedRawBuilder = AliasedRawBuilder;
