"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionModule = void 0;
const aggregate_function_node_js_1 = require("../operation-node/aggregate-function-node.js");
const reference_parser_js_1 = require("../parser/reference-parser.js");
const aggregate_function_builder_js_1 = require("./aggregate-function-builder.js");
/**
 * Helpers for type safe SQL function calls.
 *
 * You can always use the {@link sql} tag to call functions and build arbitrary
 * expressions. This module simply has shortcuts for most common function calls.
 *
 * ### Examples
 *
 * ```ts
 * const { count } = db.fn
 *
 * await db.selectFrom('person')
 *   .innerJoin('pet', 'pet.owner_id', 'person.id')
 *   .select([
 *     'person.id',
 *     count('pet.id').as('pet_count')
 *   ])
 *   .groupBy('person.id')
 *   .having(count('pet.id'), '>', 10)
 *   .execute()
 * ```
 *
 * The generated SQL (PostgreSQL):
 *
 * ```sql
 * select "person"."id", count("pet"."id") as "pet_count"
 * from "person"
 * inner join "pet" on "pet"."owner_id" = "person"."id"
 * group by "person"."id"
 * having count("pet"."id") > $1
 * ```
 */
class FunctionModule {
    constructor() {
        this.avg = this.avg.bind(this);
        this.count = this.count.bind(this);
        this.max = this.max.bind(this);
        this.min = this.min.bind(this);
        this.sum = this.sum.bind(this);
    }
    /**
     * Calls the `avg` function for the column given as the argument.
     *
     * If this is used in a `select` statement the type of the selected expression
     * will be `number | string` by default. This is because Kysely can't know the
     * type the db driver outputs. Sometimes the output can be larger than the
     * largest javascript number and a string is returned instead. Most drivers
     * allow you to configure the output type of large numbers and Kysely can't
     * know if you've done so.
     *
     * You can specify the output type of the expression by providing
     * the type as the first type argument:
     *
     * ```ts
     * const { avg } = db.fn
     *
     * db.selectFrom('toy')
     *   .select(avg<number>('price').as('avg_price'))
     *   .execute()
     * ```
     */
    avg(column) {
        return new aggregate_function_builder_js_1.AggregateFunctionBuilder({
            aggregateFunctionNode: aggregate_function_node_js_1.AggregateFunctionNode.create('avg', (0, reference_parser_js_1.parseStringReference)(column)),
        });
    }
    /**
     * Calls the `count` function for the column given as the argument.
     *
     * If this is used in a `select` statement the type of the selected expression
     * will be `number | string | bigint` by default. This is because Kysely can't
     * know the type the db driver outputs. Sometimes the output can be larger than
     * the largest javascript number and a string is returned instead. Most drivers
     * allow you to configure the output type of large numbers and Kysely can't
     * know if you've done so.
     *
     * You can specify the output type of the expression by providing
     * the type as the first type argument:
     *
     * ```ts
     * const { count } = db.fn
     *
     * db.selectFrom('toy')
     *   .select(count<number>('id').as('num_toys'))
     *   .execute()
     * ```
     *
     * You can limit column range:
     *
     * ```ts
     * db.selectFrom('toy')
     *   .select(qb => qb.fn.count<number>('id').as('num_toys'))
     *   .execute()
     * ```
     */
    count(column) {
        return new aggregate_function_builder_js_1.AggregateFunctionBuilder({
            aggregateFunctionNode: aggregate_function_node_js_1.AggregateFunctionNode.create('count', (0, reference_parser_js_1.parseStringReference)(column)),
        });
    }
    /**
     * Calls the `max` function for the column given as the argument.
     *
     * ### Examples
     *
     * ```ts
     * const { max } = db.fn
     *
     * db.selectFrom('toy')
     *   .select(max('price').as('max_price'))
     *   .execute()
     * ```
     */
    max(column) {
        return new aggregate_function_builder_js_1.AggregateFunctionBuilder({
            aggregateFunctionNode: aggregate_function_node_js_1.AggregateFunctionNode.create('max', (0, reference_parser_js_1.parseStringReference)(column)),
        });
    }
    /**
     * Calls the `min` function for the column given as the argument.
     *
     * ### Examples
     *
     * ```ts
     * const { min } = db.fn
     *
     * db.selectFrom('toy')
     *   .select(min('price').as('min_price'))
     *   .execute()
     * ```
     *
     */
    min(column) {
        return new aggregate_function_builder_js_1.AggregateFunctionBuilder({
            aggregateFunctionNode: aggregate_function_node_js_1.AggregateFunctionNode.create('min', (0, reference_parser_js_1.parseStringReference)(column)),
        });
    }
    /**
     * Calls the `sum` function for the column given as the argument.
     *
     * If this is used in a `select` statement the type of the selected expression
     * will be `number | string | bigint` by default. This is because Kysely can't
     * know the type the db driver outputs. Sometimes the output can be larger than
     * the largest javascript number and a string is returned instead. Most drivers
     * allow you to configure the output type of large numbers and Kysely can't
     * know if you've done so.
     *
     * You can specify the output type of the expression by providing
     * the type as the first type argument:
     *
     * ```ts
     * const { sum } = db.fn
     *
     * db.selectFrom('toy')
     *   .select(sum<number>('price').as('total_price'))
     *   .execute()
     * ```
     */
    sum(column) {
        return new aggregate_function_builder_js_1.AggregateFunctionBuilder({
            aggregateFunctionNode: aggregate_function_node_js_1.AggregateFunctionNode.create('sum', (0, reference_parser_js_1.parseStringReference)(column)),
        });
    }
}
exports.FunctionModule = FunctionModule;
