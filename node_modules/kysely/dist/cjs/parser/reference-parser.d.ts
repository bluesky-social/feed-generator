import { AliasNode } from '../operation-node/alias-node.js';
import { ColumnNode } from '../operation-node/column-node.js';
import { ReferenceExpressionNode } from '../operation-node/operation-node-utils.js';
import { ReferenceNode } from '../operation-node/reference-node.js';
import { AnyColumn, AnyColumnWithTable, ExtractColumnType, ValueType } from '../util/type-utils.js';
import { RawBuilder } from '../raw-builder/raw-builder.js';
import { SelectQueryBuilder } from '../query-builder/select-query-builder.js';
import { ComplexExpression } from './complex-expression-parser.js';
import { DynamicReferenceBuilder } from '../dynamic/dynamic-reference-builder.js';
import { SelectType } from '../util/column-type.js';
import { AggregateFunctionBuilder } from '../query-builder/aggregate-function-builder.js';
export declare type ReferenceExpression<DB, TB extends keyof DB> = StringReference<DB, TB> | DynamicReferenceBuilder<any> | ComplexExpression<DB, TB>;
export declare type ReferenceExpressionOrList<DB, TB extends keyof DB> = ReferenceExpression<DB, TB> | ReadonlyArray<ReferenceExpression<DB, TB>>;
export declare type StringReference<DB, TB extends keyof DB> = AnyColumn<DB, TB> | AnyColumnWithTable<DB, TB>;
export declare type ExtractTypeFromReferenceExpression<DB, TB extends keyof DB, RE> = RE extends string ? SelectType<ExtractTypeFromStringReference<DB, TB, RE>> : RE extends RawBuilder<infer O> ? O : RE extends (qb: any) => RawBuilder<infer O> ? O : RE extends SelectQueryBuilder<any, any, infer O> ? ValueType<O> : RE extends (qb: any) => SelectQueryBuilder<any, any, infer O> ? ValueType<O> : RE extends AggregateFunctionBuilder<any, any, infer O> ? O : RE extends (qb: any) => AggregateFunctionBuilder<any, any, infer O> ? O : unknown;
declare type ExtractTypeFromStringReference<DB, TB extends keyof DB, RE extends string> = RE extends `${infer SC}.${infer T}.${infer C}` ? `${SC}.${T}` extends TB ? C extends keyof DB[`${SC}.${T}`] ? DB[`${SC}.${T}`][C] : never : never : RE extends `${infer T}.${infer C}` ? T extends TB ? C extends keyof DB[T] ? DB[T][C] : never : never : RE extends AnyColumn<DB, TB> ? ExtractColumnType<DB, TB, RE> : unknown;
export declare function parseReferenceExpressionOrList(arg: ReferenceExpressionOrList<any, any>): ReferenceExpressionNode[];
export declare function parseReferenceExpression(exp: ReferenceExpression<any, any>): ReferenceExpressionNode;
export declare function parseStringReference(ref: string): ColumnNode | ReferenceNode;
export declare function parseAliasedStringReference(ref: string): ColumnNode | ReferenceNode | AliasNode;
export declare function parseColumnName(column: AnyColumn<any, any>): ColumnNode;
export {};
