import { AggregateFunctionNode } from './aggregate-function-node.js';
import { ColumnNode } from './column-node.js';
import { IdentifierNode } from './identifier-node.js';
import { OperationNode } from './operation-node.js';
import { RawNode } from './raw-node.js';
import { ReferenceNode } from './reference-node.js';
import { SelectQueryNode } from './select-query-node.js';
import { TableNode } from './table-node.js';
export declare type AliasNodeChild = ColumnNode | ReferenceNode | TableNode | SelectQueryNode | RawNode | AggregateFunctionNode;
export interface AliasNode extends OperationNode {
    readonly kind: 'AliasNode';
    readonly node: AliasNodeChild;
    readonly alias: IdentifierNode | RawNode;
}
/**
 * @internal
 */
export declare const AliasNode: Readonly<{
    is(node: OperationNode): node is AliasNode;
    create(node: AliasNodeChild, alias: IdentifierNode | RawNode): AliasNode;
}>;
