import { OperationNode } from './operation-node.js';
import { RawNode } from './raw-node.js';
import { SelectQueryNode } from './select-query-node.js';
export declare type SetOperationExpressionNode = SelectQueryNode | RawNode;
export declare type SetOperator = 'union' | 'intersect' | 'except';
export interface SetOperationNode extends OperationNode {
    kind: 'SetOperationNode';
    operator: SetOperator;
    expression: SetOperationExpressionNode;
    all: boolean;
}
/**
 * @internal
 */
export declare const SetOperationNode: Readonly<{
    is(node: OperationNode): node is SetOperationNode;
    create(operator: SetOperator, expression: SetOperationExpressionNode, all: boolean): SetOperationNode;
}>;
