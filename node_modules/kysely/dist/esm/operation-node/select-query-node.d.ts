import { FromNode } from './from-node.js';
import { GroupByItemNode } from './group-by-item-node.js';
import { GroupByNode } from './group-by-node.js';
import { HavingNode } from './having-node.js';
import { JoinNode } from './join-node.js';
import { LimitNode } from './limit-node.js';
import { OffsetNode } from './offset-node.js';
import { OperationNode } from './operation-node.js';
import { FilterExpressionNode, TableExpressionNode } from './operation-node-utils.js';
import { OrderByItemNode } from './order-by-item-node.js';
import { OrderByNode } from './order-by-node.js';
import { SelectionNode } from './selection-node.js';
import { WhereNode } from './where-node.js';
import { WithNode } from './with-node.js';
import { SelectModifierNode } from './select-modifier-node.js';
import { ExplainNode } from './explain-node.js';
import { SetOperationNode } from './set-operation-node.js';
export interface SelectQueryNode extends OperationNode {
    readonly kind: 'SelectQueryNode';
    readonly from: FromNode;
    readonly selections?: ReadonlyArray<SelectionNode>;
    readonly distinctOnSelections?: ReadonlyArray<SelectionNode>;
    readonly joins?: ReadonlyArray<JoinNode>;
    readonly groupBy?: GroupByNode;
    readonly orderBy?: OrderByNode;
    readonly where?: WhereNode;
    readonly frontModifiers?: ReadonlyArray<SelectModifierNode>;
    readonly endModifiers?: ReadonlyArray<SelectModifierNode>;
    readonly limit?: LimitNode;
    readonly offset?: OffsetNode;
    readonly with?: WithNode;
    readonly having?: HavingNode;
    readonly explain?: ExplainNode;
    readonly setOperations?: ReadonlyArray<SetOperationNode>;
}
/**
 * @internal
 */
export declare const SelectQueryNode: Readonly<{
    is(node: OperationNode): node is SelectQueryNode;
    create(fromItems: ReadonlyArray<TableExpressionNode>, withNode?: WithNode): SelectQueryNode;
    cloneWithSelections(select: SelectQueryNode, selections: ReadonlyArray<SelectionNode>): SelectQueryNode;
    cloneWithDistinctOnSelections(select: SelectQueryNode, selections: ReadonlyArray<SelectionNode>): SelectQueryNode;
    cloneWithFrontModifier(select: SelectQueryNode, modifier: SelectModifierNode): SelectQueryNode;
    cloneWithEndModifier(select: SelectQueryNode, modifier: SelectModifierNode): SelectQueryNode;
    cloneWithOrderByItem(selectNode: SelectQueryNode, item: OrderByItemNode): SelectQueryNode;
    cloneWithGroupByItems(selectNode: SelectQueryNode, items: ReadonlyArray<GroupByItemNode>): SelectQueryNode;
    cloneWithLimit(selectNode: SelectQueryNode, limit: LimitNode): SelectQueryNode;
    cloneWithOffset(selectNode: SelectQueryNode, offset: OffsetNode): SelectQueryNode;
    cloneWithHaving(selectNode: SelectQueryNode, filter: FilterExpressionNode): SelectQueryNode;
    cloneWithOrHaving(selectNode: SelectQueryNode, filter: FilterExpressionNode): SelectQueryNode;
    cloneWithSetOperation(selectNode: SelectQueryNode, setOperation: SetOperationNode): SelectQueryNode;
    cloneWithExplain(selectNode: SelectQueryNode, explain: ExplainNode): SelectQueryNode;
}>;
