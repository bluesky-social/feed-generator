/// <reference types="./reference-parser.d.ts" />
import { AliasNode } from '../operation-node/alias-node.js';
import { ColumnNode } from '../operation-node/column-node.js';
import { ReferenceNode } from '../operation-node/reference-node.js';
import { TableNode } from '../operation-node/table-node.js';
import { isReadonlyArray, isString } from '../util/object-utils.js';
import { parseComplexExpression, } from './complex-expression-parser.js';
import { isDynamicReferenceBuilder, } from '../dynamic/dynamic-reference-builder.js';
import { IdentifierNode } from '../operation-node/identifier-node.js';
export function parseReferenceExpressionOrList(arg) {
    if (isReadonlyArray(arg)) {
        return arg.map((it) => parseReferenceExpression(it));
    }
    else {
        return [parseReferenceExpression(arg)];
    }
}
export function parseReferenceExpression(exp) {
    if (isString(exp)) {
        return parseStringReference(exp);
    }
    else if (isDynamicReferenceBuilder(exp)) {
        return exp.toOperationNode();
    }
    return parseComplexExpression(exp);
}
export function parseStringReference(ref) {
    const COLUMN_SEPARATOR = '.';
    if (ref.includes(COLUMN_SEPARATOR)) {
        const parts = ref.split(COLUMN_SEPARATOR).map(trim);
        if (parts.length === 3) {
            return parseStringReferenceWithTableAndSchema(parts);
        }
        else if (parts.length === 2) {
            return parseStringReferenceWithTable(parts);
        }
        else {
            throw new Error(`invalid column reference ${ref}`);
        }
    }
    else {
        return ColumnNode.create(ref);
    }
}
export function parseAliasedStringReference(ref) {
    const ALIAS_SEPARATOR = ' as ';
    if (ref.includes(ALIAS_SEPARATOR)) {
        const [columnRef, alias] = ref.split(ALIAS_SEPARATOR).map(trim);
        return AliasNode.create(parseStringReference(columnRef), IdentifierNode.create(alias));
    }
    else {
        return parseStringReference(ref);
    }
}
export function parseColumnName(column) {
    return ColumnNode.create(column);
}
function parseStringReferenceWithTableAndSchema(parts) {
    const [schema, table, column] = parts;
    return ReferenceNode.create(TableNode.createWithSchema(schema, table), ColumnNode.create(column));
}
function parseStringReferenceWithTable(parts) {
    const [table, column] = parts;
    return ReferenceNode.create(TableNode.create(table), ColumnNode.create(column));
}
function trim(str) {
    return str.trim();
}
