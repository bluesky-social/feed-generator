import { AliasedQueryBuilder } from '../query-builder/select-query-builder.js';
import { TableNode } from '../operation-node/table-node.js';
import { AnyAliasedRawBuilder } from '../util/type-utils.js';
import { AliasedRawBuilder } from '../raw-builder/raw-builder.js';
import { TableExpressionNode } from '../operation-node/operation-node-utils.js';
import { AliasedComplexExpression } from './complex-expression-parser.js';
export declare type TableExpression<DB, TB extends keyof DB> = TableReference<DB> | AliasedComplexExpression<DB, TB>;
export declare type TableExpressionOrList<DB, TB extends keyof DB> = TableExpression<DB, TB> | ReadonlyArray<TableExpression<DB, TB>>;
export declare type TableReference<DB> = AnyAliasedTable<DB> | AnyTable<DB> | AnyAliasedRawBuilder;
export declare type From<DB, TE> = {
    [C in keyof DB | ExtractAliasFromTableExpression<DB, TE>]: C extends ExtractAliasFromTableExpression<DB, TE> ? ExtractRowTypeFromTableExpression<DB, TE, C> : C extends keyof DB ? DB[C] : never;
};
export declare type FromTables<DB, TB extends keyof DB, TE> = TB | ExtractAliasFromTableExpression<DB, TE>;
declare type ExtractAliasFromTableExpression<DB, TE> = TE extends `${string} as ${infer TA}` ? TA : TE extends keyof DB ? TE : TE extends AliasedQueryBuilder<any, any, any, infer QA> ? QA : TE extends (qb: any) => AliasedQueryBuilder<any, any, any, infer QA> ? QA : TE extends AliasedRawBuilder<any, infer RA> ? RA : TE extends (qb: any) => AliasedRawBuilder<any, infer RA> ? RA : never;
declare type ExtractRowTypeFromTableExpression<DB, TE, A extends keyof any> = TE extends `${infer T} as ${infer TA}` ? TA extends A ? T extends keyof DB ? DB[T] : never : never : TE extends A ? TE extends keyof DB ? DB[TE] : never : TE extends AliasedQueryBuilder<any, any, infer O, infer QA> ? QA extends A ? O : never : TE extends (qb: any) => AliasedQueryBuilder<any, any, infer O, infer QA> ? QA extends A ? O : never : TE extends AliasedRawBuilder<infer O, infer RA> ? RA extends A ? O : never : TE extends (qb: any) => AliasedRawBuilder<infer O, infer RA> ? RA extends A ? O : never : never;
declare type AnyAliasedTable<DB> = `${AnyTable<DB>} as ${string}`;
declare type AnyTable<DB> = keyof DB & string;
export declare function parseTableExpressionOrList(table: TableExpressionOrList<any, any>): TableExpressionNode[];
export declare function parseTableExpression(table: TableExpression<any, any>): TableExpressionNode;
export declare function parseAliasedTable(from: string): TableExpressionNode;
export declare function parseTable(from: string): TableNode;
export {};
