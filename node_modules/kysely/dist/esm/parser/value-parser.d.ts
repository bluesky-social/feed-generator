import { ValueExpressionNode } from '../operation-node/operation-node-utils.js';
import { ValueNode } from '../operation-node/value-node.js';
import { SelectQueryNode } from '../operation-node/select-query-node.js';
import { RawNode } from '../operation-node/raw-node.js';
import { ComplexExpression } from './complex-expression-parser.js';
import { AggregateFunctionNode } from '../operation-node/aggregate-function-node.js';
export declare type ValueExpression<DB, TB extends keyof DB, V> = V | ComplexExpression<DB, TB, V>;
export declare type ValueExpressionOrList<DB, TB extends keyof DB, V> = ValueExpression<DB, TB, V> | ReadonlyArray<ValueExpression<DB, TB, V>>;
export declare function parseValueExpressionOrList(arg: ValueExpressionOrList<any, any, unknown>): ValueExpressionNode;
export declare function parseValueExpression(exp: ValueExpression<any, any, unknown>): ValueNode | SelectQueryNode | RawNode | AggregateFunctionNode;
