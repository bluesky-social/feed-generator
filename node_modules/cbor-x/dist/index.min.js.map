{"version":3,"file":"index.min.js","sources":["../decode.js","../encode.js","../iterators.js"],"sourcesContent":["let decoder\ntry {\n\tdecoder = new TextDecoder()\n} catch(error) {}\nlet src\nlet srcEnd\nlet position = 0\nlet alreadySet\nconst EMPTY_ARRAY = []\nconst LEGACY_RECORD_INLINE_ID = 105\nconst RECORD_DEFINITIONS_ID = 0xdffe\nconst RECORD_INLINE_ID = 0xdfff // temporary first-come first-serve tag // proposed tag: 0x7265 // 're'\nconst BUNDLED_STRINGS_ID = 0xdff9\nconst PACKED_TABLE_TAG_ID = 51\nconst PACKED_REFERENCE_TAG_ID = 6\nconst STOP_CODE = {}\nlet strings = EMPTY_ARRAY\nlet stringPosition = 0\nlet currentDecoder = {}\nlet currentStructures\nlet srcString\nlet srcStringStart = 0\nlet srcStringEnd = 0\nlet bundledStrings\nlet referenceMap\nlet currentExtensions = []\nlet currentExtensionRanges = []\nlet packedValues\nlet dataView\nlet restoreMapsAsObject\nlet defaultOptions = {\n\tuseRecords: false,\n\tmapsAsObjects: true\n}\nlet sequentialMode = false\n\nexport class Decoder {\n\tconstructor(options) {\n\t\tif (options) {\n\t\t\tif ((options.keyMap || options._keyMap) && !options.useRecords) {\n\t\t\t\toptions.useRecords = false\n\t\t\t\toptions.mapsAsObjects = true\n\t\t\t}\n\t\t\tif (options.useRecords === false && options.mapsAsObjects === undefined)\n\t\t\t\toptions.mapsAsObjects = true\n\t\t\tif (options.getStructures)\n\t\t\t\toptions.getShared = options.getStructures\n\t\t\tif (options.getShared && !options.structures)\n\t\t\t\t(options.structures = []).uninitialized = true // this is what we use to denote an uninitialized structures\n\t\t\tif (options.keyMap) {\n\t\t\t\tthis.mapKey = new Map()\n\t\t\t\tfor (let [k,v] of Object.entries(options.keyMap)) this.mapKey.set(v,k)\n\t\t\t}\n\t\t}\n\t\tObject.assign(this, options)\n\t}\n\t/*\n\tdecodeKey(key) {\n\t\treturn this.keyMap\n\t\t\t? Object.keys(this.keyMap)[Object.values(this.keyMap).indexOf(key)] || key\n\t\t\t: key\n\t}\n\t*/\n\tdecodeKey(key) {\n\t\treturn this.keyMap ? this.mapKey.get(key) || key : key\n\t}\n\t\n\tencodeKey(key) {\n\t\treturn this.keyMap && this.keyMap.hasOwnProperty(key) ? this.keyMap[key] : key\n\t}\n\n\tencodeKeys(rec) {\n\t\tif (!this._keyMap) return rec\n\t\tlet map = new Map()\n\t\tfor (let [k,v] of Object.entries(rec)) map.set((this._keyMap.hasOwnProperty(k) ? this._keyMap[k] : k), v)\n\t\treturn map\n\t}\n\n\tdecodeKeys(map) {\n\t\tif (!this._keyMap || map.constructor.name != 'Map') return map\n\t\tif (!this._mapKey) {\n\t\t\tthis._mapKey = new Map()\n\t\t\tfor (let [k,v] of Object.entries(this._keyMap)) this._mapKey.set(v,k)\n\t\t}\n\t\tlet res = {}\n\t\t//map.forEach((v,k) => res[Object.keys(this._keyMap)[Object.values(this._keyMap).indexOf(k)] || k] = v)\n\t\tmap.forEach((v,k) => res[safeKey(this._mapKey.has(k) ? this._mapKey.get(k) : k)] =  v)\n\t\treturn res\n\t}\n\t\n\tmapDecode(source, end) {\n\t\n\t\tlet res = this.decode(source)\n\t\tif (this._keyMap) { \n\t\t\t//Experiemntal support for Optimised KeyMap  decoding \n\t\t\tswitch (res.constructor.name) {\n\t\t\t\tcase 'Array': return res.map(r => this.decodeKeys(r))\n\t\t\t\t//case 'Map': return this.decodeKeys(res)\n\t\t\t}\n\t\t}\n\t\treturn res\n\t}\n\n\tdecode(source, end) {\n\t\tif (src) {\n\t\t\t// re-entrant execution, save the state and restore it after we do this decode\n\t\t\treturn saveState(() => {\n\t\t\t\tclearSource()\n\t\t\t\treturn this ? this.decode(source, end) : Decoder.prototype.decode.call(defaultOptions, source, end)\n\t\t\t})\n\t\t}\n\t\tsrcEnd = end > -1 ? end : source.length\n\t\tposition = 0\n\t\tstringPosition = 0\n\t\tsrcStringEnd = 0\n\t\tsrcString = null\n\t\tstrings = EMPTY_ARRAY\n\t\tbundledStrings = null\n\t\tsrc = source\n\t\t// this provides cached access to the data view for a buffer if it is getting reused, which is a recommend\n\t\t// technique for getting data from a database where it can be copied into an existing buffer instead of creating\n\t\t// new ones\n\t\ttry {\n\t\t\tdataView = source.dataView || (source.dataView = new DataView(source.buffer, source.byteOffset, source.byteLength))\n\t\t} catch(error) {\n\t\t\t// if it doesn't have a buffer, maybe it is the wrong type of object\n\t\t\tsrc = null\n\t\t\tif (source instanceof Uint8Array)\n\t\t\t\tthrow error\n\t\t\tthrow new Error('Source must be a Uint8Array or Buffer but was a ' + ((source && typeof source == 'object') ? source.constructor.name : typeof source))\n\t\t}\n\t\tif (this instanceof Decoder) {\n\t\t\tcurrentDecoder = this\n\t\t\tpackedValues = this.sharedValues &&\n\t\t\t\t(this.pack ? new Array(this.maxPrivatePackedValues || 16).concat(this.sharedValues) :\n\t\t\t\tthis.sharedValues)\n\t\t\tif (this.structures) {\n\t\t\t\tcurrentStructures = this.structures\n\t\t\t\treturn checkedRead()\n\t\t\t} else if (!currentStructures || currentStructures.length > 0) {\n\t\t\t\tcurrentStructures = []\n\t\t\t}\n\t\t} else {\n\t\t\tcurrentDecoder = defaultOptions\n\t\t\tif (!currentStructures || currentStructures.length > 0)\n\t\t\t\tcurrentStructures = []\n\t\t\tpackedValues = null\n\t\t}\n\t\treturn checkedRead()\n\t}\n\tdecodeMultiple(source, forEach) {\n\t\tlet values, lastPosition = 0\n\t\ttry {\n\t\t\tlet size = source.length\n\t\t\tsequentialMode = true\n\t\t\tlet value = this ? this.decode(source, size) : defaultDecoder.decode(source, size)\n\t\t\tif (forEach) {\n\t\t\t\tif (forEach(value) === false) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\twhile(position < size) {\n\t\t\t\t\tlastPosition = position\n\t\t\t\t\tif (forEach(checkedRead()) === false) {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvalues = [ value ]\n\t\t\t\twhile(position < size) {\n\t\t\t\t\tlastPosition = position\n\t\t\t\t\tvalues.push(checkedRead())\n\t\t\t\t}\n\t\t\t\treturn values\n\t\t\t}\n\t\t} catch(error) {\n\t\t\terror.lastPosition = lastPosition\n\t\t\terror.values = values\n\t\t\tthrow error\n\t\t} finally {\n\t\t\tsequentialMode = false\n\t\t\tclearSource()\n\t\t}\n\t}\n}\nexport function getPosition() {\n\treturn position\n}\nexport function checkedRead() {\n\ttry {\n\t\tlet result = read()\n\t\tif (bundledStrings) {\n\t\t\tif (position >= bundledStrings.postBundlePosition) {\n\t\t\t\tlet error = new Error('Unexpected bundle position');\n\t\t\t\terror.incomplete = true;\n\t\t\t\tthrow error\n\t\t\t}\n\t\t\t// bundled strings to skip past\n\t\t\tposition = bundledStrings.postBundlePosition;\n\t\t\tbundledStrings = null;\n\t\t}\n\n\t\tif (position == srcEnd) {\n\t\t\t// finished reading this source, cleanup references\n\t\t\tcurrentStructures = null\n\t\t\tsrc = null\n\t\t\tif (referenceMap)\n\t\t\t\treferenceMap = null\n\t\t} else if (position > srcEnd) {\n\t\t\t// over read\n\t\t\tlet error = new Error('Unexpected end of CBOR data')\n\t\t\terror.incomplete = true\n\t\t\tthrow error\n\t\t} else if (!sequentialMode) {\n\t\t\tthrow new Error('Data read, but end of buffer not reached')\n\t\t}\n\t\t// else more to read, but we are reading sequentially, so don't clear source yet\n\t\treturn result\n\t} catch(error) {\n\t\tclearSource()\n\t\tif (error instanceof RangeError || error.message.startsWith('Unexpected end of buffer')) {\n\t\t\terror.incomplete = true\n\t\t}\n\t\tthrow error\n\t}\n}\n\nexport function read() {\n\tlet token = src[position++]\n\tlet majorType = token >> 5\n\ttoken = token & 0x1f\n\tif (token > 0x17) {\n\t\tswitch (token) {\n\t\t\tcase 0x18:\n\t\t\t\ttoken = src[position++]\n\t\t\t\tbreak\n\t\t\tcase 0x19:\n\t\t\t\tif (majorType == 7) {\n\t\t\t\t\treturn getFloat16()\n\t\t\t\t}\n\t\t\t\ttoken = dataView.getUint16(position)\n\t\t\t\tposition += 2\n\t\t\t\tbreak\n\t\t\tcase 0x1a:\n\t\t\t\tif (majorType == 7) {\n\t\t\t\t\tlet value = dataView.getFloat32(position)\n\t\t\t\t\tif (currentDecoder.useFloat32 > 2) {\n\t\t\t\t\t\t// this does rounding of numbers that were encoded in 32-bit float to nearest significant decimal digit that could be preserved\n\t\t\t\t\t\tlet multiplier = mult10[((src[position] & 0x7f) << 1) | (src[position + 1] >> 7)]\n\t\t\t\t\t\tposition += 4\n\t\t\t\t\t\treturn ((multiplier * value + (value > 0 ? 0.5 : -0.5)) >> 0) / multiplier\n\t\t\t\t\t}\n\t\t\t\t\tposition += 4\n\t\t\t\t\treturn value\n\t\t\t\t}\n\t\t\t\ttoken = dataView.getUint32(position)\n\t\t\t\tposition += 4\n\t\t\t\tbreak\n\t\t\tcase 0x1b:\n\t\t\t\tif (majorType == 7) {\n\t\t\t\t\tlet value = dataView.getFloat64(position)\n\t\t\t\t\tposition += 8\n\t\t\t\t\treturn value\n\t\t\t\t}\n\t\t\t\tif (majorType > 1) {\n\t\t\t\t\tif (dataView.getUint32(position) > 0)\n\t\t\t\t\t\tthrow new Error('JavaScript does not support arrays, maps, or strings with length over 4294967295')\n\t\t\t\t\ttoken = dataView.getUint32(position + 4)\n\t\t\t\t} else if (currentDecoder.int64AsNumber) {\n\t\t\t\t\ttoken = dataView.getUint32(position) * 0x100000000\n\t\t\t\t\ttoken += dataView.getUint32(position + 4)\n\t\t\t\t} else\n\t\t\t\t\ttoken = dataView.getBigUint64(position)\n\t\t\t\tposition += 8\n\t\t\t\tbreak\n\t\t\tcase 0x1f: \n\t\t\t\t// indefinite length\n\t\t\t\tswitch(majorType) {\n\t\t\t\t\tcase 2: // byte string\n\t\t\t\t\tcase 3: // text string\n\t\t\t\t\t\tthrow new Error('Indefinite length not supported for byte or text strings')\n\t\t\t\t\tcase 4: // array\n\t\t\t\t\t\tlet array = []\n\t\t\t\t\t\tlet value, i = 0\n\t\t\t\t\t\twhile ((value = read()) != STOP_CODE) {\n\t\t\t\t\t\t\tarray[i++] = value\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn majorType == 4 ? array : majorType == 3 ? array.join('') : Buffer.concat(array)\n\t\t\t\t\tcase 5: // map\n\t\t\t\t\t\tlet key\n\t\t\t\t\t\tif (currentDecoder.mapsAsObjects) {\n\t\t\t\t\t\t\tlet object = {}\n\t\t\t\t\t\t\tif (currentDecoder.keyMap) while((key = read()) != STOP_CODE) object[safeKey(currentDecoder.decodeKey(key))] = read()\n\t\t\t\t\t\t\telse while ((key = read()) != STOP_CODE) object[safeKey(key)] = read()\n\t\t\t\t\t\t\treturn object\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (restoreMapsAsObject) {\n\t\t\t\t\t\t\t\tcurrentDecoder.mapsAsObjects = true\n\t\t\t\t\t\t\t\trestoreMapsAsObject = false\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlet map = new Map()\n\t\t\t\t\t\t\tif (currentDecoder.keyMap) while((key = read()) != STOP_CODE) map.set(currentDecoder.decodeKey(key), read())\n\t\t\t\t\t\t\telse while ((key = read()) != STOP_CODE) map.set(key, read())\n\t\t\t\t\t\t\treturn map\n\t\t\t\t\t\t}\n\t\t\t\t\tcase 7:\n\t\t\t\t\t\treturn STOP_CODE\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error('Invalid major type for indefinite length ' + majorType)\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unknown token ' + token)\n\t\t}\n\t}\n\tswitch (majorType) {\n\t\tcase 0: // positive int\n\t\t\treturn token\n\t\tcase 1: // negative int\n\t\t\treturn ~token\n\t\tcase 2: // buffer\n\t\t\treturn readBin(token)\n\t\tcase 3: // string\n\t\t\tif (srcStringEnd >= position) {\n\t\t\t\treturn srcString.slice(position - srcStringStart, (position += token) - srcStringStart)\n\t\t\t}\n\t\t\tif (srcStringEnd == 0 && srcEnd < 140 && token < 32) {\n\t\t\t\t// for small blocks, avoiding the overhead of the extract call is helpful\n\t\t\t\tlet string = token < 16 ? shortStringInJS(token) : longStringInJS(token)\n\t\t\t\tif (string != null)\n\t\t\t\t\treturn string\n\t\t\t}\n\t\t\treturn readFixedString(token)\n\t\tcase 4: // array\n\t\t\tlet array = new Array(token)\n\t\t  //if (currentDecoder.keyMap) for (let i = 0; i < token; i++) array[i] = currentDecoder.decodeKey(read())\t\n\t\t\t//else \n\t\t\tfor (let i = 0; i < token; i++) array[i] = read()\n\t\t\treturn array\n\t\tcase 5: // map\n\t\t\tif (currentDecoder.mapsAsObjects) {\n\t\t\t\tlet object = {}\n\t\t\t\tif (currentDecoder.keyMap) for (let i = 0; i < token; i++) object[safeKey(currentDecoder.decodeKey(read()))] = read()\n\t\t\t\telse for (let i = 0; i < token; i++) object[safeKey(read())] = read()\n\t\t\t\treturn object\n\t\t\t} else {\n\t\t\t\tif (restoreMapsAsObject) {\n\t\t\t\t\tcurrentDecoder.mapsAsObjects = true\n\t\t\t\t\trestoreMapsAsObject = false\n\t\t\t\t}\n\t\t\t\tlet map = new Map()\n\t\t\t\tif (currentDecoder.keyMap) for (let i = 0; i < token; i++) map.set(currentDecoder.decodeKey(read()),read())\n\t\t\t\telse for (let i = 0; i < token; i++) map.set(read(), read())\n\t\t\t\treturn map\n\t\t\t}\n\t\tcase 6: // extension\n\t\t\tif (token >= BUNDLED_STRINGS_ID) {\n\t\t\t\tlet structure = currentStructures[token & 0x1fff] // check record structures first\n\t\t\t\t// At some point we may provide an option for dynamic tag assignment with a range like token >= 8 && (token < 16 || (token > 0x80 && token < 0xc0) || (token > 0x130 && token < 0x4000))\n\t\t\t\tif (structure) {\n\t\t\t\t\tif (!structure.read) structure.read = createStructureReader(structure)\n\t\t\t\t\treturn structure.read()\n\t\t\t\t}\n\t\t\t\tif (token < 0x10000) {\n\t\t\t\t\tif (token == RECORD_INLINE_ID) { // we do a special check for this so that we can keep the\n\t\t\t\t\t\t// currentExtensions as densely stored array (v8 stores arrays densely under about 3000 elements)\n\t\t\t\t\t\tlet length = readJustLength()\n\t\t\t\t\t\tlet id = read()\n\t\t\t\t\t\tlet structure = read()\n\t\t\t\t\t\trecordDefinition(id, structure)\n\t\t\t\t\t\tlet object = {}\n\t\t\t\t\t\tif (currentDecoder.keyMap) for (let i = 2; i < length; i++) {\n\t\t\t\t\t\t\tlet key = currentDecoder.decodeKey(structure[i - 2])\n\t\t\t\t\t\t\tobject[safeKey(key)] = read()\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse for (let i = 2; i < length; i++) {\n\t\t\t\t\t\t\tlet key = structure[i - 2]\n\t\t\t\t\t\t\tobject[safeKey(key)] = read()\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn object\n\t\t\t\t\t}\n\t\t\t\t\telse if (token == RECORD_DEFINITIONS_ID) {\n\t\t\t\t\t\tlet length = readJustLength()\n\t\t\t\t\t\tlet id = read()\n\t\t\t\t\t\tfor (let i = 2; i < length; i++) {\n\t\t\t\t\t\t\trecordDefinition(id++, read())\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn read()\n\t\t\t\t\t} else if (token == BUNDLED_STRINGS_ID) {\n\t\t\t\t\t\treturn readBundleExt()\n\t\t\t\t\t}\n\t\t\t\t\tif (currentDecoder.getShared) {\n\t\t\t\t\t\tloadShared()\n\t\t\t\t\t\tstructure = currentStructures[token & 0x1fff]\n\t\t\t\t\t\tif (structure) {\n\t\t\t\t\t\t\tif (!structure.read)\n\t\t\t\t\t\t\t\tstructure.read = createStructureReader(structure)\n\t\t\t\t\t\t\treturn structure.read()\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet extension = currentExtensions[token]\n\t\t\tif (extension) {\n\t\t\t\tif (extension.handlesRead)\n\t\t\t\t\treturn extension(read)\n\t\t\t\telse\n\t\t\t\t\treturn extension(read())\n\t\t\t} else {\n\t\t\t\tlet input = read()\n\t\t\t\tfor (let i = 0; i < currentExtensionRanges.length; i++) {\n\t\t\t\t\tlet value = currentExtensionRanges[i](token, input)\n\t\t\t\t\tif (value !== undefined)\n\t\t\t\t\t\treturn value\n\t\t\t\t}\n\t\t\t\treturn new Tag(input, token)\n\t\t\t}\n\t\tcase 7: // fixed value\n\t\t\tswitch (token) {\n\t\t\t\tcase 0x14: return false\n\t\t\t\tcase 0x15: return true\n\t\t\t\tcase 0x16: return null\n\t\t\t\tcase 0x17: return; // undefined\n\t\t\t\tcase 0x1f:\n\t\t\t\tdefault:\n\t\t\t\t\tlet packedValue = (packedValues || getPackedValues())[token]\n\t\t\t\t\tif (packedValue !== undefined)\n\t\t\t\t\t\treturn packedValue\n\t\t\t\t\tthrow new Error('Unknown token ' + token)\n\t\t\t}\n\t\tdefault: // negative int\n\t\t\tif (isNaN(token)) {\n\t\t\t\tlet error = new Error('Unexpected end of CBOR data')\n\t\t\t\terror.incomplete = true\n\t\t\t\tthrow error\n\t\t\t}\n\t\t\tthrow new Error('Unknown CBOR token ' + token)\n\t}\n}\nconst validName = /^[a-zA-Z_$][a-zA-Z\\d_$]*$/\nfunction createStructureReader(structure) {\n\tfunction readObject() {\n\t\t// get the array size from the header\n\t\tlet length = src[position++]\n\t\t//let majorType = token >> 5\n\t\tlength = length & 0x1f\n\t\tif (length > 0x17) {\n\t\t\tswitch (length) {\n\t\t\t\tcase 0x18:\n\t\t\t\t\tlength = src[position++]\n\t\t\t\t\tbreak\n\t\t\t\tcase 0x19:\n\t\t\t\t\tlength = dataView.getUint16(position)\n\t\t\t\t\tposition += 2\n\t\t\t\t\tbreak\n\t\t\t\tcase 0x1a:\n\t\t\t\t\tlength = dataView.getUint32(position)\n\t\t\t\t\tposition += 4\n\t\t\t\t\tbreak\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Expected array header, but got ' + src[position - 1])\n\t\t\t}\n\t\t}\n\t\t// This initial function is quick to instantiate, but runs slower. After several iterations pay the cost to build the faster function\n\t\tlet compiledReader = this.compiledReader // first look to see if we have the fast compiled function\n\t\twhile(compiledReader) {\n\t\t\t// we have a fast compiled object literal reader\n\t\t\tif (compiledReader.propertyCount === length)\n\t\t\t\treturn compiledReader(read) // with the right length, so we use it\n\t\t\tcompiledReader = compiledReader.next // see if there is another reader with the right length\n\t\t}\n\t\tif (this.slowReads++ >= 3) { // create a fast compiled reader\n\t\t\tlet array = this.length == length ? this : this.slice(0, length)\n\t\t\tcompiledReader = currentDecoder.keyMap \n\t\t\t? new Function('r', 'return {' + array.map(k => currentDecoder.decodeKey(k)).map(k => validName.test(k) ? safeKey(k) + ':r()' : ('[' + JSON.stringify(k) + ']:r()')).join(',') + '}')\n\t\t\t: new Function('r', 'return {' + array.map(key => validName.test(key) ? safeKey(key) + ':r()' : ('[' + JSON.stringify(key) + ']:r()')).join(',') + '}')\n\t\t\tif (this.compiledReader)\n\t\t\t\tcompiledReader.next = this.compiledReader // if there is an existing one, we store multiple readers as a linked list because it is usually pretty rare to have multiple readers (of different length) for the same structure\n\t\t\tcompiledReader.propertyCount = length\n\t\t\tthis.compiledReader = compiledReader\n\t\t\treturn compiledReader(read)\n\t\t}\n\t\tlet object = {}\n\t\tif (currentDecoder.keyMap) for (let i = 0; i < length; i++) object[safeKey(currentDecoder.decodeKey(this[i]))] = read()\n\t\telse for (let i = 0; i < length; i++) {\n\t\t\tobject[safeKey(this[i])] = read();\n\t\t}\n\t\treturn object\n\t}\n\tstructure.slowReads = 0\n\treturn readObject\n}\n\nfunction safeKey(key) {\n\treturn key === '__proto__' ? '__proto_' : key\n}\n\nlet readFixedString = readStringJS\nlet readString8 = readStringJS\nlet readString16 = readStringJS\nlet readString32 = readStringJS\n\nexport let isNativeAccelerationEnabled = false\nexport function setExtractor(extractStrings) {\n\tisNativeAccelerationEnabled = true\n\treadFixedString = readString(1)\n\treadString8 = readString(2)\n\treadString16 = readString(3)\n\treadString32 = readString(5)\n\tfunction readString(headerLength) {\n\t\treturn function readString(length) {\n\t\t\tlet string = strings[stringPosition++]\n\t\t\tif (string == null) {\n\t\t\t\tif (bundledStrings)\n\t\t\t\t\treturn readStringJS(length)\n\t\t\t\tlet extraction = extractStrings(position, srcEnd, length, src)\n\t\t\t\tif (typeof extraction == 'string') {\n\t\t\t\t\tstring = extraction\n\t\t\t\t\tstrings = EMPTY_ARRAY\n\t\t\t\t} else {\n\t\t\t\t\tstrings = extraction\n\t\t\t\t\tstringPosition = 1\n\t\t\t\t\tsrcStringEnd = 1 // even if a utf-8 string was decoded, must indicate we are in the midst of extracted strings and can't skip strings\n\t\t\t\t\tstring = strings[0]\n\t\t\t\t\tif (string === undefined)\n\t\t\t\t\t\tthrow new Error('Unexpected end of buffer')\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet srcStringLength = string.length\n\t\t\tif (srcStringLength <= length) {\n\t\t\t\tposition += length\n\t\t\t\treturn string\n\t\t\t}\n\t\t\tsrcString = string\n\t\t\tsrcStringStart = position\n\t\t\tsrcStringEnd = position + srcStringLength\n\t\t\tposition += length\n\t\t\treturn string.slice(0, length) // we know we just want the beginning\n\t\t}\n\t}\n}\nfunction readStringJS(length) {\n\tlet result\n\tif (length < 16) {\n\t\tif (result = shortStringInJS(length))\n\t\t\treturn result\n\t}\n\tif (length > 64 && decoder)\n\t\treturn decoder.decode(src.subarray(position, position += length))\n\tconst end = position + length\n\tconst units = []\n\tresult = ''\n\twhile (position < end) {\n\t\tconst byte1 = src[position++]\n\t\tif ((byte1 & 0x80) === 0) {\n\t\t\t// 1 byte\n\t\t\tunits.push(byte1)\n\t\t} else if ((byte1 & 0xe0) === 0xc0) {\n\t\t\t// 2 bytes\n\t\t\tconst byte2 = src[position++] & 0x3f\n\t\t\tunits.push(((byte1 & 0x1f) << 6) | byte2)\n\t\t} else if ((byte1 & 0xf0) === 0xe0) {\n\t\t\t// 3 bytes\n\t\t\tconst byte2 = src[position++] & 0x3f\n\t\t\tconst byte3 = src[position++] & 0x3f\n\t\t\tunits.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3)\n\t\t} else if ((byte1 & 0xf8) === 0xf0) {\n\t\t\t// 4 bytes\n\t\t\tconst byte2 = src[position++] & 0x3f\n\t\t\tconst byte3 = src[position++] & 0x3f\n\t\t\tconst byte4 = src[position++] & 0x3f\n\t\t\tlet unit = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4\n\t\t\tif (unit > 0xffff) {\n\t\t\t\tunit -= 0x10000\n\t\t\t\tunits.push(((unit >>> 10) & 0x3ff) | 0xd800)\n\t\t\t\tunit = 0xdc00 | (unit & 0x3ff)\n\t\t\t}\n\t\t\tunits.push(unit)\n\t\t} else {\n\t\t\tunits.push(byte1)\n\t\t}\n\n\t\tif (units.length >= 0x1000) {\n\t\t\tresult += fromCharCode.apply(String, units)\n\t\t\tunits.length = 0\n\t\t}\n\t}\n\n\tif (units.length > 0) {\n\t\tresult += fromCharCode.apply(String, units)\n\t}\n\n\treturn result\n}\nlet fromCharCode = String.fromCharCode\nfunction longStringInJS(length) {\n\tlet start = position\n\tlet bytes = new Array(length)\n\tfor (let i = 0; i < length; i++) {\n\t\tconst byte = src[position++];\n\t\tif ((byte & 0x80) > 0) {\n\t\t\tposition = start\n    \t\t\treturn\n    \t\t}\n    \t\tbytes[i] = byte\n    \t}\n    \treturn fromCharCode.apply(String, bytes)\n}\nfunction shortStringInJS(length) {\n\tif (length < 4) {\n\t\tif (length < 2) {\n\t\t\tif (length === 0)\n\t\t\t\treturn ''\n\t\t\telse {\n\t\t\t\tlet a = src[position++]\n\t\t\t\tif ((a & 0x80) > 1) {\n\t\t\t\t\tposition -= 1\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\treturn fromCharCode(a)\n\t\t\t}\n\t\t} else {\n\t\t\tlet a = src[position++]\n\t\t\tlet b = src[position++]\n\t\t\tif ((a & 0x80) > 0 || (b & 0x80) > 0) {\n\t\t\t\tposition -= 2\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (length < 3)\n\t\t\t\treturn fromCharCode(a, b)\n\t\t\tlet c = src[position++]\n\t\t\tif ((c & 0x80) > 0) {\n\t\t\t\tposition -= 3\n\t\t\t\treturn\n\t\t\t}\n\t\t\treturn fromCharCode(a, b, c)\n\t\t}\n\t} else {\n\t\tlet a = src[position++]\n\t\tlet b = src[position++]\n\t\tlet c = src[position++]\n\t\tlet d = src[position++]\n\t\tif ((a & 0x80) > 0 || (b & 0x80) > 0 || (c & 0x80) > 0 || (d & 0x80) > 0) {\n\t\t\tposition -= 4\n\t\t\treturn\n\t\t}\n\t\tif (length < 6) {\n\t\t\tif (length === 4)\n\t\t\t\treturn fromCharCode(a, b, c, d)\n\t\t\telse {\n\t\t\t\tlet e = src[position++]\n\t\t\t\tif ((e & 0x80) > 0) {\n\t\t\t\t\tposition -= 5\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\treturn fromCharCode(a, b, c, d, e)\n\t\t\t}\n\t\t} else if (length < 8) {\n\t\t\tlet e = src[position++]\n\t\t\tlet f = src[position++]\n\t\t\tif ((e & 0x80) > 0 || (f & 0x80) > 0) {\n\t\t\t\tposition -= 6\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (length < 7)\n\t\t\t\treturn fromCharCode(a, b, c, d, e, f)\n\t\t\tlet g = src[position++]\n\t\t\tif ((g & 0x80) > 0) {\n\t\t\t\tposition -= 7\n\t\t\t\treturn\n\t\t\t}\n\t\t\treturn fromCharCode(a, b, c, d, e, f, g)\n\t\t} else {\n\t\t\tlet e = src[position++]\n\t\t\tlet f = src[position++]\n\t\t\tlet g = src[position++]\n\t\t\tlet h = src[position++]\n\t\t\tif ((e & 0x80) > 0 || (f & 0x80) > 0 || (g & 0x80) > 0 || (h & 0x80) > 0) {\n\t\t\t\tposition -= 8\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (length < 10) {\n\t\t\t\tif (length === 8)\n\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h)\n\t\t\t\telse {\n\t\t\t\t\tlet i = src[position++]\n\t\t\t\t\tif ((i & 0x80) > 0) {\n\t\t\t\t\t\tposition -= 9\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i)\n\t\t\t\t}\n\t\t\t} else if (length < 12) {\n\t\t\t\tlet i = src[position++]\n\t\t\t\tlet j = src[position++]\n\t\t\t\tif ((i & 0x80) > 0 || (j & 0x80) > 0) {\n\t\t\t\t\tposition -= 10\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif (length < 11)\n\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i, j)\n\t\t\t\tlet k = src[position++]\n\t\t\t\tif ((k & 0x80) > 0) {\n\t\t\t\t\tposition -= 11\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i, j, k)\n\t\t\t} else {\n\t\t\t\tlet i = src[position++]\n\t\t\t\tlet j = src[position++]\n\t\t\t\tlet k = src[position++]\n\t\t\t\tlet l = src[position++]\n\t\t\t\tif ((i & 0x80) > 0 || (j & 0x80) > 0 || (k & 0x80) > 0 || (l & 0x80) > 0) {\n\t\t\t\t\tposition -= 12\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif (length < 14) {\n\t\t\t\t\tif (length === 12)\n\t\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l)\n\t\t\t\t\telse {\n\t\t\t\t\t\tlet m = src[position++]\n\t\t\t\t\t\tif ((m & 0x80) > 0) {\n\t\t\t\t\t\t\tposition -= 13\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet m = src[position++]\n\t\t\t\t\tlet n = src[position++]\n\t\t\t\t\tif ((m & 0x80) > 0 || (n & 0x80) > 0) {\n\t\t\t\t\t\tposition -= 14\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tif (length < 15)\n\t\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n)\n\t\t\t\t\tlet o = src[position++]\n\t\t\t\t\tif ((o & 0x80) > 0) {\n\t\t\t\t\t\tposition -= 15\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction readBin(length) {\n\treturn currentDecoder.copyBuffers ?\n\t\t// specifically use the copying slice (not the node one)\n\t\tUint8Array.prototype.slice.call(src, position, position += length) :\n\t\tsrc.subarray(position, position += length)\n}\nfunction readExt(length) {\n\tlet type = src[position++]\n\tif (currentExtensions[type]) {\n\t\treturn currentExtensions[type](src.subarray(position, position += length))\n\t}\n\telse\n\t\tthrow new Error('Unknown extension type ' + type)\n}\nlet f32Array = new Float32Array(1)\nlet u8Array = new Uint8Array(f32Array.buffer, 0, 4)\nfunction getFloat16() {\n\tlet byte0 = src[position++]\n\tlet byte1 = src[position++]\n\tlet exponent = (byte0 & 0x7f) >> 2;\n\tif (exponent === 0x1f) { // specials\n\t\tif (byte1 || (byte0 & 3))\n\t\t\treturn NaN;\n\t\treturn (byte0 & 0x80) ? -Infinity : Infinity;\n\t}\n\tif (exponent === 0) { // sub-normals\n\t\t// significand with 10 fractional bits and divided by 2^14\n\t\tlet abs = (((byte0 & 3) << 8) | byte1) / (1 << 24)\n\t\treturn (byte0 & 0x80) ? -abs : abs\n\t}\n\n\tu8Array[3] = (byte0 & 0x80) | // sign bit\n\t\t((exponent >> 1) + 56) // 4 of 5 of the exponent bits, re-offset-ed\n\tu8Array[2] = ((byte0 & 7) << 5) | // last exponent bit and first two mantissa bits\n\t\t(byte1 >> 3) // next 5 bits of mantissa\n\tu8Array[1] = byte1 << 5; // last three bits of mantissa\n\tu8Array[0] = 0;\n\treturn f32Array[0];\n}\n\nlet keyCache = new Array(4096)\nfunction readKey() {\n\tlet length = src[position++]\n\tif (length >= 0x60 && length < 0x78) {\n\t\t// fixstr, potentially use key cache\n\t\tlength = length - 0x60\n\t\tif (srcStringEnd >= position) // if it has been extracted, must use it (and faster anyway)\n\t\t\treturn srcString.slice(position - srcStringStart, (position += length) - srcStringStart)\n\t\telse if (!(srcStringEnd == 0 && srcEnd < 180))\n\t\t\treturn readFixedString(length)\n\t} else { // not cacheable, go back and do a standard read\n\t\tposition--\n\t\treturn read()\n\t}\n\tlet key = ((length << 5) ^ (length > 1 ? dataView.getUint16(position) : length > 0 ? src[position] : 0)) & 0xfff\n\tlet entry = keyCache[key]\n\tlet checkPosition = position\n\tlet end = position + length - 3\n\tlet chunk\n\tlet i = 0\n\tif (entry && entry.bytes == length) {\n\t\twhile (checkPosition < end) {\n\t\t\tchunk = dataView.getUint32(checkPosition)\n\t\t\tif (chunk != entry[i++]) {\n\t\t\t\tcheckPosition = 0x70000000\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcheckPosition += 4\n\t\t}\n\t\tend += 3\n\t\twhile (checkPosition < end) {\n\t\t\tchunk = src[checkPosition++]\n\t\t\tif (chunk != entry[i++]) {\n\t\t\t\tcheckPosition = 0x70000000\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif (checkPosition === end) {\n\t\t\tposition = checkPosition\n\t\t\treturn entry.string\n\t\t}\n\t\tend -= 3\n\t\tcheckPosition = position\n\t}\n\tentry = []\n\tkeyCache[key] = entry\n\tentry.bytes = length\n\twhile (checkPosition < end) {\n\t\tchunk = dataView.getUint32(checkPosition)\n\t\tentry.push(chunk)\n\t\tcheckPosition += 4\n\t}\n\tend += 3\n\twhile (checkPosition < end) {\n\t\tchunk = src[checkPosition++]\n\t\tentry.push(chunk)\n\t}\n\t// for small blocks, avoiding the overhead of the extract call is helpful\n\tlet string = length < 16 ? shortStringInJS(length) : longStringInJS(length)\n\tif (string != null)\n\t\treturn entry.string = string\n\treturn entry.string = readFixedString(length)\n}\n\nexport class Tag {\n\tconstructor(value, tag) {\n\t\tthis.value = value\n\t\tthis.tag = tag\n\t}\n}\n\ncurrentExtensions[0] = (dateString) => {\n\t// string date extension\n\treturn new Date(dateString)\n}\n\ncurrentExtensions[1] = (epochSec) => {\n\t// numeric date extension\n\treturn new Date(Math.round(epochSec * 1000))\n}\n\ncurrentExtensions[2] = (buffer) => {\n\t// bigint extension\n\tlet value = BigInt(0)\n\tfor (let i = 0, l = buffer.byteLength; i < l; i++) {\n\t\tvalue = BigInt(buffer[i]) + value << BigInt(8)\n\t}\n\treturn value\n}\n\ncurrentExtensions[3] = (buffer) => {\n\t// negative bigint extension\n\treturn BigInt(-1) - currentExtensions[2](buffer)\n}\ncurrentExtensions[4] = (fraction) => {\n\t// best to reparse to maintain accuracy\n\treturn +(fraction[1] + 'e' + fraction[0])\n}\n\ncurrentExtensions[5] = (fraction) => {\n\t// probably not sufficiently accurate\n\treturn fraction[1] * Math.exp(fraction[0] * Math.log(2))\n}\n\n// the registration of the record definition extension\nconst recordDefinition = (id, structure) => {\n\tid = id - 0xe000\n\tlet existingStructure = currentStructures[id]\n\tif (existingStructure && existingStructure.isShared) {\n\t\t(currentStructures.restoreStructures || (currentStructures.restoreStructures = []))[id] = existingStructure\n\t}\n\tcurrentStructures[id] = structure\n\n\tstructure.read = createStructureReader(structure)\n}\ncurrentExtensions[LEGACY_RECORD_INLINE_ID] = (data) => {\n\tlet length = data.length\n\tlet structure = data[1]\n\trecordDefinition(data[0], structure)\n\tlet object = {}\n\tfor (let i = 2; i < length; i++) {\n\t\tlet key = structure[i - 2]\n\t\tobject[safeKey(key)] = data[i]\n\t}\n\treturn object\n}\ncurrentExtensions[14] = (value) => {\n\tif (bundledStrings)\n\t\treturn bundledStrings[0].slice(bundledStrings.position0, bundledStrings.position0 += value)\n\treturn new Tag(value, 14)\n}\ncurrentExtensions[15] = (value) => {\n\tif (bundledStrings)\n\t\treturn bundledStrings[1].slice(bundledStrings.position1, bundledStrings.position1 += value)\n\treturn new Tag(value, 15)\n}\nlet glbl = { Error, RegExp }\ncurrentExtensions[27] = (data) => { // http://cbor.schmorp.de/generic-object\n\treturn (glbl[data[0]] || Error)(data[1], data[2])\n}\nconst packedTable = (read) => {\n\tif (src[position++] != 0x84)\n\t\tthrow new Error('Packed values structure must be followed by a 4 element array')\n\tlet newPackedValues = read() // packed values\n\tpackedValues = packedValues ? newPackedValues.concat(packedValues.slice(newPackedValues.length)) : newPackedValues\n\tpackedValues.prefixes = read()\n\tpackedValues.suffixes = read()\n\treturn read() // read the rump\n}\npackedTable.handlesRead = true\ncurrentExtensions[51] = packedTable\n\ncurrentExtensions[PACKED_REFERENCE_TAG_ID] = (data) => { // packed reference\n\tif (!packedValues) {\n\t\tif (currentDecoder.getShared)\n\t\t\tloadShared()\n\t\telse\n\t\t\treturn new Tag(data, PACKED_REFERENCE_TAG_ID)\n\t}\n\tif (typeof data == 'number')\n\t\treturn packedValues[16 + (data >= 0 ? 2 * data : (-2 * data - 1))]\n\tthrow new Error('No support for non-integer packed references yet')\n}\n\n// The following code is an incomplete implementation of http://cbor.schmorp.de/stringref\n// the real thing would need to implemennt more logic to populate the stringRefs table and\n// maintain a stack of stringRef \"namespaces\".\n//\n// currentExtensions[25] = (id) => {\n// \treturn stringRefs[id]\n// }\n// currentExtensions[256] = (read) => {\n// \tstringRefs = []\n// \ttry {\n// \t\treturn read()\n// \t} finally {\n// \t\tstringRefs = null\n// \t}\n// }\n// currentExtensions[256].handlesRead = true\n\ncurrentExtensions[28] = (read) => { \n\t// shareable http://cbor.schmorp.de/value-sharing (for structured clones)\n\tif (!referenceMap) {\n\t\treferenceMap = new Map()\n\t\treferenceMap.id = 0\n\t}\n\tlet id = referenceMap.id++\n\tlet token = src[position]\n\tlet target\n\t// TODO: handle Maps, Sets, and other types that can cycle; this is complicated, because you potentially need to read\n\t// ahead past references to record structure definitions\n\tif ((token >> 5) == 4)\n\t\ttarget = []\n\telse\n\t\ttarget = {}\n\n\tlet refEntry = { target } // a placeholder object\n\treferenceMap.set(id, refEntry)\n\tlet targetProperties = read() // read the next value as the target object to id\n\tif (refEntry.used) // there is a cycle, so we have to assign properties to original target\n\t\treturn Object.assign(target, targetProperties)\n\trefEntry.target = targetProperties // the placeholder wasn't used, replace with the deserialized one\n\treturn targetProperties // no cycle, can just use the returned read object\n}\ncurrentExtensions[28].handlesRead = true\n\ncurrentExtensions[29] = (id) => {\n\t// sharedref http://cbor.schmorp.de/value-sharing (for structured clones)\n\tlet refEntry = referenceMap.get(id)\n\trefEntry.used = true\n\treturn refEntry.target\n}\n\ncurrentExtensions[258] = (array) => new Set(array); // https://github.com/input-output-hk/cbor-sets-spec/blob/master/CBOR_SETS.md\n(currentExtensions[259] = (read) => {\n\t// https://github.com/shanewholloway/js-cbor-codec/blob/master/docs/CBOR-259-spec\n\t// for decoding as a standard Map\n\tif (currentDecoder.mapsAsObjects) {\n\t\tcurrentDecoder.mapsAsObjects = false\n\t\trestoreMapsAsObject = true\n\t}\n\treturn read()\n}).handlesRead = true\nfunction combine(a, b) {\n\tif (typeof a === 'string')\n\t\treturn a + b\n\tif (a instanceof Array)\n\t\treturn a.concat(b)\n\treturn Object.assign({}, a, b)\n}\nfunction getPackedValues() {\n\tif (!packedValues) {\n\t\tif (currentDecoder.getShared)\n\t\t\tloadShared()\n\t\telse\n\t\t\tthrow new Error('No packed values available')\n\t}\n\treturn packedValues\n}\nconst SHARED_DATA_TAG_ID = 0x53687264 // ascii 'Shrd'\ncurrentExtensionRanges.push((tag, input) => {\n\tif (tag >= 225 && tag <= 255)\n\t\treturn combine(getPackedValues().prefixes[tag - 224], input)\n\tif (tag >= 28704 && tag <= 32767)\n\t\treturn combine(getPackedValues().prefixes[tag - 28672], input)\n\tif (tag >= 1879052288 && tag <= 2147483647)\n\t\treturn combine(getPackedValues().prefixes[tag - 1879048192], input)\n\tif (tag >= 216 && tag <= 223)\n\t\treturn combine(input, getPackedValues().suffixes[tag - 216])\n\tif (tag >= 27647 && tag <= 28671)\n\t\treturn combine(input, getPackedValues().suffixes[tag - 27639])\n\tif (tag >= 1811940352 && tag <= 1879048191)\n\t\treturn combine(input, getPackedValues().suffixes[tag - 1811939328])\n\tif (tag == SHARED_DATA_TAG_ID) {// we do a special check for this so that we can keep the currentExtensions as densely stored array (v8 stores arrays densely under about 3000 elements)\n\t\treturn {\n\t\t\tpackedValues: packedValues,\n\t\t\tstructures: currentStructures.slice(0),\n\t\t\tversion: input,\n\t\t}\n\t}\n\tif (tag == 55799) // self-descriptive CBOR tag, just return input value\n\t\treturn input\n})\n\nconst isLittleEndianMachine = new Uint8Array(new Uint16Array([1]).buffer)[0] == 1\nexport const typedArrays = [Uint8Array, Uint8ClampedArray, Uint16Array, Uint32Array,\n\ttypeof BigUint64Array == 'undefined' ? { name:'BigUint64Array' } : BigUint64Array, Int8Array, Int16Array, Int32Array,\n\ttypeof BigInt64Array == 'undefined' ? { name:'BigInt64Array' } : BigInt64Array, Float32Array, Float64Array]\nconst typedArrayTags = [64, 68, 69, 70, 71, 72, 77, 78, 79, 85, 86]\nfor (let i = 0; i < typedArrays.length; i++) {\n\tregisterTypedArray(typedArrays[i], typedArrayTags[i])\n}\nfunction registerTypedArray(TypedArray, tag) {\n\tlet dvMethod = 'get' + TypedArray.name.slice(0, -5)\n\tlet bytesPerElement;\n\tif (typeof TypedArray === 'function')\n\t\tbytesPerElement = TypedArray.BYTES_PER_ELEMENT;\n\telse\n\t\tTypedArray = null;\n\tfor (let littleEndian = 0; littleEndian < 2; littleEndian++) {\n\t\tif (!littleEndian && bytesPerElement == 1)\n\t\t\tcontinue\n\t\tlet sizeShift = bytesPerElement == 2 ? 1 : bytesPerElement == 4 ? 2 : 3\n\t\tcurrentExtensions[littleEndian ? tag : (tag - 4)] = (bytesPerElement == 1 || littleEndian == isLittleEndianMachine) ? (buffer) => {\n\t\t\tif (!TypedArray)\n\t\t\t\tthrow new Error('Could not find typed array for code ' + tag)\n\t\t\t// we have to always slice/copy here to get a new ArrayBuffer that is word/byte aligned\n\t\t\treturn new TypedArray(Uint8Array.prototype.slice.call(buffer, 0).buffer)\n\t\t} : buffer => {\n\t\t\tif (!TypedArray)\n\t\t\t\tthrow new Error('Could not find typed array for code ' + tag)\n\t\t\tlet dv = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength)\n\t\t\tlet elements = buffer.length >> sizeShift\n\t\t\tlet ta = new TypedArray(elements)\n\t\t\tlet method = dv[dvMethod]\n\t\t\tfor (let i = 0; i < elements; i++) {\n\t\t\t\tta[i] = method.call(dv, i << sizeShift, littleEndian)\n\t\t\t}\n\t\t\treturn ta\n\t\t}\n\t}\n}\n\nfunction readBundleExt() {\n\tlet length = readJustLength()\n\tlet bundlePosition = position + read()\n\tfor (let i = 2; i < length; i++) {\n\t\t// skip past bundles that were already read\n\t\tlet bundleLength = readJustLength() // this will increment position, so must add to position afterwards\n\t\tposition += bundleLength\n\t}\n\tlet dataPosition = position\n\tposition = bundlePosition\n\tbundledStrings = [readStringJS(readJustLength()), readStringJS(readJustLength())]\n\tbundledStrings.position0 = 0\n\tbundledStrings.position1 = 0\n\tbundledStrings.postBundlePosition = position\n\tposition = dataPosition\n\treturn read()\n}\n\nfunction readJustLength() {\n\tlet token = src[position++] & 0x1f\n\tif (token > 0x17) {\n\t\tswitch (token) {\n\t\t\tcase 0x18:\n\t\t\t\ttoken = src[position++]\n\t\t\t\tbreak\n\t\t\tcase 0x19:\n\t\t\t\ttoken = dataView.getUint16(position)\n\t\t\t\tposition += 2\n\t\t\t\tbreak\n\t\t\tcase 0x1a:\n\t\t\t\ttoken = dataView.getUint32(position)\n\t\t\t\tposition += 4\n\t\t\t\tbreak\n\t\t}\n\t}\n\treturn token\n}\n\nfunction loadShared() {\n\tif (currentDecoder.getShared) {\n\t\tlet sharedData = saveState(() => {\n\t\t\t// save the state in case getShared modifies our buffer\n\t\t\tsrc = null\n\t\t\treturn currentDecoder.getShared()\n\t\t}) || {}\n\t\tlet updatedStructures = sharedData.structures || []\n\t\tcurrentDecoder.sharedVersion = sharedData.version\n\t\tpackedValues = currentDecoder.sharedValues = sharedData.packedValues\n\t\tif (currentStructures === true)\n\t\t\tcurrentDecoder.structures = currentStructures = updatedStructures\n\t\telse\n\t\t\tcurrentStructures.splice.apply(currentStructures, [0, updatedStructures.length].concat(updatedStructures))\n\t}\n}\n\nfunction saveState(callback) {\n\tlet savedSrcEnd = srcEnd\n\tlet savedPosition = position\n\tlet savedStringPosition = stringPosition\n\tlet savedSrcStringStart = srcStringStart\n\tlet savedSrcStringEnd = srcStringEnd\n\tlet savedSrcString = srcString\n\tlet savedStrings = strings\n\tlet savedReferenceMap = referenceMap\n\tlet savedBundledStrings = bundledStrings\n\n\t// TODO: We may need to revisit this if we do more external calls to user code (since it could be slow)\n\tlet savedSrc = new Uint8Array(src.slice(0, srcEnd)) // we copy the data in case it changes while external data is processed\n\tlet savedStructures = currentStructures\n\tlet savedDecoder = currentDecoder\n\tlet savedSequentialMode = sequentialMode\n\tlet value = callback()\n\tsrcEnd = savedSrcEnd\n\tposition = savedPosition\n\tstringPosition = savedStringPosition\n\tsrcStringStart = savedSrcStringStart\n\tsrcStringEnd = savedSrcStringEnd\n\tsrcString = savedSrcString\n\tstrings = savedStrings\n\treferenceMap = savedReferenceMap\n\tbundledStrings = savedBundledStrings\n\tsrc = savedSrc\n\tsequentialMode = savedSequentialMode\n\tcurrentStructures = savedStructures\n\tcurrentDecoder = savedDecoder\n\tdataView = new DataView(src.buffer, src.byteOffset, src.byteLength)\n\treturn value\n}\nexport function clearSource() {\n\tsrc = null\n\treferenceMap = null\n\tcurrentStructures = null\n}\n\nexport function addExtension(extension) {\n\tcurrentExtensions[extension.tag] = extension.decode\n}\n\nexport const mult10 = new Array(147) // this is a table matching binary exponents to the multiplier to determine significant digit rounding\nfor (let i = 0; i < 256; i++) {\n\tmult10[i] = +('1e' + Math.floor(45.15 - i * 0.30103))\n}\nlet defaultDecoder = new Decoder({ useRecords: false })\nexport const decode = defaultDecoder.decode\nexport const decodeMultiple = defaultDecoder.decodeMultiple\nexport const FLOAT32_OPTIONS = {\n\tNEVER: 0,\n\tALWAYS: 1,\n\tDECIMAL_ROUND: 3,\n\tDECIMAL_FIT: 4\n}\nexport function roundFloat32(float32Number) {\n\tf32Array[0] = float32Number\n\tlet multiplier = mult10[((u8Array[3] & 0x7f) << 1) | (u8Array[2] >> 7)]\n\treturn ((multiplier * float32Number + (float32Number > 0 ? 0.5 : -0.5)) >> 0) / multiplier\n}\n","import { Decoder, mult10, Tag, typedArrays, addExtension as decodeAddExtension } from './decode.js'\nlet textEncoder\ntry {\n\ttextEncoder = new TextEncoder()\n} catch (error) {}\nlet extensions, extensionClasses\nconst Buffer = globalThis.Buffer\nconst hasNodeBuffer = typeof Buffer !== 'undefined'\nconst ByteArrayAllocate = hasNodeBuffer ? Buffer.allocUnsafeSlow : Uint8Array\nconst ByteArray = hasNodeBuffer ? Buffer : Uint8Array\nconst MAX_STRUCTURES = 0x100\nconst MAX_BUFFER_SIZE = hasNodeBuffer ? 0x100000000 : 0x7fd00000\nlet serializationId = 1\nlet throwOnIterable\nlet target\nlet targetView\nlet position = 0\nlet safeEnd\nlet bundledStrings = null\nconst MAX_BUNDLE_SIZE = 0xf000\nconst hasNonLatin = /[\\u0080-\\uFFFF]/\nconst RECORD_SYMBOL = Symbol('record-id')\nexport class Encoder extends Decoder {\n\tconstructor(options) {\n\t\tsuper(options)\n\t\tthis.offset = 0\n\t\tlet typeBuffer\n\t\tlet start\n\t\tlet sharedStructures\n\t\tlet hasSharedUpdate\n\t\tlet structures\n\t\tlet referenceMap\n\t\toptions = options || {}\n\t\tlet encodeUtf8 = ByteArray.prototype.utf8Write ? function(string, position, maxBytes) {\n\t\t\treturn target.utf8Write(string, position, maxBytes)\n\t\t} : (textEncoder && textEncoder.encodeInto) ?\n\t\t\tfunction(string, position) {\n\t\t\t\treturn textEncoder.encodeInto(string, target.subarray(position)).written\n\t\t\t} : false\n\n\t\tlet encoder = this\n\t\tlet hasSharedStructures = options.structures || options.saveStructures\n\t\tlet maxSharedStructures = options.maxSharedStructures\n\t\tif (maxSharedStructures == null)\n\t\t\tmaxSharedStructures = hasSharedStructures ? 128 : 0\n\t\tif (maxSharedStructures > 8190)\n\t\t\tthrow new Error('Maximum maxSharedStructure is 8190')\n\t\tlet isSequential = options.sequential\n\t\tif (isSequential) {\n\t\t\tmaxSharedStructures = 0\n\t\t}\n\t\tif (!this.structures)\n\t\t\tthis.structures = []\n\t\tif (this.saveStructures)\n\t\t\tthis.saveShared = this.saveStructures\n\t\tlet samplingPackedValues, packedObjectMap, sharedValues = options.sharedValues\n\t\tlet sharedPackedObjectMap\n\t\tif (sharedValues) {\n\t\t\tsharedPackedObjectMap = Object.create(null)\n\t\t\tfor (let i = 0, l = sharedValues.length; i < l; i++) {\n\t\t\t\tsharedPackedObjectMap[sharedValues[i]] = i\n\t\t\t}\n\t\t}\n\t\tlet recordIdsToRemove = []\n\t\tlet transitionsCount = 0\n\t\tlet serializationsSinceTransitionRebuild = 0\n\t\t\n\t\tthis.mapEncode = function(value, encodeOptions) {\n\t\t\t// Experimental support for premapping keys using _keyMap instad of keyMap - not optiimised yet)\n\t\t\tif (this._keyMap && !this._mapped) {\n\t\t\t\t//console.log('encoding ', value)\n\t\t\t\tswitch (value.constructor.name) {\n\t\t\t\t\tcase 'Array': \n\t\t\t\t\t\tvalue = value.map(r => this.encodeKeys(r))\n\t\t\t\t\t\tbreak\n\t\t\t\t\t//case 'Map': \n\t\t\t\t\t//\tvalue = this.encodeKeys(value)\n\t\t\t\t\t//\tbreak\n\t\t\t\t}\n\t\t\t\t//this._mapped = true\n\t\t\t}\n\t\t\treturn this.encode(value, encodeOptions)\n\t\t}\n\t\t\n\t\tthis.encode = function(value, encodeOptions)\t{\n\t\t\tif (!target) {\n\t\t\t\ttarget = new ByteArrayAllocate(8192)\n\t\t\t\ttargetView = new DataView(target.buffer, 0, 8192)\n\t\t\t\tposition = 0\n\t\t\t}\n\t\t\tsafeEnd = target.length - 10\n\t\t\tif (safeEnd - position < 0x800) {\n\t\t\t\t// don't start too close to the end, \n\t\t\t\ttarget = new ByteArrayAllocate(target.length)\n\t\t\t\ttargetView = new DataView(target.buffer, 0, target.length)\n\t\t\t\tsafeEnd = target.length - 10\n\t\t\t\tposition = 0\n\t\t\t} else if (encodeOptions === REUSE_BUFFER_MODE)\n\t\t\t\tposition = (position + 7) & 0x7ffffff8 // Word align to make any future copying of this buffer faster\n\t\t\tstart = position\n\t\t\tif (encoder.useSelfDescribedHeader) {\n\t\t\t\ttargetView.setUint32(position, 0xd9d9f700) // tag two byte, then self-descriptive tag\n\t\t\t\tposition += 3\n\t\t\t}\n\t\t\treferenceMap = encoder.structuredClone ? new Map() : null\n\t\t\tif (encoder.bundleStrings && typeof value !== 'string') {\n\t\t\t\tbundledStrings = []\n\t\t\t\tbundledStrings.size = Infinity // force a new bundle start on first string\n\t\t\t} else\n\t\t\t\tbundledStrings = null\n\n\t\t\tsharedStructures = encoder.structures\n\t\t\tif (sharedStructures) {\n\t\t\t\tif (sharedStructures.uninitialized) {\n\t\t\t\t\tlet sharedData = encoder.getShared() || {}\n\t\t\t\t\tencoder.structures = sharedStructures = sharedData.structures || []\n\t\t\t\t\tencoder.sharedVersion = sharedData.version\n\t\t\t\t\tlet sharedValues = encoder.sharedValues = sharedData.packedValues\n\t\t\t\t\tif (sharedValues) {\n\t\t\t\t\t\tsharedPackedObjectMap = {}\n\t\t\t\t\t\tfor (let i = 0, l = sharedValues.length; i < l; i++)\n\t\t\t\t\t\t\tsharedPackedObjectMap[sharedValues[i]] = i\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet sharedStructuresLength = sharedStructures.length\n\t\t\t\tif (sharedStructuresLength > maxSharedStructures && !isSequential)\n\t\t\t\t\tsharedStructuresLength = maxSharedStructures\n\t\t\t\tif (!sharedStructures.transitions) {\n\t\t\t\t\t// rebuild our structure transitions\n\t\t\t\t\tsharedStructures.transitions = Object.create(null)\n\t\t\t\t\tfor (let i = 0; i < sharedStructuresLength; i++) {\n\t\t\t\t\t\tlet keys = sharedStructures[i]\n\t\t\t\t\t\t//console.log('shared struct keys:', keys)\n\t\t\t\t\t\tif (!keys)\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\tlet nextTransition, transition = sharedStructures.transitions\n\t\t\t\t\t\tfor (let j = 0, l = keys.length; j < l; j++) {\n\t\t\t\t\t\t\tif (transition[RECORD_SYMBOL] === undefined)\n\t\t\t\t\t\t\t\ttransition[RECORD_SYMBOL] = i\n\t\t\t\t\t\t\tlet key = keys[j]\n\t\t\t\t\t\t\tnextTransition = transition[key]\n\t\t\t\t\t\t\tif (!nextTransition) {\n\t\t\t\t\t\t\t\tnextTransition = transition[key] = Object.create(null)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttransition = nextTransition\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttransition[RECORD_SYMBOL] = i | 0x100000\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!isSequential)\n\t\t\t\t\tsharedStructures.nextId = sharedStructuresLength\n\t\t\t}\n\t\t\tif (hasSharedUpdate)\n\t\t\t\thasSharedUpdate = false\n\t\t\tstructures = sharedStructures || []\n\t\t\tpackedObjectMap = sharedPackedObjectMap\n\t\t\tif (options.pack) {\n\t\t\t\tlet packedValues = new Map()\n\t\t\t\tpackedValues.values = []\n\t\t\t\tpackedValues.encoder = encoder\n\t\t\t\tpackedValues.maxValues = options.maxPrivatePackedValues || (sharedPackedObjectMap ? 16 : Infinity)\n\t\t\t\tpackedValues.objectMap = sharedPackedObjectMap || false\n\t\t\t\tpackedValues.samplingPackedValues = samplingPackedValues\n\t\t\t\tfindRepetitiveStrings(value, packedValues)\n\t\t\t\tif (packedValues.values.length > 0) {\n\t\t\t\t\ttarget[position++] = 0xd8 // one-byte tag\n\t\t\t\t\ttarget[position++] = 51 // tag 51 for packed shared structures https://www.potaroo.net/ietf/ids/draft-ietf-cbor-packed-03.txt\n\t\t\t\t\twriteArrayHeader(4)\n\t\t\t\t\tlet valuesArray = packedValues.values\n\t\t\t\t\tencode(valuesArray)\n\t\t\t\t\twriteArrayHeader(0) // prefixes\n\t\t\t\t\twriteArrayHeader(0) // suffixes\n\t\t\t\t\tpackedObjectMap = Object.create(sharedPackedObjectMap || null)\n\t\t\t\t\tfor (let i = 0, l = valuesArray.length; i < l; i++) {\n\t\t\t\t\t\tpackedObjectMap[valuesArray[i]] = i\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrowOnIterable = encodeOptions & THROW_ON_ITERABLE;\n\t\t\ttry {\n\t\t\t\tif (throwOnIterable)\n\t\t\t\t\treturn;\n\t\t\t\tencode(value)\n\t\t\t\tif (bundledStrings) {\n\t\t\t\t\twriteBundles(start, encode)\n\t\t\t\t}\n\t\t\t\tencoder.offset = position // update the offset so next serialization doesn't write over our buffer, but can continue writing to same buffer sequentially\n\t\t\t\tif (referenceMap && referenceMap.idsToInsert) {\n\t\t\t\t\tposition += referenceMap.idsToInsert.length * 2\n\t\t\t\t\tif (position > safeEnd)\n\t\t\t\t\t\tmakeRoom(position)\n\t\t\t\t\tencoder.offset = position\n\t\t\t\t\tlet serialized = insertIds(target.subarray(start, position), referenceMap.idsToInsert)\n\t\t\t\t\treferenceMap = null\n\t\t\t\t\treturn serialized\n\t\t\t\t}\n\t\t\t\tif (encodeOptions & REUSE_BUFFER_MODE) {\n\t\t\t\t\ttarget.start = start\n\t\t\t\t\ttarget.end = position\n\t\t\t\t\treturn target\n\t\t\t\t}\n\t\t\t\treturn target.subarray(start, position) // position can change if we call encode again in saveShared, so we get the buffer now\n\t\t\t} finally {\n\t\t\t\tif (sharedStructures) {\n\t\t\t\t\tif (serializationsSinceTransitionRebuild < 10)\n\t\t\t\t\t\tserializationsSinceTransitionRebuild++\n\t\t\t\t\tif (sharedStructures.length > maxSharedStructures)\n\t\t\t\t\t\tsharedStructures.length = maxSharedStructures\n\t\t\t\t\tif (transitionsCount > 10000) {\n\t\t\t\t\t\t// force a rebuild occasionally after a lot of transitions so it can get cleaned up\n\t\t\t\t\t\tsharedStructures.transitions = null\n\t\t\t\t\t\tserializationsSinceTransitionRebuild = 0\n\t\t\t\t\t\ttransitionsCount = 0\n\t\t\t\t\t\tif (recordIdsToRemove.length > 0)\n\t\t\t\t\t\t\trecordIdsToRemove = []\n\t\t\t\t\t} else if (recordIdsToRemove.length > 0 && !isSequential) {\n\t\t\t\t\t\tfor (let i = 0, l = recordIdsToRemove.length; i < l; i++) {\n\t\t\t\t\t\t\trecordIdsToRemove[i][RECORD_SYMBOL] = undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t\trecordIdsToRemove = []\n\t\t\t\t\t\t//sharedStructures.nextId = maxSharedStructures\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (hasSharedUpdate && encoder.saveShared) {\n\t\t\t\t\tif (encoder.structures.length > maxSharedStructures) {\n\t\t\t\t\t\tencoder.structures = encoder.structures.slice(0, maxSharedStructures)\n\t\t\t\t\t}\n\t\t\t\t\t// we can't rely on start/end with REUSE_BUFFER_MODE since they will (probably) change when we save\n\t\t\t\t\tlet returnBuffer = target.subarray(start, position)\n\t\t\t\t\tif (encoder.updateSharedData() === false)\n\t\t\t\t\t\treturn encoder.encode(value) // re-encode if it fails\n\t\t\t\t\treturn returnBuffer\n\t\t\t\t}\n\t\t\t\tif (encodeOptions & RESET_BUFFER_MODE)\n\t\t\t\t\tposition = start\n\t\t\t}\n\t\t}\n\t\tthis.findCommonStringsToPack = () => {\n\t\t\tsamplingPackedValues = new Map()\n\t\t\tif (!sharedPackedObjectMap)\n\t\t\t\tsharedPackedObjectMap = Object.create(null)\n\t\t\treturn (options) => {\n\t\t\t\tlet threshold = options && options.threshold || 4\n\t\t\t\tlet position = this.pack ? options.maxPrivatePackedValues || 16 : 0\n\t\t\t\tif (!sharedValues)\n\t\t\t\t\tsharedValues = this.sharedValues = []\n\t\t\t\tfor (let [ key, status ] of samplingPackedValues) {\n\t\t\t\t\tif (status.count > threshold) {\n\t\t\t\t\t\tsharedPackedObjectMap[key] = position++\n\t\t\t\t\t\tsharedValues.push(key)\n\t\t\t\t\t\thasSharedUpdate = true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twhile (this.saveShared && this.updateSharedData() === false) {}\n\t\t\t\tsamplingPackedValues = null\n\t\t\t}\n\t\t}\n\t\tconst encode = (value) => {\n\t\t\tif (position > safeEnd)\n\t\t\t\ttarget = makeRoom(position)\n\n\t\t\tvar type = typeof value\n\t\t\tvar length\n\t\t\tif (type === 'string') {\n\t\t\t\tif (packedObjectMap) {\n\t\t\t\t\tlet packedPosition = packedObjectMap[value]\n\t\t\t\t\tif (packedPosition >= 0) {\n\t\t\t\t\t\tif (packedPosition < 16)\n\t\t\t\t\t\t\ttarget[position++] = packedPosition + 0xe0 // simple values, defined in https://www.potaroo.net/ietf/ids/draft-ietf-cbor-packed-03.txt\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\ttarget[position++] = 0xc6 // tag 6 defined in https://www.potaroo.net/ietf/ids/draft-ietf-cbor-packed-03.txt\n\t\t\t\t\t\t\tif (packedPosition & 1)\n\t\t\t\t\t\t\t\tencode((15 - packedPosition) >> 1)\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tencode((packedPosition - 16) >> 1)\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn\n/*\t\t\t\t\t\t} else if (packedStatus.serializationId != serializationId) {\n\t\t\t\t\t\t\tpackedStatus.serializationId = serializationId\n\t\t\t\t\t\t\tpackedStatus.count = 1\n\t\t\t\t\t\t\tif (options.sharedPack) {\n\t\t\t\t\t\t\t\tlet sharedCount = packedStatus.sharedCount = (packedStatus.sharedCount || 0) + 1\n\t\t\t\t\t\t\t\tif (shareCount > (options.sharedPack.threshold || 5)) {\n\t\t\t\t\t\t\t\t\tlet sharedPosition = packedStatus.position = packedStatus.nextSharedPosition\n\t\t\t\t\t\t\t\t\thasSharedUpdate = true\n\t\t\t\t\t\t\t\t\tif (sharedPosition < 16)\n\t\t\t\t\t\t\t\t\t\ttarget[position++] = sharedPosition + 0xc0\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} // else any in-doc incrementation?*/\n\t\t\t\t\t} else if (samplingPackedValues && !options.pack) {\n\t\t\t\t\t\tlet status = samplingPackedValues.get(value)\n\t\t\t\t\t\tif (status)\n\t\t\t\t\t\t\tstatus.count++\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tsamplingPackedValues.set(value, {\n\t\t\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet strLength = value.length\n\t\t\t\tif (bundledStrings && strLength >= 4 && strLength < 0x400) {\n\t\t\t\t\tif ((bundledStrings.size += strLength) > MAX_BUNDLE_SIZE) {\n\t\t\t\t\t\tlet extStart\n\t\t\t\t\t\tlet maxBytes = (bundledStrings[0] ? bundledStrings[0].length * 3 + bundledStrings[1].length : 0) + 10\n\t\t\t\t\t\tif (position + maxBytes > safeEnd)\n\t\t\t\t\t\t\ttarget = makeRoom(position + maxBytes)\n\t\t\t\t\t\ttarget[position++] = 0xd9 // tag 16-bit\n\t\t\t\t\t\ttarget[position++] = 0xdf // tag 0xdff9\n\t\t\t\t\t\ttarget[position++] = 0xf9\n\t\t\t\t\t\t// TODO: If we only have one bundle with any string data, only write one string bundle\n\t\t\t\t\t\ttarget[position++] = bundledStrings.position ? 0x84 : 0x82 // array of 4 or 2 elements depending on if we write bundles\n\t\t\t\t\t\ttarget[position++] = 0x1a // 32-bit unsigned int\n\t\t\t\t\t\textStart = position - start\n\t\t\t\t\t\tposition += 4 // reserve for writing bundle reference\n\t\t\t\t\t\tif (bundledStrings.position) {\n\t\t\t\t\t\t\twriteBundles(start, encode) // write the last bundles\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbundledStrings = ['', ''] // create new ones\n\t\t\t\t\t\tbundledStrings.size = 0\n\t\t\t\t\t\tbundledStrings.position = extStart\n\t\t\t\t\t}\n\t\t\t\t\tlet twoByte = hasNonLatin.test(value)\n\t\t\t\t\tbundledStrings[twoByte ? 0 : 1] += value\n\t\t\t\t\ttarget[position++] = twoByte ? 0xce : 0xcf\n\t\t\t\t\tencode(strLength);\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tlet headerSize\n\t\t\t\t// first we estimate the header size, so we can write to the correct location\n\t\t\t\tif (strLength < 0x20) {\n\t\t\t\t\theaderSize = 1\n\t\t\t\t} else if (strLength < 0x100) {\n\t\t\t\t\theaderSize = 2\n\t\t\t\t} else if (strLength < 0x10000) {\n\t\t\t\t\theaderSize = 3\n\t\t\t\t} else {\n\t\t\t\t\theaderSize = 5\n\t\t\t\t}\n\t\t\t\tlet maxBytes = strLength * 3\n\t\t\t\tif (position + maxBytes > safeEnd)\n\t\t\t\t\ttarget = makeRoom(position + maxBytes)\n\n\t\t\t\tif (strLength < 0x40 || !encodeUtf8) {\n\t\t\t\t\tlet i, c1, c2, strPosition = position + headerSize\n\t\t\t\t\tfor (i = 0; i < strLength; i++) {\n\t\t\t\t\t\tc1 = value.charCodeAt(i)\n\t\t\t\t\t\tif (c1 < 0x80) {\n\t\t\t\t\t\t\ttarget[strPosition++] = c1\n\t\t\t\t\t\t} else if (c1 < 0x800) {\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 >> 6 | 0xc0\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 & 0x3f | 0x80\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t(c1 & 0xfc00) === 0xd800 &&\n\t\t\t\t\t\t\t((c2 = value.charCodeAt(i + 1)) & 0xfc00) === 0xdc00\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tc1 = 0x10000 + ((c1 & 0x03ff) << 10) + (c2 & 0x03ff)\n\t\t\t\t\t\t\ti++\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 >> 18 | 0xf0\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 >> 12 & 0x3f | 0x80\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 >> 6 & 0x3f | 0x80\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 & 0x3f | 0x80\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 >> 12 | 0xe0\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 >> 6 & 0x3f | 0x80\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 & 0x3f | 0x80\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlength = strPosition - position - headerSize\n\t\t\t\t} else {\n\t\t\t\t\tlength = encodeUtf8(value, position + headerSize, maxBytes)\n\t\t\t\t}\n\n\t\t\t\tif (length < 0x18) {\n\t\t\t\t\ttarget[position++] = 0x60 | length\n\t\t\t\t} else if (length < 0x100) {\n\t\t\t\t\tif (headerSize < 2) {\n\t\t\t\t\t\ttarget.copyWithin(position + 2, position + 1, position + 1 + length)\n\t\t\t\t\t}\n\t\t\t\t\ttarget[position++] = 0x78\n\t\t\t\t\ttarget[position++] = length\n\t\t\t\t} else if (length < 0x10000) {\n\t\t\t\t\tif (headerSize < 3) {\n\t\t\t\t\t\ttarget.copyWithin(position + 3, position + 2, position + 2 + length)\n\t\t\t\t\t}\n\t\t\t\t\ttarget[position++] = 0x79\n\t\t\t\t\ttarget[position++] = length >> 8\n\t\t\t\t\ttarget[position++] = length & 0xff\n\t\t\t\t} else {\n\t\t\t\t\tif (headerSize < 5) {\n\t\t\t\t\t\ttarget.copyWithin(position + 5, position + 3, position + 3 + length)\n\t\t\t\t\t}\n\t\t\t\t\ttarget[position++] = 0x7a\n\t\t\t\t\ttargetView.setUint32(position, length)\n\t\t\t\t\tposition += 4\n\t\t\t\t}\n\t\t\t\tposition += length\n\t\t\t} else if (type === 'number') {\n\t\t\t\tif (!this.alwaysUseFloat && value >>> 0 === value) {// positive integer, 32-bit or less\n\t\t\t\t\t// positive uint\n\t\t\t\t\tif (value < 0x18) {\n\t\t\t\t\t\ttarget[position++] = value\n\t\t\t\t\t} else if (value < 0x100) {\n\t\t\t\t\t\ttarget[position++] = 0x18\n\t\t\t\t\t\ttarget[position++] = value\n\t\t\t\t\t} else if (value < 0x10000) {\n\t\t\t\t\t\ttarget[position++] = 0x19\n\t\t\t\t\t\ttarget[position++] = value >> 8\n\t\t\t\t\t\ttarget[position++] = value & 0xff\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget[position++] = 0x1a\n\t\t\t\t\t\ttargetView.setUint32(position, value)\n\t\t\t\t\t\tposition += 4\n\t\t\t\t\t}\n\t\t\t\t} else if (!this.alwaysUseFloat && value >> 0 === value) { // negative integer\n\t\t\t\t\tif (value >= -0x18) {\n\t\t\t\t\t\ttarget[position++] = 0x1f - value\n\t\t\t\t\t} else if (value >= -0x100) {\n\t\t\t\t\t\ttarget[position++] = 0x38\n\t\t\t\t\t\ttarget[position++] = ~value\n\t\t\t\t\t} else if (value >= -0x10000) {\n\t\t\t\t\t\ttarget[position++] = 0x39\n\t\t\t\t\t\ttargetView.setUint16(position, ~value)\n\t\t\t\t\t\tposition += 2\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget[position++] = 0x3a\n\t\t\t\t\t\ttargetView.setUint32(position, ~value)\n\t\t\t\t\t\tposition += 4\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet useFloat32\n\t\t\t\t\tif ((useFloat32 = this.useFloat32) > 0 && value < 0x100000000 && value >= -0x80000000) {\n\t\t\t\t\t\ttarget[position++] = 0xfa\n\t\t\t\t\t\ttargetView.setFloat32(position, value)\n\t\t\t\t\t\tlet xShifted\n\t\t\t\t\t\tif (useFloat32 < 4 ||\n\t\t\t\t\t\t\t\t// this checks for rounding of numbers that were encoded in 32-bit float to nearest significant decimal digit that could be preserved\n\t\t\t\t\t\t\t\t((xShifted = value * mult10[((target[position] & 0x7f) << 1) | (target[position + 1] >> 7)]) >> 0) === xShifted) {\n\t\t\t\t\t\t\tposition += 4\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\tposition-- // move back into position for writing a double\n\t\t\t\t\t}\n\t\t\t\t\ttarget[position++] = 0xfb\n\t\t\t\t\ttargetView.setFloat64(position, value)\n\t\t\t\t\tposition += 8\n\t\t\t\t}\n\t\t\t} else if (type === 'object') {\n\t\t\t\tif (!value)\n\t\t\t\t\ttarget[position++] = 0xf6\n\t\t\t\telse {\n\t\t\t\t\tif (referenceMap) {\n\t\t\t\t\t\tlet referee = referenceMap.get(value)\n\t\t\t\t\t\tif (referee) {\n\t\t\t\t\t\t\ttarget[position++] = 0xd8\n\t\t\t\t\t\t\ttarget[position++] = 29 // http://cbor.schmorp.de/value-sharing\n\t\t\t\t\t\t\ttarget[position++] = 0x19 // 16-bit uint\n\t\t\t\t\t\t\tif (!referee.references) {\n\t\t\t\t\t\t\t\tlet idsToInsert = referenceMap.idsToInsert || (referenceMap.idsToInsert = [])\n\t\t\t\t\t\t\t\treferee.references = []\n\t\t\t\t\t\t\t\tidsToInsert.push(referee)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treferee.references.push(position - start)\n\t\t\t\t\t\t\tposition += 2 // TODO: also support 32-bit\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t} else \n\t\t\t\t\t\t\treferenceMap.set(value, { offset: position - start })\n\t\t\t\t\t}\n\t\t\t\t\tlet constructor = value.constructor\n\t\t\t\t\tif (constructor === Object) {\n\t\t\t\t\t\twriteObject(value, true)\n\t\t\t\t\t} else if (constructor === Array) {\n\t\t\t\t\t\tlength = value.length\n\t\t\t\t\t\tif (length < 0x18) {\n\t\t\t\t\t\t\ttarget[position++] = 0x80 | length\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twriteArrayHeader(length)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\t\t\tencode(value[i])\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (constructor === Map) {\n\t\t\t\t\t\tif (this.mapsAsObjects ? this.useTag259ForMaps !== false : this.useTag259ForMaps) {\n\t\t\t\t\t\t\t// use Tag 259 (https://github.com/shanewholloway/js-cbor-codec/blob/master/docs/CBOR-259-spec--explicit-maps.md) for maps if the user wants it that way\n\t\t\t\t\t\t\ttarget[position++] = 0xd9\n\t\t\t\t\t\t\ttarget[position++] = 1\n\t\t\t\t\t\t\ttarget[position++] = 3\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlength = value.size\n\t\t\t\t\t\tif (length < 0x18) {\n\t\t\t\t\t\t\ttarget[position++] = 0xa0 | length\n\t\t\t\t\t\t} else if (length < 0x100) {\n\t\t\t\t\t\t\ttarget[position++] = 0xb8\n\t\t\t\t\t\t\ttarget[position++] = length\n\t\t\t\t\t\t} else if (length < 0x10000) {\n\t\t\t\t\t\t\ttarget[position++] = 0xb9\n\t\t\t\t\t\t\ttarget[position++] = length >> 8\n\t\t\t\t\t\t\ttarget[position++] = length & 0xff\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttarget[position++] = 0xba\n\t\t\t\t\t\t\ttargetView.setUint32(position, length)\n\t\t\t\t\t\t\tposition += 4\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (encoder.keyMap) { \n\t\t\t\t\t\t\tfor (let [ key, entryValue ] of value) {\n\t\t\t\t\t\t\t\tencode(encoder.encodeKey(key))\n\t\t\t\t\t\t\t\tencode(entryValue)\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} else { \n\t\t\t\t\t\t\tfor (let [ key, entryValue ] of value) {\n\t\t\t\t\t\t\t\tencode(key) \n\t\t\t\t\t\t\t\tencode(entryValue)\n\t\t\t\t\t\t\t} \t\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (let i = 0, l = extensions.length; i < l; i++) {\n\t\t\t\t\t\t\tlet extensionClass = extensionClasses[i]\n\t\t\t\t\t\t\tif (value instanceof extensionClass) {\n\t\t\t\t\t\t\t\tlet extension = extensions[i]\n\t\t\t\t\t\t\t\tlet tag = extension.tag\n\t\t\t\t\t\t\t\tif (tag == undefined)\n\t\t\t\t\t\t\t\t\ttag = extension.getTag && extension.getTag.call(this, value)\n\t\t\t\t\t\t\t\tif (tag < 0x18) {\n\t\t\t\t\t\t\t\t\ttarget[position++] = 0xc0 | tag\n\t\t\t\t\t\t\t\t} else if (tag < 0x100) {\n\t\t\t\t\t\t\t\t\ttarget[position++] = 0xd8\n\t\t\t\t\t\t\t\t\ttarget[position++] = tag\n\t\t\t\t\t\t\t\t} else if (tag < 0x10000) {\n\t\t\t\t\t\t\t\t\ttarget[position++] = 0xd9\n\t\t\t\t\t\t\t\t\ttarget[position++] = tag >> 8\n\t\t\t\t\t\t\t\t\ttarget[position++] = tag & 0xff\n\t\t\t\t\t\t\t\t} else if (tag > -1) {\n\t\t\t\t\t\t\t\t\ttarget[position++] = 0xda\n\t\t\t\t\t\t\t\t\ttargetView.setUint32(position, tag)\n\t\t\t\t\t\t\t\t\tposition += 4\n\t\t\t\t\t\t\t\t} // else undefined, don't write tag\n\t\t\t\t\t\t\t\textension.encode.call(this, value, encode, makeRoom)\n\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (value[Symbol.iterator]) {\n\t\t\t\t\t\t\tif (throwOnIterable) {\n\t\t\t\t\t\t\t\tlet error = new Error('Iterable should be serialized as iterator')\n\t\t\t\t\t\t\t\terror.iteratorNotHandled = true;\n\t\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttarget[position++] = 0x9f // indefinite length array\n\t\t\t\t\t\t\tfor (let entry of value) {\n\t\t\t\t\t\t\t\tencode(entry)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttarget[position++] = 0xff // stop-code\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (value[Symbol.asyncIterator] || isBlob(value)) {\n\t\t\t\t\t\t\tlet error = new Error('Iterable/blob should be serialized as iterator')\n\t\t\t\t\t\t\terror.iteratorNotHandled = true;\n\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// no extension found, write as object\n\t\t\t\t\t\twriteObject(value, !value.hasOwnProperty) // if it doesn't have hasOwnProperty, don't do hasOwnProperty checks\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (type === 'boolean') {\n\t\t\t\ttarget[position++] = value ? 0xf5 : 0xf4\n\t\t\t} else if (type === 'bigint') {\n\t\t\t\tif (value < (BigInt(1)<<BigInt(64)) && value >= 0) {\n\t\t\t\t\t// use an unsigned int as long as it fits\n\t\t\t\t\ttarget[position++] = 0x1b\n\t\t\t\t\ttargetView.setBigUint64(position, value)\n\t\t\t\t} else if (value > -(BigInt(1)<<BigInt(64)) && value < 0) {\n\t\t\t\t\t// if we can fit an unsigned int, use that\n\t\t\t\t\ttarget[position++] = 0x3b\n\t\t\t\t\ttargetView.setBigUint64(position, -value - BigInt(1))\n\t\t\t\t} else {\n\t\t\t\t\t// overflow\n\t\t\t\t\tif (this.largeBigIntToFloat) {\n\t\t\t\t\t\ttarget[position++] = 0xfb\n\t\t\t\t\t\ttargetView.setFloat64(position, Number(value))\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new RangeError(value + ' was too large to fit in CBOR 64-bit integer format, set largeBigIntToFloat to convert to float-64')\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tposition += 8\n\t\t\t} else if (type === 'undefined') {\n\t\t\t\ttarget[position++] = 0xf7\n\t\t\t} else {\n\t\t\t\tthrow new Error('Unknown type: ' + type)\n\t\t\t}\n\t\t}\n\n\t\tconst writeObject = this.useRecords === false ? this.variableMapSize ? (object) => {\n\t\t\t// this method is slightly slower, but generates \"preferred serialization\" (optimally small for smaller objects)\n\t\t\tlet keys = Object.keys(object)\n\t\t\tlet vals = Object.values(object)\n\t\t\tlet length = keys.length\n\t\t\tif (length < 0x18) {\n\t\t\t\ttarget[position++] = 0xa0 | length\n\t\t\t} else if (length < 0x100) {\n\t\t\t\ttarget[position++] = 0xb8\n\t\t\t\ttarget[position++] = length\n\t\t\t} else if (length < 0x10000) {\n\t\t\t\ttarget[position++] = 0xb9\n\t\t\t\ttarget[position++] = length >> 8\n\t\t\t\ttarget[position++] = length & 0xff\n\t\t\t} else {\n\t\t\t\ttarget[position++] = 0xba\n\t\t\t\ttargetView.setUint32(position, length)\n\t\t\t\tposition += 4\n\t\t\t}\n\t\t\tlet key\n\t\t\tif (encoder.keyMap) { \n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tencode(encodeKey(keys[i]))\n\t\t\t\t\tencode(vals[i])\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tencode(keys[i])\n\t\t\t\t\tencode(vals[i])\n\t\t\t\t}\n\t\t\t}\n\t\t} :\n\t\t(object, safePrototype) => {\n\t\t\ttarget[position++] = 0xb9 // always use map 16, so we can preallocate and set the length afterwards\n\t\t\tlet objectOffset = position - start\n\t\t\tposition += 2\n\t\t\tlet size = 0\n\t\t\tif (encoder.keyMap) { \n\t\t\t\tfor (let key in object) if (safePrototype || object.hasOwnProperty(key)) {\n\t\t\t\t\tencode(encoder.encodeKey(key))\n\t\t\t\t\tencode(object[key])\n\t\t\t\t\tsize++\n\t\t\t\t}\n\t\t\t} else { \n\t\t\t\tfor (let key in object) if (safePrototype || object.hasOwnProperty(key)) {\n\t\t\t\t\t\tencode(key)\n\t\t\t\t\t\tencode(object[key])\n\t\t\t\t\tsize++\n\t\t\t\t}\n\t\t\t}\n\t\t\ttarget[objectOffset++ + start] = size >> 8\n\t\t\ttarget[objectOffset + start] = size & 0xff\n\t\t} :\n\t\t(object, safePrototype) => {\n\t\t\tlet nextTransition, transition = structures.transitions || (structures.transitions = Object.create(null))\n\t\t\tlet newTransitions = 0\n\t\t\tlet length = 0\n\t\t\tlet parentRecordId\n\t\t\tlet keys\n\t\t\tif (this.keyMap) {\n\t\t\t\tkeys = Object.keys(object).map(k => this.encodeKey(k))\n\t\t\t\tlength = keys.length\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tlet key = keys[i]\n\t\t\t\t\tnextTransition = transition[key]\n\t\t\t\t\tif (!nextTransition) {\n\t\t\t\t\t\tnextTransition = transition[key] = Object.create(null)\n\t\t\t\t\t\tnewTransitions++\n\t\t\t\t\t}\n\t\t\t\t\ttransition = nextTransition\n\t\t\t\t}\t\t\t\t\n\t\t\t} else {\n\t\t\t\tfor (let key in object) if (safePrototype || object.hasOwnProperty(key)) {\n\t\t\t\t\tnextTransition = transition[key]\n\t\t\t\t\tif (!nextTransition) {\n\t\t\t\t\t\tif (transition[RECORD_SYMBOL] & 0x100000) {// this indicates it is a brancheable/extendable terminal node, so we will use this record id and extend it\n\t\t\t\t\t\t\tparentRecordId = transition[RECORD_SYMBOL] & 0xffff\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnextTransition = transition[key] = Object.create(null)\n\t\t\t\t\t\tnewTransitions++\n\t\t\t\t\t}\n\t\t\t\t\ttransition = nextTransition\n\t\t\t\t\tlength++\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet recordId = transition[RECORD_SYMBOL]\n\t\t\tif (recordId !== undefined) {\n\t\t\t\trecordId &= 0xffff\n\t\t\t\ttarget[position++] = 0xd9\n\t\t\t\ttarget[position++] = (recordId >> 8) | 0xe0\n\t\t\t\ttarget[position++] = recordId & 0xff\n\t\t\t} else {\n\t\t\t\tif (!keys)\n\t\t\t\t\tkeys = transition.__keys__ || (transition.__keys__ = Object.keys(object))\n\t\t\t\tif (parentRecordId === undefined) {\n\t\t\t\t\trecordId = structures.nextId++\n\t\t\t\t\tif (!recordId) {\n\t\t\t\t\t\trecordId = 0\n\t\t\t\t\t\tstructures.nextId = 1\n\t\t\t\t\t}\n\t\t\t\t\tif (recordId >= MAX_STRUCTURES) {// cycle back around\n\t\t\t\t\t\tstructures.nextId = (recordId = maxSharedStructures) + 1\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\trecordId = parentRecordId\n\t\t\t\t}\n\t\t\t\tstructures[recordId] = keys\n\t\t\t\tif (recordId < maxSharedStructures) {\n\t\t\t\t\ttarget[position++] = 0xd9\n\t\t\t\t\ttarget[position++] = (recordId >> 8) | 0xe0\n\t\t\t\t\ttarget[position++] = recordId & 0xff\n\t\t\t\t\ttransition = structures.transitions\n\t\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\t\tif (transition[RECORD_SYMBOL] === undefined || (transition[RECORD_SYMBOL] & 0x100000))\n\t\t\t\t\t\t\ttransition[RECORD_SYMBOL] = recordId\n\t\t\t\t\t\ttransition = transition[keys[i]]\n\t\t\t\t\t}\n\t\t\t\t\ttransition[RECORD_SYMBOL] = recordId | 0x100000 // indicates it is a extendable terminal\n\t\t\t\t\thasSharedUpdate = true\n\t\t\t\t} else {\n\t\t\t\t\ttransition[RECORD_SYMBOL] = recordId\n\t\t\t\t\ttargetView.setUint32(position, 0xd9dfff00) // tag two byte, then record definition id\n\t\t\t\t\tposition += 3\n\t\t\t\t\tif (newTransitions)\n\t\t\t\t\t\ttransitionsCount += serializationsSinceTransitionRebuild * newTransitions\n\t\t\t\t\t// record the removal of the id, we can maintain our shared structure\n\t\t\t\t\tif (recordIdsToRemove.length >= MAX_STRUCTURES - maxSharedStructures)\n\t\t\t\t\t\trecordIdsToRemove.shift()[RECORD_SYMBOL] = undefined // we are cycling back through, and have to remove old ones\n\t\t\t\t\trecordIdsToRemove.push(transition)\n\t\t\t\t\twriteArrayHeader(length + 2)\n\t\t\t\t\tencode(0xe000 + recordId)\n\t\t\t\t\tencode(keys)\n\t\t\t\t\tif (safePrototype === null) return; // special exit for iterator\n\t\t\t\t\tfor (let key in object)\n\t\t\t\t\t\tif (safePrototype || object.hasOwnProperty(key))\n\t\t\t\t\t\t\tencode(object[key])\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (length < 0x18) { // write the array header\n\t\t\t\ttarget[position++] = 0x80 | length\n\t\t\t} else {\n\t\t\t\twriteArrayHeader(length)\n\t\t\t}\n\t\t\tif (safePrototype === null) return; // special exit for iterator\n\t\t\tfor (let key in object)\n\t\t\t\tif (safePrototype || object.hasOwnProperty(key))\n\t\t\t\t\tencode(object[key])\n\t\t}\n\t\tconst makeRoom = (end) => {\n\t\t\tlet newSize\n\t\t\tif (end > 0x1000000) {\n\t\t\t\t// special handling for really large buffers\n\t\t\t\tif ((end - start) > MAX_BUFFER_SIZE)\n\t\t\t\t\tthrow new Error('Encoded buffer would be larger than maximum buffer size')\n\t\t\t\tnewSize = Math.min(MAX_BUFFER_SIZE,\n\t\t\t\t\tMath.round(Math.max((end - start) * (end > 0x4000000 ? 1.25 : 2), 0x400000) / 0x1000) * 0x1000)\n\t\t\t} else // faster handling for smaller buffers\n\t\t\t\tnewSize = ((Math.max((end - start) << 2, target.length - 1) >> 12) + 1) << 12\n\t\t\tlet newBuffer = new ByteArrayAllocate(newSize)\n\t\t\ttargetView = new DataView(newBuffer.buffer, 0, newSize)\n\t\t\tif (target.copy)\n\t\t\t\ttarget.copy(newBuffer, 0, start, end)\n\t\t\telse\n\t\t\t\tnewBuffer.set(target.slice(start, end))\n\t\t\tposition -= start\n\t\t\tstart = 0\n\t\t\tsafeEnd = newBuffer.length - 10\n\t\t\treturn target = newBuffer\n\t\t}\n\t\tlet chunkThreshold = 100;\n\t\tlet continuedChunkThreshold = 1000;\n\t\tthis.encodeAsIterable = function(value, options) {\n\t\t\treturn startEncoding(value, options, encodeObjectAsIterable);\n\t\t}\n\t\tthis.encodeAsAsyncIterable = function(value, options) {\n\t\t\treturn startEncoding(value, options, encodeObjectAsAsyncIterable);\n\t\t}\n\n\t\tfunction* encodeObjectAsIterable(object, iterateProperties, finalIterable) {\n\t\t\tlet constructor = object.constructor;\n\t\t\tif (constructor === Object) {\n\t\t\t\tlet useRecords = encoder.useRecords !== false;\n\t\t\t\tif (useRecords)\n\t\t\t\t\twriteObject(object, null); // write the record identifier\n\t\t\t\telse\n\t\t\t\t\twriteEntityLength(Object.keys(object).length, 0xa0);\n\t\t\t\tfor (let key in object) {\n\t\t\t\t\tlet value = object[key];\n\t\t\t\t\tif (!useRecords) encode(key);\n\t\t\t\t\tif (value && typeof value === 'object') {\n\t\t\t\t\t\tif (iterateProperties[key])\n\t\t\t\t\t\t\tyield* encodeObjectAsIterable(value, iterateProperties[key]);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tyield* tryEncode(value, iterateProperties, key);\n\t\t\t\t\t} else encode(value);\n\t\t\t\t}\n\t\t\t} else if (constructor === Array) {\n\t\t\t\tlet length = object.length;\n\t\t\t\twriteArrayHeader(length);\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tlet value = object[i];\n\t\t\t\t\tif (value && (typeof value === 'object' || position - start > chunkThreshold)) {\n\t\t\t\t\t\tif (iterateProperties.element)\n\t\t\t\t\t\t\tyield* encodeObjectAsIterable(value, iterateProperties.element);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tyield* tryEncode(value, iterateProperties, 'element');\n\t\t\t\t\t} else encode(value);\n\t\t\t\t}\n\t\t\t} else if (object[Symbol.iterator]) {\n\t\t\t\ttarget[position++] = 0x9f; // start indefinite array\n\t\t\t\tfor (let value of object) {\n\t\t\t\t\tif (value && (typeof value === 'object' || position - start > chunkThreshold)) {\n\t\t\t\t\t\tif (iterateProperties.element)\n\t\t\t\t\t\t\tyield* encodeObjectAsIterable(value, iterateProperties.element);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tyield* tryEncode(value, iterateProperties, 'element');\n\t\t\t\t\t} else encode(value);\n\t\t\t\t}\n\t\t\t\ttarget[position++] = 0xff; // stop byte\n\t\t\t} else if (isBlob(object)){\n\t\t\t\twriteEntityLength(object.size, 0x40); // encode as binary data\n\t\t\t\tyield target.subarray(start, position);\n\t\t\t\tyield object; // directly return blobs, they have to be encoded asynchronously\n\t\t\t\trestartEncoding();\n\t\t\t} else if (object[Symbol.asyncIterator]) {\n\t\t\t\ttarget[position++] = 0x9f; // start indefinite array\n\t\t\t\tyield target.subarray(start, position);\n\t\t\t\tyield object; // directly return async iterators, they have to be encoded asynchronously\n\t\t\t\trestartEncoding();\n\t\t\t\ttarget[position++] = 0xff; // stop byte\n\t\t\t} else {\n\t\t\t\tencode(object);\n\t\t\t}\n\t\t\tif (finalIterable && position > start) yield target.subarray(start, position);\n\t\t\telse if (position - start > chunkThreshold) {\n\t\t\t\tyield target.subarray(start, position);\n\t\t\t\trestartEncoding();\n\t\t\t}\n\t\t}\n\t\tfunction* tryEncode(value, iterateProperties, key) {\n\t\t\tlet restart = position - start;\n\t\t\ttry {\n\t\t\t\tencode(value);\n\t\t\t\tif (position - start > chunkThreshold) {\n\t\t\t\t\tyield target.subarray(start, position);\n\t\t\t\t\trestartEncoding();\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (error.iteratorNotHandled) {\n\t\t\t\t\titerateProperties[key] = {};\n\t\t\t\t\tposition = start + restart; // restart our position so we don't have partial data from last encode\n\t\t\t\t\tyield* encodeObjectAsIterable.call(this, value, iterateProperties[key]);\n\t\t\t\t} else throw error;\n\t\t\t}\n\t\t}\n\t\tfunction restartEncoding() {\n\t\t\tchunkThreshold = continuedChunkThreshold;\n\t\t\tencoder.encode(null, THROW_ON_ITERABLE); // restart encoding\n\t\t}\n\t\tfunction startEncoding(value, options, encodeIterable) {\n\t\t\tif (options && options.chunkThreshold) // explicitly specified chunk sizes\n\t\t\t\tchunkThreshold = continuedChunkThreshold = options.chunkThreshold;\n\t\t\telse // we start with a smaller threshold to get initial bytes sent quickly\n\t\t\t\tchunkThreshold = 100;\n\t\t\tif (value && typeof value === 'object') {\n\t\t\t\tencoder.encode(null, THROW_ON_ITERABLE); // start encoding\n\t\t\t\treturn encodeIterable(value, encoder.iterateProperties || (encoder.iterateProperties = {}), true);\n\t\t\t}\n\t\t\treturn [encoder.encode(value)];\n\t\t}\n\n\t\tasync function* encodeObjectAsAsyncIterable(value, iterateProperties) {\n\t\t\tfor (let encodedValue of encodeObjectAsIterable(value, iterateProperties, true)) {\n\t\t\t\tlet constructor = encodedValue.constructor;\n\t\t\t\tif (constructor === ByteArray || constructor === Uint8Array)\n\t\t\t\t\tyield encodedValue;\n\t\t\t\telse if (isBlob(encodedValue)) {\n\t\t\t\t\tlet reader = encodedValue.stream().getReader();\n\t\t\t\t\tlet next;\n\t\t\t\t\twhile (!(next = await reader.read()).done) {\n\t\t\t\t\t\tyield next.value;\n\t\t\t\t\t}\n\t\t\t\t} else if (encodedValue[Symbol.asyncIterator]) {\n\t\t\t\t\tfor await (let asyncValue of encodedValue) {\n\t\t\t\t\t\trestartEncoding();\n\t\t\t\t\t\tif (asyncValue)\n\t\t\t\t\t\t\tyield* encodeObjectAsAsyncIterable(asyncValue, iterateProperties.async || (iterateProperties.async = {}));\n\t\t\t\t\t\telse yield encoder.encode(asyncValue);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tyield encodedValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tuseBuffer(buffer) {\n\t\t// this means we are finished using our own buffer and we can write over it safely\n\t\ttarget = buffer\n\t\ttargetView = new DataView(target.buffer, target.byteOffset, target.byteLength)\n\t\tposition = 0\n\t}\n\tclearSharedData() {\n\t\tif (this.structures)\n\t\t\tthis.structures = []\n\t\tif (this.sharedValues)\n\t\t\tthis.sharedValues = undefined\n\t}\n\tupdateSharedData() {\n\t\tlet lastVersion = this.sharedVersion || 0\n\t\tthis.sharedVersion = lastVersion + 1\n\t\tlet structuresCopy = this.structures.slice(0)\n\t\tlet sharedData = new SharedData(structuresCopy, this.sharedValues, this.sharedVersion)\n\t\tlet saveResults = this.saveShared(sharedData,\n\t\t\t\texistingShared => (existingShared && existingShared.version || 0) == lastVersion)\n\t\tif (saveResults === false) {\n\t\t\t// get updated structures and try again if the update failed\n\t\t\tsharedData = this.getShared() || {}\n\t\t\tthis.structures = sharedData.structures || []\n\t\t\tthis.sharedValues = sharedData.packedValues\n\t\t\tthis.sharedVersion = sharedData.version\n\t\t\tthis.structures.nextId = this.structures.length\n\t\t} else {\n\t\t\t// restore structures\n\t\t\tstructuresCopy.forEach((structure, i) => this.structures[i] = structure)\n\t\t}\n\t\t// saveShared may fail to write and reload, or may have reloaded to check compatibility and overwrite saved data, either way load the correct shared data\n\t\treturn saveResults\n\t}\n}\nfunction writeEntityLength(length, majorValue) {\n\tif (length < 0x18)\n\t\ttarget[position++] = majorValue | length\n\telse if (length < 0x100) {\n\t\ttarget[position++] = majorValue | 0x18\n\t\ttarget[position++] = length\n\t} else if (length < 0x10000) {\n\t\ttarget[position++] = majorValue | 0x19\n\t\ttarget[position++] = length >> 8\n\t\ttarget[position++] = length & 0xff\n\t} else {\n\t\ttarget[position++] = majorValue | 0x1a\n\t\ttargetView.setUint32(position, length)\n\t\tposition += 4\n\t}\n\n}\nclass SharedData {\n\tconstructor(structures, values, version) {\n\t\tthis.structures = structures\n\t\tthis.packedValues = values\n\t\tthis.version = version\n\t}\n}\n\nfunction writeArrayHeader(length) {\n\tif (length < 0x18)\n\t\ttarget[position++] = 0x80 | length\n\telse if (length < 0x100) {\n\t\ttarget[position++] = 0x98\n\t\ttarget[position++] = length\n\t} else if (length < 0x10000) {\n\t\ttarget[position++] = 0x99\n\t\ttarget[position++] = length >> 8\n\t\ttarget[position++] = length & 0xff\n\t} else {\n\t\ttarget[position++] = 0x9a\n\t\ttargetView.setUint32(position, length)\n\t\tposition += 4\n\t}\n}\n\nconst BlobConstructor = typeof Blob === 'undefined' ? function(){} : Blob;\nfunction isBlob(object) {\n\tif (object instanceof BlobConstructor)\n\t\treturn true;\n\tlet tag = object[Symbol.toStringTag];\n\treturn tag === 'Blob' || tag === 'File';\n}\nfunction findRepetitiveStrings(value, packedValues) {\n\tswitch(typeof value) {\n\t\tcase 'string':\n\t\t\tif (value.length > 3) {\n\t\t\t\tif (packedValues.objectMap[value] > -1 || packedValues.values.length >= packedValues.maxValues)\n\t\t\t\t\treturn\n\t\t\t\tlet packedStatus = packedValues.get(value)\n\t\t\t\tif (packedStatus) {\n\t\t\t\t\tif (++packedStatus.count == 2) {\n\t\t\t\t\t\tpackedValues.values.push(value)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tpackedValues.set(value, {\n\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t})\n\t\t\t\t\tif (packedValues.samplingPackedValues) {\n\t\t\t\t\t\tlet status = packedValues.samplingPackedValues.get(value)\n\t\t\t\t\t\tif (status)\n\t\t\t\t\t\t\tstatus.count++\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tpackedValues.samplingPackedValues.set(value, {\n\t\t\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'object':\n\t\t\tif (value) {\n\t\t\t\tif (value instanceof Array) {\n\t\t\t\t\tfor (let i = 0, l = value.length; i < l; i++) {\n\t\t\t\t\t\tfindRepetitiveStrings(value[i], packedValues)\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tlet includeKeys = !packedValues.encoder.useRecords\n\t\t\t\t\tfor (var key in value) {\n\t\t\t\t\t\tif (value.hasOwnProperty(key)) {\n\t\t\t\t\t\t\tif (includeKeys)\n\t\t\t\t\t\t\t\tfindRepetitiveStrings(key, packedValues)\n\t\t\t\t\t\t\tfindRepetitiveStrings(value[key], packedValues)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'function': console.log(value)\n\t}\n}\nconst isLittleEndianMachine = new Uint8Array(new Uint16Array([1]).buffer)[0] == 1\nextensionClasses = [ Date, Set, Error, RegExp, Tag, ArrayBuffer,\n\tUint8Array, Uint8ClampedArray, Uint16Array, Uint32Array,\n\ttypeof BigUint64Array == 'undefined' ? function() {} : BigUint64Array, Int8Array, Int16Array, Int32Array,\n\ttypeof BigInt64Array == 'undefined' ? function() {} : BigInt64Array,\n\tFloat32Array, Float64Array, SharedData ]\n\n//Object.getPrototypeOf(Uint8Array.prototype).constructor /*TypedArray*/\nextensions = [{ // Date\n\ttag: 1,\n\tencode(date, encode) {\n\t\tlet seconds = date.getTime() / 1000\n\t\tif ((this.useTimestamp32 || date.getMilliseconds() === 0) && seconds >= 0 && seconds < 0x100000000) {\n\t\t\t// Timestamp 32\n\t\t\ttarget[position++] = 0x1a\n\t\t\ttargetView.setUint32(position, seconds)\n\t\t\tposition += 4\n\t\t} else {\n\t\t\t// Timestamp float64\n\t\t\ttarget[position++] = 0xfb\n\t\t\ttargetView.setFloat64(position, seconds)\n\t\t\tposition += 8\n\t\t}\n\t}\n}, { // Set\n\ttag: 258, // https://github.com/input-output-hk/cbor-sets-spec/blob/master/CBOR_SETS.md\n\tencode(set, encode) {\n\t\tlet array = Array.from(set)\n\t\tencode(array)\n\t}\n}, { // Error\n\ttag: 27, // http://cbor.schmorp.de/generic-object\n\tencode(error, encode) {\n\t\tencode([ error.name, error.message ])\n\t}\n}, { // RegExp\n\ttag: 27, // http://cbor.schmorp.de/generic-object\n\tencode(regex, encode) {\n\t\tencode([ 'RegExp', regex.source, regex.flags ])\n\t}\n}, { // Tag\n\tgetTag(tag) {\n\t\treturn tag.tag\n\t},\n\tencode(tag, encode) {\n\t\tencode(tag.value)\n\t}\n}, { // ArrayBuffer\n\tencode(arrayBuffer, encode, makeRoom) {\n\t\twriteBuffer(arrayBuffer, makeRoom)\n\t}\n}, { // Uint8Array\n\tgetTag(typedArray) {\n\t\tif (typedArray.constructor === Uint8Array) {\n\t\t\tif (this.tagUint8Array || hasNodeBuffer && this.tagUint8Array !== false)\n\t\t\t\treturn 64;\n\t\t} // else no tag\n\t},\n\tencode(typedArray, encode, makeRoom) {\n\t\twriteBuffer(typedArray, makeRoom)\n\t}\n},\n\ttypedArrayEncoder(68, 1),\n\ttypedArrayEncoder(69, 2),\n\ttypedArrayEncoder(70, 4),\n\ttypedArrayEncoder(71, 8),\n\ttypedArrayEncoder(72, 1),\n\ttypedArrayEncoder(77, 2),\n\ttypedArrayEncoder(78, 4),\n\ttypedArrayEncoder(79, 8),\n\ttypedArrayEncoder(85, 4),\n\ttypedArrayEncoder(86, 8),\n{\n\tencode(sharedData, encode) { // write SharedData\n\t\tlet packedValues = sharedData.packedValues || []\n\t\tlet sharedStructures = sharedData.structures || []\n\t\tif (packedValues.values.length > 0) {\n\t\t\ttarget[position++] = 0xd8 // one-byte tag\n\t\t\ttarget[position++] = 51 // tag 51 for packed shared structures https://www.potaroo.net/ietf/ids/draft-ietf-cbor-packed-03.txt\n\t\t\twriteArrayHeader(4)\n\t\t\tlet valuesArray = packedValues.values\n\t\t\tencode(valuesArray)\n\t\t\twriteArrayHeader(0) // prefixes\n\t\t\twriteArrayHeader(0) // suffixes\n\t\t\tpackedObjectMap = Object.create(sharedPackedObjectMap || null)\n\t\t\tfor (let i = 0, l = valuesArray.length; i < l; i++) {\n\t\t\t\tpackedObjectMap[valuesArray[i]] = i\n\t\t\t}\n\t\t}\n\t\tif (sharedStructures) {\n\t\t\ttargetView.setUint32(position, 0xd9dffe00)\n\t\t\tposition += 3\n\t\t\tlet definitions = sharedStructures.slice(0)\n\t\t\tdefinitions.unshift(0xe000)\n\t\t\tdefinitions.push(new Tag(sharedData.version, 0x53687264))\n\t\t\tencode(definitions)\n\t\t} else\n\t\t\tencode(new Tag(sharedData.version, 0x53687264))\n\t\t}\n\t}]\nfunction typedArrayEncoder(tag, size) {\n\tif (!isLittleEndianMachine && size > 1)\n\t\ttag -= 4 // the big endian equivalents are 4 less\n\treturn {\n\t\ttag: tag,\n\t\tencode: function writeExtBuffer(typedArray, encode) {\n\t\t\tlet length = typedArray.byteLength\n\t\t\tlet offset = typedArray.byteOffset || 0\n\t\t\tlet buffer = typedArray.buffer || typedArray\n\t\t\tencode(hasNodeBuffer ? Buffer.from(buffer, offset, length) :\n\t\t\t\tnew Uint8Array(buffer, offset, length))\n\t\t}\n\t}\n}\nfunction writeBuffer(buffer, makeRoom) {\n\tlet length = buffer.byteLength\n\tif (length < 0x18) {\n\t\ttarget[position++] = 0x40 + length\n\t} else if (length < 0x100) {\n\t\ttarget[position++] = 0x58\n\t\ttarget[position++] = length\n\t} else if (length < 0x10000) {\n\t\ttarget[position++] = 0x59\n\t\ttarget[position++] = length >> 8\n\t\ttarget[position++] = length & 0xff\n\t} else {\n\t\ttarget[position++] = 0x5a\n\t\ttargetView.setUint32(position, length)\n\t\tposition += 4\n\t}\n\tif (position + length >= target.length) {\n\t\tmakeRoom(position + length)\n\t}\n\t// if it is already a typed array (has an ArrayBuffer), use that, but if it is an ArrayBuffer itself,\n\t// must wrap it to set it.\n\ttarget.set(buffer.buffer ? buffer : new Uint8Array(buffer), position)\n\tposition += length\n}\n\nfunction insertIds(serialized, idsToInsert) {\n\t// insert the ids that need to be referenced for structured clones\n\tlet nextId\n\tlet distanceToMove = idsToInsert.length * 2\n\tlet lastEnd = serialized.length - distanceToMove\n\tidsToInsert.sort((a, b) => a.offset > b.offset ? 1 : -1)\n\tfor (let id = 0; id < idsToInsert.length; id++) {\n\t\tlet referee = idsToInsert[id]\n\t\treferee.id = id\n\t\tfor (let position of referee.references) {\n\t\t\tserialized[position++] = id >> 8\n\t\t\tserialized[position] = id & 0xff\n\t\t}\n\t}\n\twhile (nextId = idsToInsert.pop()) {\n\t\tlet offset = nextId.offset\n\t\tserialized.copyWithin(offset + distanceToMove, offset, lastEnd)\n\t\tdistanceToMove -= 2\n\t\tlet position = offset + distanceToMove\n\t\tserialized[position++] = 0xd8\n\t\tserialized[position++] = 28 // http://cbor.schmorp.de/value-sharing\n\t\tlastEnd = offset\n\t}\n\treturn serialized\n}\nfunction writeBundles(start, encode) {\n\ttargetView.setUint32(bundledStrings.position + start, position - bundledStrings.position - start + 1) // the offset to bundle\n\tlet writeStrings = bundledStrings\n\tbundledStrings = null\n\tencode(writeStrings[0])\n\tencode(writeStrings[1])\n}\n\nexport function addExtension(extension) {\n\tif (extension.Class) {\n\t\tif (!extension.encode)\n\t\t\tthrow new Error('Extension has no encode function')\n\t\textensionClasses.unshift(extension.Class)\n\t\textensions.unshift(extension)\n\t}\n\tdecodeAddExtension(extension)\n}\nlet defaultEncoder = new Encoder({ useRecords: false })\nexport const encode = defaultEncoder.encode\nexport const encodeAsIterable = defaultEncoder.encodeAsIterable\nexport const encodeAsAsyncIterable = defaultEncoder.encodeAsAsyncIterable\nexport { FLOAT32_OPTIONS } from './decode.js'\nimport { FLOAT32_OPTIONS } from './decode.js'\nexport const { NEVER, ALWAYS, DECIMAL_ROUND, DECIMAL_FIT } = FLOAT32_OPTIONS\nexport const REUSE_BUFFER_MODE = 512\nexport const RESET_BUFFER_MODE = 1024\nexport const THROW_ON_ITERABLE = 2048\n\n\n","import { Encoder } from './encode.js'\nimport { Decoder } from './decode.js'\n\n/**\n * Given an Iterable first argument, returns an Iterable where each value is encoded as a Buffer\n * If the argument is only Async Iterable, the return value will be an Async Iterable.\n * @param {Iterable|Iterator|AsyncIterable|AsyncIterator} objectIterator - iterable source, like a Readable object stream, an array, Set, or custom object\n * @param {options} [options] - cbor-x Encoder options\n * @returns {IterableIterator|Promise.<AsyncIterableIterator>}\n */\nexport function encodeIter (objectIterator, options = {}) {\n  if (!objectIterator || typeof objectIterator !== 'object') {\n    throw new Error('first argument must be an Iterable, Async Iterable, or a Promise for an Async Iterable')\n  } else if (typeof objectIterator[Symbol.iterator] === 'function') {\n    return encodeIterSync(objectIterator, options)\n  } else if (typeof objectIterator.then === 'function' || typeof objectIterator[Symbol.asyncIterator] === 'function') {\n    return encodeIterAsync(objectIterator, options)\n  } else {\n    throw new Error('first argument must be an Iterable, Async Iterable, Iterator, Async Iterator, or a Promise')\n  }\n}\n\nfunction * encodeIterSync (objectIterator, options) {\n  const encoder = new Encoder(options)\n  for (const value of objectIterator) {\n    yield encoder.encode(value)\n  }\n}\n\nasync function * encodeIterAsync (objectIterator, options) {\n  const encoder = new Encoder(options)\n  for await (const value of objectIterator) {\n    yield encoder.encode(value)\n  }\n}\n\n/**\n * Given an Iterable/Iterator input which yields buffers, returns an IterableIterator which yields sync decoded objects\n * Or, given an Async Iterable/Iterator which yields promises resolving in buffers, returns an AsyncIterableIterator.\n * @param {Iterable|Iterator|AsyncIterable|AsyncIterableIterator} bufferIterator\n * @param {object} [options] - Decoder options\n * @returns {IterableIterator|Promise.<AsyncIterableIterator}\n */\nexport function decodeIter (bufferIterator, options = {}) {\n  if (!bufferIterator || typeof bufferIterator !== 'object') {\n    throw new Error('first argument must be an Iterable, Async Iterable, Iterator, Async Iterator, or a promise')\n  }\n\n  const decoder = new Decoder(options)\n  let incomplete\n  const parser = (chunk) => {\n    let yields\n    // if there's incomplete data from previous chunk, concatinate and try again\n    if (incomplete) {\n      chunk = Buffer.concat([incomplete, chunk])\n      incomplete = undefined\n    }\n\n    try {\n      yields = decoder.decodeMultiple(chunk)\n    } catch (err) {\n      if (err.incomplete) {\n        incomplete = chunk.slice(err.lastPosition)\n        yields = err.values\n      } else {\n        throw err\n      }\n    }\n    return yields\n  }\n\n  if (typeof bufferIterator[Symbol.iterator] === 'function') {\n    return (function * iter () {\n      for (const value of bufferIterator) {\n        yield * parser(value)\n      }\n    })()\n  } else if (typeof bufferIterator[Symbol.asyncIterator] === 'function') {\n    return (async function * iter () {\n      for await (const value of bufferIterator) {\n        yield * parser(value)\n      }\n    })()\n  }\n}\n"],"names":["decoder","src","srcEnd","TextDecoder","error","position","STOP_CODE","currentStructures","srcString","bundledStrings","referenceMap","packedValues","dataView","restoreMapsAsObject","currentDecoder","srcStringStart","srcStringEnd","currentExtensions","currentExtensionRanges","defaultOptions","useRecords","mapsAsObjects","sequentialMode","Decoder","constructor","options","keyMap","_keyMap","undefined","getStructures","getShared","structures","uninitialized","this","mapKey","Map","k","v","Object","entries","set","assign","decodeKey","key","get","encodeKey","hasOwnProperty","encodeKeys","rec","map","decodeKeys","name","_mapKey","res","forEach","safeKey","has","mapDecode","source","end","decode","r","saveState","clearSource","prototype","call","length","DataView","buffer","byteOffset","byteLength","Uint8Array","Error","sharedValues","pack","Array","maxPrivatePackedValues","concat","checkedRead","decodeMultiple","values","lastPosition","size","value","defaultDecoder","push","result","read","postBundlePosition","incomplete","RangeError","message","startsWith","token","majorType","byte0","byte1","exponent","NaN","Infinity","abs","u8Array","f32Array","getFloat16","getUint16","getFloat32","useFloat32","multiplier","mult10","getUint32","getFloat64","int64AsNumber","getBigUint64","array","i","join","Buffer","object","copyBuffers","slice","subarray","string","shortStringInJS","start","bytes","byte","fromCharCode","apply","String","longStringInJS","readFixedString","structure","createStructureReader","readJustLength","id","recordDefinition","bundlePosition","bundleLength","dataPosition","readStringJS","position0","position1","readBundleExt","loadShared","extension","handlesRead","input","Tag","packedValue","getPackedValues","isNaN","validName","slowReads","compiledReader","propertyCount","next","Function","test","JSON","stringify","units","byte2","byte3","unit","a","b","c","d","e","f","g","h","j","l","m","n","o","Float32Array","tag","dateString","Date","epochSec","Math","round","BigInt","fraction","exp","log","existingStructure","isShared","restoreStructures","data","glbl","RegExp","packedTable","newPackedValues","prefixes","suffixes","combine","target","refEntry","targetProperties","used","Set","version","isLittleEndianMachine","Uint16Array","typedArrays","Uint8ClampedArray","Uint32Array","BigUint64Array","Int8Array","Int16Array","Int32Array","BigInt64Array","Float64Array","typedArrayTags","registerTypedArray","TypedArray","bytesPerElement","dvMethod","BYTES_PER_ELEMENT","littleEndian","sizeShift","dv","elements","ta","method","sharedData","updatedStructures","sharedVersion","splice","callback","savedSrcEnd","savedPosition","savedSrcStringStart","savedSrcStringEnd","savedSrcString","savedReferenceMap","savedBundledStrings","savedSrc","savedStructures","savedDecoder","savedSequentialMode","floor","FLOAT32_OPTIONS","NEVER","ALWAYS","DECIMAL_ROUND","DECIMAL_FIT","textEncoder","extensions","extensionClasses","TextEncoder","globalThis","hasNodeBuffer","ByteArrayAllocate","allocUnsafeSlow","ByteArray","MAX_BUFFER_SIZE","throwOnIterable","targetView","safeEnd","hasNonLatin","RECORD_SYMBOL","Symbol","Encoder","sharedStructures","hasSharedUpdate","super","offset","encodeUtf8","utf8Write","maxBytes","encodeInto","written","encoder","hasSharedStructures","saveStructures","maxSharedStructures","isSequential","sequential","saveShared","samplingPackedValues","packedObjectMap","sharedPackedObjectMap","create","recordIdsToRemove","transitionsCount","serializationsSinceTransitionRebuild","mapEncode","encodeOptions","_mapped","encode","REUSE_BUFFER_MODE","useSelfDescribedHeader","setUint32","structuredClone","bundleStrings","sharedStructuresLength","transitions","keys","nextTransition","transition","nextId","maxValues","objectMap","findRepetitiveStrings","writeArrayHeader","valuesArray","THROW_ON_ITERABLE","writeBundles","idsToInsert","makeRoom","serialized","distanceToMove","lastEnd","sort","referee","references","pop","copyWithin","insertIds","returnBuffer","updateSharedData","RESET_BUFFER_MODE","findCommonStringsToPack","threshold","status","count","type","packedPosition","headerSize","strLength","extStart","twoByte","c1","c2","strPosition","charCodeAt","alwaysUseFloat","xShifted","setFloat32","setFloat64","setUint16","writeObject","useTag259ForMaps","entryValue","getTag","iterator","iteratorNotHandled","entry","asyncIterator","isBlob","setBigUint64","largeBigIntToFloat","Number","variableMapSize","vals","safePrototype","objectOffset","parentRecordId","newTransitions","recordId","__keys__","shift","newSize","min","max","newBuffer","copy","chunkThreshold","continuedChunkThreshold","encodeObjectAsIterable","iterateProperties","finalIterable","writeEntityLength","tryEncode","element","restartEncoding","restart","startEncoding","encodeIterable","async","encodeObjectAsAsyncIterable","encodedValue","reader","stream","getReader","done","asyncValue","encodeAsIterable","encodeAsAsyncIterable","useBuffer","clearSharedData","lastVersion","structuresCopy","SharedData","saveResults","existingShared","majorValue","BlobConstructor","Blob","toStringTag","packedStatus","includeKeys","console","typedArrayEncoder","typedArray","from","writeBuffer","writeStrings","ArrayBuffer","date","seconds","getTime","useTimestamp32","getMilliseconds","regex","flags","arrayBuffer","tagUint8Array","definitions","unshift","defaultEncoder","Class","decodeAddExtension","bufferIterator","parser","chunk","yields","err","objectIterator","encodeIterSync","then","encodeIterAsync","float32Number"],"mappings":"4OAAA,IAAIA,EAIAC,EACAC,EAJJ,IACCF,EAAU,IAAIG,WACE,CAAf,MAAMC,GAAS,CAGjB,IAAIC,EAAW,EAGf,MAMMC,EAAY,CAAE,EAGpB,IACIC,EACAC,EAGAC,EACAC,EAGAC,EACAC,EACAC,EAXAC,EAAiB,CAAE,EAGnBC,EAAiB,EACjBC,EAAe,EAGfC,EAAoB,GACpBC,EAAyB,GAIzBC,EAAiB,CACpBC,YAAY,EACZC,eAAe,GAEZC,GAAiB,EAEd,MAAMC,EACZC,YAAYC,GACX,GAAIA,KACEA,EAAQC,SAAUD,EAAQE,SAAaF,EAAQL,aACnDK,EAAQL,YAAa,EACrBK,EAAQJ,eAAgB,IAEE,IAAvBI,EAAQL,iBAAkDQ,IAA1BH,EAAQJ,gBAC3CI,EAAQJ,eAAgB,GACrBI,EAAQI,gBACXJ,EAAQK,UAAYL,EAAQI,eACzBJ,EAAQK,YAAcL,EAAQM,cAChCN,EAAQM,WAAa,IAAIC,eAAgB,GACvCP,EAAQC,QAAQ,CACnBO,KAAKC,OAAS,IAAIC,IAClB,IAAK,IAAKC,EAAEC,KAAMC,OAAOC,QAAQd,EAAQC,QAASO,KAAKC,OAAOM,IAAIH,EAAED,EACpE,CAEFE,OAAOG,OAAOR,KAAMR,EACpB,CAQDiB,UAAUC,GACT,OAAOV,KAAKP,QAASO,KAAKC,OAAOU,IAAID,IAAcA,CACnD,CAEDE,UAAUF,GACT,OAAOV,KAAKP,QAAUO,KAAKP,OAAOoB,eAAeH,GAAOV,KAAKP,OAAOiB,GAAOA,CAC3E,CAEDI,WAAWC,GACV,IAAKf,KAAKN,QAAS,OAAOqB,EAC1B,IAAIC,EAAM,IAAId,IACd,IAAK,IAAKC,EAAEC,KAAMC,OAAOC,QAAQS,GAAMC,EAAIT,IAAKP,KAAKN,QAAQmB,eAAeV,GAAKH,KAAKN,QAAQS,GAAKA,EAAIC,GACvG,OAAOY,CACP,CAEDC,WAAWD,GACV,IAAKhB,KAAKN,SAAmC,OAAxBsB,EAAIzB,YAAY2B,KAAe,OAAOF,EAC3D,IAAKhB,KAAKmB,QAAS,CAClBnB,KAAKmB,QAAU,IAAIjB,IACnB,IAAK,IAAKC,EAAEC,KAAMC,OAAOC,QAAQN,KAAKN,SAAUM,KAAKmB,QAAQZ,IAAIH,EAAED,EACnE,CACD,IAAIiB,EAAM,CAAE,EAGZ,OADAJ,EAAIK,SAAQ,CAACjB,EAAED,IAAMiB,EAAIE,EAAQtB,KAAKmB,QAAQI,IAAIpB,GAAKH,KAAKmB,QAAQR,IAAIR,GAAKA,IAAOC,IAC7EgB,CACP,CAEDI,UAAUC,EAAQC,GAEjB,IAAIN,EAAMpB,KAAK2B,OAAOF,GACtB,OAAIzB,KAAKN,SAGF,UADE0B,EAAI7B,YAAY2B,KACFE,EAAIJ,KAAIY,GAAK5B,KAAKiB,WAAWW,KAI7CR,CACP,CAEDO,OAAOF,EAAQC,GACd,GAAI1D,EAEH,OAAO6D,GAAU,KAChBC,IACO9B,KAAOA,KAAK2B,OAAOF,EAAQC,GAAOpC,EAAQyC,UAAUJ,OAAOK,KAAK9C,EAAgBuC,EAAQC,MAGjGzD,EAASyD,GAAO,EAAIA,EAAMD,EAAOQ,OACjC7D,EAAW,EAEXW,EAAe,EACfR,EAAY,KAEZC,EAAiB,KACjBR,EAAMyD,EAIN,IACC9C,EAAW8C,EAAO9C,WAAa8C,EAAO9C,SAAW,IAAIuD,SAAST,EAAOU,OAAQV,EAAOW,WAAYX,EAAOY,YAOvG,CANC,MAAMlE,GAGP,GADAH,EAAM,KACFyD,aAAkBa,WACrB,MAAMnE,EACP,MAAM,IAAIoE,MAAM,oDAAuDd,GAA2B,iBAAVA,EAAsBA,EAAOlC,YAAY2B,YAAcO,GAC/I,CACD,GAAIzB,gBAAgBV,EAAS,CAK5B,GAJAT,EAAiBmB,KACjBtB,EAAesB,KAAKwC,eAClBxC,KAAKyC,KAAO,IAAIC,MAAM1C,KAAK2C,wBAA0B,IAAIC,OAAO5C,KAAKwC,cACtExC,KAAKwC,cACFxC,KAAKF,WAER,OADAxB,EAAoB0B,KAAKF,WAClB+C,MACIvE,GAAqBA,EAAkB2D,OAAS,KAC3D3D,EAAoB,GAExB,MACGO,EAAiBK,IACZZ,GAAqBA,EAAkB2D,OAAS,KACpD3D,EAAoB,IACrBI,EAAe,KAEhB,OAAOmE,GACP,CACDC,eAAerB,EAAQJ,GACtB,IAAI0B,EAAQC,EAAe,EAC3B,IACC,IAAIC,EAAOxB,EAAOQ,OAClB5C,GAAiB,EACjB,IAAI6D,EAAQlD,KAAOA,KAAK2B,OAAOF,EAAQwB,GAAQE,EAAexB,OAAOF,EAAQwB,GAC7E,IAAI5B,EAWC,CAEJ,IADA0B,EAAS,CAAEG,GACL9E,EAAW6E,GAChBD,EAAe5E,EACf2E,EAAOK,KAAKP,KAEb,OAAOE,CACP,CAjBA,IAAuB,IAAnB1B,EAAQ6B,GACX,OAED,KAAM9E,EAAW6E,GAEhB,GADAD,EAAe5E,GACgB,IAA3BiD,EAAQwB,KACX,MAmBH,CAPC,MAAM1E,GAGP,MAFAA,EAAM6E,aAAeA,EACrB7E,EAAM4E,OAASA,EACT5E,CACT,CAAY,QACTkB,GAAiB,EACjByC,GACA,CACD,EAKK,SAASe,IACf,IACC,IAAIQ,EAASC,IACb,GAAI9E,EAAgB,CACnB,GAAIJ,GAAYI,EAAe+E,mBAAoB,CAClD,IAAIpF,EAAQ,IAAIoE,MAAM,8BAEtB,MADApE,EAAMqF,YAAa,EACbrF,CACN,CAEDC,EAAWI,EAAe+E,mBAC1B/E,EAAiB,IACjB,CAED,GAAIJ,GAAYH,EAEfK,EAAoB,KACpBN,EAAM,KACFS,IACHA,EAAe,UACV,IAAIL,EAAWH,EAAQ,CAE7B,IAAIE,EAAQ,IAAIoE,MAAM,+BAEtB,MADApE,EAAMqF,YAAa,EACbrF,CACT,CAAS,IAAKkB,EACX,MAAM,IAAIkD,MAAM,2CAChB,CAED,OAAOc,CAOP,CANC,MAAMlF,GAKP,MAJA2D,KACI3D,aAAiBsF,YAActF,EAAMuF,QAAQC,WAAW,+BAC3DxF,EAAMqF,YAAa,GAEdrF,CACN,CACF,CAEO,SAASmF,IACf,IAAIM,EAAQ5F,EAAII,KACZyF,EAAYD,GAAS,EAEzB,GADAA,GAAgB,GACZA,EAAQ,GACX,OAAQA,GACP,KAAK,GACJA,EAAQ5F,EAAII,KACZ,MACD,KAAK,GACJ,GAAiB,GAAbyF,EACH,OA6gBL,WACC,IAAIC,EAAQ9F,EAAII,KACZ2F,EAAQ/F,EAAII,KACZ4F,GAAoB,IAARF,IAAiB,EACjC,GAAiB,KAAbE,EACH,OAAID,GAAkB,EAARD,EACNG,IACQ,IAARH,GAAiBI,IAAWA,IAErC,GAAiB,IAAbF,EAAgB,CAEnB,IAAIG,IAAiB,EAARL,IAAc,EAAKC,IAAU,GAAK,IAC/C,OAAgB,IAARD,GAAiBK,EAAMA,CAC/B,CAQD,OANAC,EAAQ,GAAc,IAARN,EACM,IAAjBE,GAAY,GACfI,EAAQ,IAAe,EAARN,IAAc,EAC3BC,GAAS,EACXK,EAAQ,GAAKL,GAAS,EACtBK,EAAQ,GAAK,EACNC,EAAS,EACjB,CAniBYC,GAERV,EAAQjF,EAAS4F,UAAUnG,GAC3BA,GAAY,EACZ,MACD,KAAK,GACJ,GAAiB,GAAbyF,EAAgB,CACnB,IAAIX,EAAQvE,EAAS6F,WAAWpG,GAChC,GAAIS,EAAe4F,WAAa,EAAG,CAElC,IAAIC,EAAaC,GAAyB,IAAhB3G,EAAII,KAAqB,EAAMJ,EAAII,EAAW,IAAM,GAE9E,OADAA,GAAY,GACHsG,EAAaxB,GAASA,EAAQ,EAAI,IAAO,KAAS,GAAKwB,CAChE,CAED,OADAtG,GAAY,EACL8E,CACP,CACDU,EAAQjF,EAASiG,UAAUxG,GAC3BA,GAAY,EACZ,MACD,KAAK,GACJ,GAAiB,GAAbyF,EAAgB,CACnB,IAAIX,EAAQvE,EAASkG,WAAWzG,GAEhC,OADAA,GAAY,EACL8E,CACP,CACD,GAAIW,EAAY,EAAG,CAClB,GAAIlF,EAASiG,UAAUxG,GAAY,EAClC,MAAM,IAAImE,MAAM,oFACjBqB,EAAQjF,EAASiG,UAAUxG,EAAW,EAC3C,MAAeS,EAAeiG,eACzBlB,EAAuC,WAA/BjF,EAASiG,UAAUxG,GAC3BwF,GAASjF,EAASiG,UAAUxG,EAAW,IAEvCwF,EAAQjF,EAASoG,aAAa3G,GAC/BA,GAAY,EACZ,MACD,KAAK,GAEJ,OAAOyF,GACN,KAAK,EACL,KAAK,EACJ,MAAM,IAAItB,MAAM,4DACjB,KAAK,EACJ,IACIW,EADA8B,EAAQ,GACDC,EAAI,EACf,MAAQ/B,EAAQI,MAAWjF,GAC1B2G,EAAMC,KAAO/B,EAEd,OAAoB,GAAbW,EAAiBmB,EAAqB,GAAbnB,EAAiBmB,EAAME,KAAK,IAAMC,OAAOvC,OAAOoC,GACjF,KAAK,EACJ,IAAItE,EACJ,GAAI7B,EAAeO,cAAe,CACjC,IAAIgG,EAAS,CAAE,EACf,GAAIvG,EAAeY,OAAQ,MAAOiB,EAAM4C,MAAWjF,GAAW+G,EAAO9D,EAAQzC,EAAe4B,UAAUC,KAAS4C,SAC1G,MAAQ5C,EAAM4C,MAAWjF,GAAW+G,EAAO9D,EAAQZ,IAAQ4C,IAChE,OAAO8B,CACd,CAAa,CACFxG,IACHC,EAAeO,eAAgB,EAC/BR,GAAsB,GAEvB,IAAIoC,EAAM,IAAId,IACd,GAAIrB,EAAeY,OAAQ,MAAOiB,EAAM4C,MAAWjF,GAAW2C,EAAIT,IAAI1B,EAAe4B,UAAUC,GAAM4C,UAChG,MAAQ5C,EAAM4C,MAAWjF,GAAW2C,EAAIT,IAAIG,EAAK4C,KACtD,OAAOtC,CACP,CACF,KAAK,EACJ,OAAO3C,EACR,QACC,MAAM,IAAIkE,MAAM,4CAA8CsB,GAEjE,QACC,MAAM,IAAItB,MAAM,iBAAmBqB,GAGtC,OAAQC,GACP,KAAK,EACJ,OAAOD,EACR,KAAK,EACJ,OAAQA,EACT,KAAK,EACJ,OA2ac3B,EA3aC2B,EA4aV/E,EAAewG,YAErB/C,WAAWP,UAAUuD,MAAMtD,KAAKhE,EAAKI,EAAUA,GAAY6D,GAC3DjE,EAAIuH,SAASnH,EAAUA,GAAY6D,GA9anC,KAAK,EACJ,GAAIlD,GAAgBX,EACnB,OAAOG,EAAU+G,MAAMlH,EAAWU,GAAiBV,GAAYwF,GAAS9E,GAEzE,GAAoB,GAAhBC,GAAqBd,EAAS,KAAO2F,EAAQ,GAAI,CAEpD,IAAI4B,EAAS5B,EAAQ,GAAK6B,EAAgB7B,GA2Q9C,SAAwB3B,GACvB,IAAIyD,EAAQtH,EACRuH,EAAQ,IAAIjD,MAAMT,GACtB,IAAK,IAAIgD,EAAI,EAAGA,EAAIhD,EAAQgD,IAAK,CAChC,MAAMW,EAAO5H,EAAII,KACjB,IAAY,IAAPwH,GAAe,EAEf,YADJxH,EAAWsH,GAGRC,EAAMV,GAAKW,CACX,CACD,OAAOC,EAAaC,MAAMC,OAAQJ,EACvC,CAvRuDK,CAAepC,GAClE,GAAc,MAAV4B,EACH,OAAOA,CACR,CACD,OAAOS,EAAgBrC,GACxB,KAAK,EACJ,IAAIoB,EAAQ,IAAItC,MAAMkB,GAGtB,IAAK,IAAIqB,EAAI,EAAGA,EAAIrB,EAAOqB,IAAKD,EAAMC,GAAK3B,IAC3C,OAAO0B,EACR,KAAK,EACJ,GAAInG,EAAeO,cAAe,CACjC,IAAIgG,EAAS,CAAE,EACf,GAAIvG,EAAeY,OAAQ,IAAK,IAAIwF,EAAI,EAAGA,EAAIrB,EAAOqB,IAAKG,EAAO9D,EAAQzC,EAAe4B,UAAU6C,OAAYA,SAC1G,IAAK,IAAI2B,EAAI,EAAGA,EAAIrB,EAAOqB,IAAKG,EAAO9D,EAAQgC,MAAWA,IAC/D,OAAO8B,CACX,CAAU,CACFxG,IACHC,EAAeO,eAAgB,EAC/BR,GAAsB,GAEvB,IAAIoC,EAAM,IAAId,IACd,GAAIrB,EAAeY,OAAQ,IAAK,IAAIwF,EAAI,EAAGA,EAAIrB,EAAOqB,IAAKjE,EAAIT,IAAI1B,EAAe4B,UAAU6C,KAAQA,UAC/F,IAAK,IAAI2B,EAAI,EAAGA,EAAIrB,EAAOqB,IAAKjE,EAAIT,IAAI+C,IAAQA,KACrD,OAAOtC,CACP,CACF,KAAK,EACJ,GAAI4C,GAvVoB,MAuVS,CAChC,IAAIsC,EAAY5H,EAA0B,KAARsF,GAElC,GAAIsC,EAEH,OADKA,EAAU5C,OAAM4C,EAAU5C,KAAO6C,EAAsBD,IACrDA,EAAU5C,OAElB,GAAIM,EAAQ,MAAS,CACpB,GAhWoB,OAgWhBA,EAA2B,CAE9B,IAAI3B,EAASmE,IACTC,EAAK/C,IACL4C,EAAY5C,IAChBgD,EAAiBD,EAAIH,GACrB,IAAId,EAAS,CAAE,EACf,GAAIvG,EAAeY,OAAQ,IAAK,IAAIwF,EAAI,EAAGA,EAAIhD,EAAQgD,IAAK,CAE3DG,EAAO9D,EADGzC,EAAe4B,UAAUyF,EAAUjB,EAAI,MAC1B3B,GACvB,MACI,IAAK,IAAI2B,EAAI,EAAGA,EAAIhD,EAAQgD,IAAK,CAErCG,EAAO9D,EADG4E,EAAUjB,EAAI,KACD3B,GACvB,CACD,OAAO8B,CACP,CACI,GAlXoB,OAkXhBxB,EAAgC,CACxC,IAAI3B,EAASmE,IACTC,EAAK/C,IACT,IAAK,IAAI2B,EAAI,EAAGA,EAAIhD,EAAQgD,IAC3BqB,EAAiBD,IAAM/C,KAExB,OAAOA,GACb,CAAY,GAvXe,OAuXXM,EACV,OA+rBN,WACC,IAAI3B,EAASmE,IACTG,EAAiBnI,EAAWkF,IAChC,IAAK,IAAI2B,EAAI,EAAGA,EAAIhD,EAAQgD,IAAK,CAEhC,IAAIuB,EAAeJ,IACnBhI,GAAYoI,CACZ,CACD,IAAIC,EAAerI,EAOnB,OANAA,EAAWmI,EACX/H,EAAiB,CAACkI,EAAaN,KAAmBM,EAAaN,MAC/D5H,EAAemI,UAAY,EAC3BnI,EAAeoI,UAAY,EAC3BpI,EAAe+E,mBAAqBnF,EACpCA,EAAWqI,EACJnD,GACR,CA/sBauD,GAER,GAAIhI,EAAegB,YAClBiH,IACAZ,EAAY5H,EAA0B,KAARsF,GAC1BsC,GAGH,OAFKA,EAAU5C,OACd4C,EAAU5C,KAAO6C,EAAsBD,IACjCA,EAAU5C,MAGnB,CACD,CACD,IAAIyD,EAAY/H,EAAkB4E,GAClC,GAAImD,EACH,OAAIA,EAAUC,YACND,EAAUzD,GAEVyD,EAAUzD,KACZ,CACN,IAAI2D,EAAQ3D,IACZ,IAAK,IAAI2B,EAAI,EAAGA,EAAIhG,EAAuBgD,OAAQgD,IAAK,CACvD,IAAI/B,EAAQjE,EAAuBgG,GAAGrB,EAAOqD,GAC7C,QAActH,IAAVuD,EACH,OAAOA,CACR,CACD,OAAO,IAAIgE,EAAID,EAAOrD,EACtB,CACF,KAAK,EACJ,OAAQA,GACP,KAAK,GAAM,OAAO,EAClB,KAAK,GAAM,OAAO,EAClB,KAAK,GAAM,OAAO,KAClB,KAAK,GAAM,OAEX,QACC,IAAIuD,GAAezI,GAAgB0I,KAAmBxD,GACtD,QAAoBjE,IAAhBwH,EACH,OAAOA,EACR,MAAM,IAAI5E,MAAM,iBAAmBqB,GAEtC,QACC,GAAIyD,MAAMzD,GAAQ,CACjB,IAAIzF,EAAQ,IAAIoE,MAAM,+BAEtB,MADApE,EAAMqF,YAAa,EACbrF,CACN,CACD,MAAM,IAAIoE,MAAM,sBAAwBqB,GAwT3C,IAAiB3B,CAtTjB,CACA,MAAMqF,EAAY,4BAClB,SAASnB,EAAsBD,GAkD9B,OADAA,EAAUqB,UAAY,EAhDtB,WAEC,IAAItF,EAASjE,EAAII,KAGjB,GADA6D,GAAkB,GACdA,EAAS,GACZ,OAAQA,GACP,KAAK,GACJA,EAASjE,EAAII,KACb,MACD,KAAK,GACJ6D,EAAStD,EAAS4F,UAAUnG,GAC5BA,GAAY,EACZ,MACD,KAAK,GACJ6D,EAAStD,EAASiG,UAAUxG,GAC5BA,GAAY,EACZ,MACD,QACC,MAAM,IAAImE,MAAM,kCAAoCvE,EAAII,EAAW,IAItE,IAAIoJ,EAAiBxH,KAAKwH,eAC1B,KAAMA,GAAgB,CAErB,GAAIA,EAAeC,gBAAkBxF,EACpC,OAAOuF,EAAelE,GACvBkE,EAAiBA,EAAeE,IAChC,CACD,GAAI1H,KAAKuH,aAAe,EAAG,CAC1B,IAAIvC,EAAQhF,KAAKiC,QAAUA,EAASjC,KAAOA,KAAKsF,MAAM,EAAGrD,GAQzD,OAPAuF,EAAiB3I,EAAeY,OAC9B,IAAIkI,SAAS,IAAK,WAAa3C,EAAMhE,KAAIb,GAAKtB,EAAe4B,UAAUN,KAAIa,KAAIb,GAAKmH,EAAUM,KAAKzH,GAAKmB,EAAQnB,GAAK,OAAU,IAAM0H,KAAKC,UAAU3H,GAAK,UAAU+E,KAAK,KAAO,KAC/K,IAAIyC,SAAS,IAAK,WAAa3C,EAAMhE,KAAIN,GAAO4G,EAAUM,KAAKlH,GAAOY,EAAQZ,GAAO,OAAU,IAAMmH,KAAKC,UAAUpH,GAAO,UAAUwE,KAAK,KAAO,KAC/IlF,KAAKwH,iBACRA,EAAeE,KAAO1H,KAAKwH,gBAC5BA,EAAeC,cAAgBxF,EAC/BjC,KAAKwH,eAAiBA,EACfA,EAAelE,EACtB,CACD,IAAI8B,EAAS,CAAE,EACf,GAAIvG,EAAeY,OAAQ,IAAK,IAAIwF,EAAI,EAAGA,EAAIhD,EAAQgD,IAAKG,EAAO9D,EAAQzC,EAAe4B,UAAUT,KAAKiF,MAAQ3B,SAC5G,IAAK,IAAI2B,EAAI,EAAGA,EAAIhD,EAAQgD,IAChCG,EAAO9D,EAAQtB,KAAKiF,KAAO3B,IAE5B,OAAO8B,CACP,CAGF,CAEA,SAAS9D,EAAQZ,GAChB,MAAe,cAARA,EAAsB,WAAaA,CAC3C,CAEA,IAAIuF,EAAkBS,EA4CtB,SAASA,EAAazE,GACrB,IAAIoB,EACJ,GAAIpB,EAAS,KACRoB,EAASoC,EAAgBxD,IAC5B,OAAOoB,EAET,GAAIpB,EAAS,IAAMlE,EAClB,OAAOA,EAAQ4D,OAAO3D,EAAIuH,SAASnH,EAAUA,GAAY6D,IAC1D,MAAMP,EAAMtD,EAAW6D,EACjB8F,EAAQ,GAEd,IADA1E,EAAS,GACFjF,EAAWsD,GAAK,CACtB,MAAMqC,EAAQ/F,EAAII,KAClB,GAAuB,IAAV,IAAR2F,GAEJgE,EAAM3E,KAAKW,QACL,GAAuB,MAAV,IAARA,GAAwB,CAEnC,MAAMiE,EAA0B,GAAlBhK,EAAII,KAClB2J,EAAM3E,MAAe,GAARW,IAAiB,EAAKiE,EACnC,MAAM,GAAuB,MAAV,IAARjE,GAAwB,CAEnC,MAAMiE,EAA0B,GAAlBhK,EAAII,KACZ6J,EAA0B,GAAlBjK,EAAII,KAClB2J,EAAM3E,MAAe,GAARW,IAAiB,GAAOiE,GAAS,EAAKC,EACnD,MAAM,GAAuB,MAAV,IAARlE,GAAwB,CAKnC,IAAImE,GAAiB,EAARnE,IAAiB,IAHE,GAAlB/F,EAAII,OAG8B,IAFhB,GAAlBJ,EAAII,OAEgD,EADlC,GAAlBJ,EAAII,KAEd8J,EAAO,QACVA,GAAQ,MACRH,EAAM3E,KAAO8E,IAAS,GAAM,KAAS,OACrCA,EAAO,MAAiB,KAAPA,GAElBH,EAAM3E,KAAK8E,EACd,MACGH,EAAM3E,KAAKW,GAGRgE,EAAM9F,QAAU,OACnBoB,GAAUwC,EAAaC,MAAMC,OAAQgC,GACrCA,EAAM9F,OAAS,EAEhB,CAMD,OAJI8F,EAAM9F,OAAS,IAClBoB,GAAUwC,EAAaC,MAAMC,OAAQgC,IAG/B1E,CACR,CACA,IAAIwC,EAAeE,OAAOF,aAc1B,SAASJ,EAAgBxD,GACxB,GAAIA,EAAS,EAAG,CACf,GAAIA,EAAS,EAAG,CACf,GAAe,IAAXA,EACH,MAAO,GACH,CACJ,IAAIkG,EAAInK,EAAII,KACZ,OAAS,IAAJ+J,GAAY,OAChB/J,GAAY,GAGNyH,EAAasC,EACpB,CACJ,CAAS,CACN,IAAIA,EAAInK,EAAII,KACRgK,EAAIpK,EAAII,KACZ,IAAS,IAAJ+J,GAAY,IAAU,IAAJC,GAAY,EAElC,YADAhK,GAAY,GAGb,GAAI6D,EAAS,EACZ,OAAO4D,EAAasC,EAAGC,GACxB,IAAIC,EAAIrK,EAAII,KACZ,OAAS,IAAJiK,GAAY,OAChBjK,GAAY,GAGNyH,EAAasC,EAAGC,EAAGC,EAC1B,CACH,CAAQ,CACN,IAAIF,EAAInK,EAAII,KACRgK,EAAIpK,EAAII,KACRiK,EAAIrK,EAAII,KACRkK,EAAItK,EAAII,KACZ,IAAS,IAAJ+J,GAAY,IAAU,IAAJC,GAAY,IAAU,IAAJC,GAAY,IAAU,IAAJC,GAAY,EAEtE,YADAlK,GAAY,GAGb,GAAI6D,EAAS,EAAG,CACf,GAAe,IAAXA,EACH,OAAO4D,EAAasC,EAAGC,EAAGC,EAAGC,GACzB,CACJ,IAAIC,EAAIvK,EAAII,KACZ,OAAS,IAAJmK,GAAY,OAChBnK,GAAY,GAGNyH,EAAasC,EAAGC,EAAGC,EAAGC,EAAGC,EAChC,CACJ,CAAS,GAAItG,EAAS,EAAG,CACtB,IAAIsG,EAAIvK,EAAII,KACRoK,EAAIxK,EAAII,KACZ,IAAS,IAAJmK,GAAY,IAAU,IAAJC,GAAY,EAElC,YADApK,GAAY,GAGb,GAAI6D,EAAS,EACZ,OAAO4D,EAAasC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,GACpC,IAAIC,EAAIzK,EAAII,KACZ,OAAS,IAAJqK,GAAY,OAChBrK,GAAY,GAGNyH,EAAasC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EACzC,CAAS,CACN,IAAIF,EAAIvK,EAAII,KACRoK,EAAIxK,EAAII,KACRqK,EAAIzK,EAAII,KACRsK,EAAI1K,EAAII,KACZ,IAAS,IAAJmK,GAAY,IAAU,IAAJC,GAAY,IAAU,IAAJC,GAAY,IAAU,IAAJC,GAAY,EAEtE,YADAtK,GAAY,GAGb,GAAI6D,EAAS,GAAI,CAChB,GAAe,IAAXA,EACH,OAAO4D,EAAasC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,GACrC,CACJ,IAAIzD,EAAIjH,EAAII,KACZ,OAAS,IAAJ6G,GAAY,OAChB7G,GAAY,GAGNyH,EAAasC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGzD,EAC5C,CACL,CAAU,GAAIhD,EAAS,GAAI,CACvB,IAAIgD,EAAIjH,EAAII,KACRuK,EAAI3K,EAAII,KACZ,IAAS,IAAJ6G,GAAY,IAAU,IAAJ0D,GAAY,EAElC,YADAvK,GAAY,IAGb,GAAI6D,EAAS,GACZ,OAAO4D,EAAasC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGzD,EAAG0D,GAChD,IAAIxI,EAAInC,EAAII,KACZ,OAAS,IAAJ+B,GAAY,OAChB/B,GAAY,IAGNyH,EAAasC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGzD,EAAG0D,EAAGxI,EACtD,CAAU,CACN,IAAI8E,EAAIjH,EAAII,KACRuK,EAAI3K,EAAII,KACR+B,EAAInC,EAAII,KACRwK,EAAI5K,EAAII,KACZ,IAAS,IAAJ6G,GAAY,IAAU,IAAJ0D,GAAY,IAAU,IAAJxI,GAAY,IAAU,IAAJyI,GAAY,EAEtE,YADAxK,GAAY,IAGb,GAAI6D,EAAS,GAAI,CAChB,GAAe,KAAXA,EACH,OAAO4D,EAAasC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGzD,EAAG0D,EAAGxI,EAAGyI,GACjD,CACJ,IAAIC,EAAI7K,EAAII,KACZ,OAAS,IAAJyK,GAAY,OAChBzK,GAAY,IAGNyH,EAAasC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGzD,EAAG0D,EAAGxI,EAAGyI,EAAGC,EACxD,CACN,CAAW,CACN,IAAIA,EAAI7K,EAAII,KACR0K,EAAI9K,EAAII,KACZ,IAAS,IAAJyK,GAAY,IAAU,IAAJC,GAAY,EAElC,YADA1K,GAAY,IAGb,GAAI6D,EAAS,GACZ,OAAO4D,EAAasC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGzD,EAAG0D,EAAGxI,EAAGyI,EAAGC,EAAGC,GAC5D,IAAIC,EAAI/K,EAAII,KACZ,OAAS,IAAJ2K,GAAY,OAChB3K,GAAY,IAGNyH,EAAasC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGzD,EAAG0D,EAAGxI,EAAGyI,EAAGC,EAAGC,EAAGC,EAC9D,CACD,CACD,CACD,CACF,CAgBA,IAAI1E,EAAW,IAAI2E,aAAa,GAC5B5E,EAAU,IAAI9B,WAAW+B,EAASlC,OAAQ,EAAG,GAyBlC,IAAIO,MAAM,MAgElB,MAAMwE,EACZ3H,YAAY2D,EAAO+F,GAClBjJ,KAAKkD,MAAQA,EACblD,KAAKiJ,IAAMA,CACX,EAGFjK,EAAkB,GAAMkK,GAEhB,IAAIC,KAAKD,GAGjBlK,EAAkB,GAAMoK,GAEhB,IAAID,KAAKE,KAAKC,MAAiB,IAAXF,IAG5BpK,EAAkB,GAAMmD,IAEvB,IAAIe,EAAQqG,OAAO,GACnB,IAAK,IAAItE,EAAI,EAAG2D,EAAIzG,EAAOE,WAAY4C,EAAI2D,EAAG3D,IAC7C/B,EAAQqG,OAAOpH,EAAO8C,IAAM/B,GAASqG,OAAO,GAE7C,OAAOrG,GAGRlE,EAAkB,GAAMmD,GAEhBoH,QAAQ,GAAKvK,EAAkB,GAAGmD,GAE1CnD,EAAkB,GAAMwK,KAEdA,EAAS,GAAK,IAAMA,EAAS,IAGvCxK,EAAkB,GAAMwK,GAEhBA,EAAS,GAAKH,KAAKI,IAAID,EAAS,GAAKH,KAAKK,IAAI,IAItD,MAAMpD,EAAmB,CAACD,EAAIH,KAE7B,IAAIyD,EAAoBrL,EADxB+H,GAAU,OAENsD,GAAqBA,EAAkBC,YACzCtL,EAAkBuL,oBAAsBvL,EAAkBuL,kBAAoB,KAAKxD,GAAMsD,GAE3FrL,EAAkB+H,GAAMH,EAExBA,EAAU5C,KAAO6C,EAAsBD,EAAU,EAElDlH,EA73BgC,KA63Bc8K,IAC7C,IAAI7H,EAAS6H,EAAK7H,OACdiE,EAAY4D,EAAK,GACrBxD,EAAiBwD,EAAK,GAAI5D,GAC1B,IAAId,EAAS,CAAE,EACf,IAAK,IAAIH,EAAI,EAAGA,EAAIhD,EAAQgD,IAAK,CAEhCG,EAAO9D,EADG4E,EAAUjB,EAAI,KACD6E,EAAK7E,EAC5B,CACD,OAAOG,GAERpG,EAAkB,IAAOkE,GACpB1E,EACIA,EAAe,GAAG8G,MAAM9G,EAAemI,UAAWnI,EAAemI,WAAazD,GAC/E,IAAIgE,EAAIhE,EAAO,IAEvBlE,EAAkB,IAAOkE,GACpB1E,EACIA,EAAe,GAAG8G,MAAM9G,EAAeoI,UAAWpI,EAAeoI,WAAa1D,GAC/E,IAAIgE,EAAIhE,EAAO,IAEvB,IAAI6G,EAAO,CAAExH,YAAOyH,eACpBhL,EAAkB,IAAO8K,IAChBC,EAAKD,EAAK,KAAOvH,OAAOuH,EAAK,GAAIA,EAAK,IAE/C,MAAMG,EAAe3G,IACpB,GAAuB,KAAnBtF,EAAII,KACP,MAAM,IAAImE,MAAM,iEACjB,IAAI2H,EAAkB5G,IAItB,OAHA5E,EAAeA,EAAewL,EAAgBtH,OAAOlE,EAAa4G,MAAM4E,EAAgBjI,SAAWiI,EACnGxL,EAAayL,SAAW7G,IACxB5E,EAAa0L,SAAW9G,IACjBA,GAAM,EA6Ed,SAAS+G,EAAQlC,EAAGC,GACnB,MAAiB,iBAAND,EACHA,EAAIC,EACRD,aAAazF,MACTyF,EAAEvF,OAAOwF,GACV/H,OAAOG,OAAO,GAAI2H,EAAGC,EAC7B,CACA,SAAShB,IACR,IAAK1I,EAAc,CAClB,IAAIG,EAAegB,UAGlB,MAAM,IAAI0C,MAAM,8BAFhBuE,GAGD,CACD,OAAOpI,CACR,CA1FAuL,EAAYjD,aAAc,EAC1BhI,EAAkB,IAAMiL,EAExBjL,EA75BgC,GA65Bc8K,IAC7C,IAAKpL,EAAc,CAClB,IAAIG,EAAegB,UAGlB,OAAO,IAAIqH,EAAI4C,EAl6Bc,GAg6B7BhD,GAGD,CACD,GAAmB,iBAARgD,EACV,OAAOpL,EAAa,IAAMoL,GAAQ,EAAI,EAAIA,GAAS,EAAIA,EAAO,IAC/D,MAAM,IAAIvH,MAAM,mDAAkD,EAoBnEvD,EAAkB,IAAOsE,IAEnB7E,IACJA,EAAe,IAAIyB,IACnBzB,EAAa4H,GAAK,GAEnB,IAEIiE,EAFAjE,EAAK5H,EAAa4H,KAMrBiE,EALWtM,EAAII,IAIF,GAAM,EACV,GAEA,CAAE,EAEZ,IAAImM,EAAW,CAAED,UACjB7L,EAAa8B,IAAI8F,EAAIkE,GACrB,IAAIC,EAAmBlH,IACvB,OAAIiH,EAASE,KACLpK,OAAOG,OAAO8J,EAAQE,IAC9BD,EAASD,OAASE,EACXA,IAERxL,EAAkB,IAAIgI,aAAc,EAEpChI,EAAkB,IAAOqH,IAExB,IAAIkE,EAAW9L,EAAakC,IAAI0F,GAEhC,OADAkE,EAASE,MAAO,EACTF,EAASD,QAGjBtL,EAAkB,KAAQgG,GAAU,IAAI0F,IAAI1F,IAC3ChG,EAAkB,KAAQsE,IAGtBzE,EAAeO,gBAClBP,EAAeO,eAAgB,EAC/BR,GAAsB,GAEhB0E,MACL0D,aAAc,EAkBjB/H,EAAuBmE,MAAK,CAAC6F,EAAKhC,IAC7BgC,GAAO,KAAOA,GAAO,IACjBoB,EAAQjD,IAAkB+C,SAASlB,EAAM,KAAMhC,GACnDgC,GAAO,OAASA,GAAO,MACnBoB,EAAQjD,IAAkB+C,SAASlB,EAAM,OAAQhC,GACrDgC,GAAO,YAAcA,GAAO,WACxBoB,EAAQjD,IAAkB+C,SAASlB,EAAM,YAAahC,GAC1DgC,GAAO,KAAOA,GAAO,IACjBoB,EAAQpD,EAAOG,IAAkBgD,SAASnB,EAAM,MACpDA,GAAO,OAASA,GAAO,MACnBoB,EAAQpD,EAAOG,IAAkBgD,SAASnB,EAAM,QACpDA,GAAO,YAAcA,GAAO,WACxBoB,EAAQpD,EAAOG,IAAkBgD,SAASnB,EAAM,aAb9B,YActBA,EACI,CACNvK,aAAcA,EACdoB,WAAYxB,EAAkBgH,MAAM,GACpCqF,QAAS1D,GAGA,OAAPgC,EACIhC,OADR,IAID,MAAM2D,EAA0E,GAAlD,IAAItI,WAAW,IAAIuI,YAAY,CAAC,IAAI1I,QAAQ,GAC7D2I,EAAc,CAACxI,WAAYyI,kBAAmBF,YAAaG,YAC9C,oBAAlBC,eAAgC,CAAE/J,KAAK,kBAAqB+J,eAAgBC,UAAWC,WAAYC,WAClF,oBAAjBC,cAA+B,CAAEnK,KAAK,iBAAoBmK,cAAerC,aAAcsC,cACzFC,EAAiB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAChE,IAAK,IAAItG,EAAI,EAAGA,EAAI6F,EAAY7I,OAAQgD,IACvCuG,EAAmBV,EAAY7F,GAAIsG,EAAetG,IAEnD,SAASuG,EAAmBC,EAAYxC,GACvC,IACIyC,EADAC,EAAW,MAAQF,EAAWvK,KAAKoE,MAAM,GAAI,GAEvB,mBAAfmG,EACVC,EAAkBD,EAAWG,kBAE7BH,EAAa,KACd,IAAK,IAAII,EAAe,EAAGA,EAAe,EAAGA,IAAgB,CAC5D,IAAKA,GAAmC,GAAnBH,EACpB,SACD,IAAII,EAA+B,GAAnBJ,EAAuB,EAAuB,GAAnBA,EAAuB,EAAI,EACtE1M,EAAkB6M,EAAe5C,EAAOA,EAAM,GAA0B,GAAnByC,GAAwBG,GAAgBjB,EAA0BzI,IACtH,IAAKsJ,EACJ,MAAM,IAAIlJ,MAAM,uCAAyC0G,GAE1D,OAAO,IAAIwC,EAAWnJ,WAAWP,UAAUuD,MAAMtD,KAAKG,EAAQ,GAAGA,OAAM,EACpEA,IACH,IAAKsJ,EACJ,MAAM,IAAIlJ,MAAM,uCAAyC0G,GAC1D,IAAI8C,EAAK,IAAI7J,SAASC,EAAOA,OAAQA,EAAOC,WAAYD,EAAOE,YAC3D2J,EAAW7J,EAAOF,QAAU6J,EAC5BG,EAAK,IAAIR,EAAWO,GACpBE,EAASH,EAAGJ,GAChB,IAAK,IAAI1G,EAAI,EAAGA,EAAI+G,EAAU/G,IAC7BgH,EAAGhH,GAAKiH,EAAOlK,KAAK+J,EAAI9G,GAAK6G,EAAWD,GAEzC,OAAOI,EAER,CACF,CAoBA,SAAS7F,IACR,IAAIxC,EAA0B,GAAlB5F,EAAII,KAChB,GAAIwF,EAAQ,GACX,OAAQA,GACP,KAAK,GACJA,EAAQ5F,EAAII,KACZ,MACD,KAAK,GACJwF,EAAQjF,EAAS4F,UAAUnG,GAC3BA,GAAY,EACZ,MACD,KAAK,GACJwF,EAAQjF,EAASiG,UAAUxG,GAC3BA,GAAY,EAIf,OAAOwF,CACR,CAEA,SAASkD,IACR,GAAIjI,EAAegB,UAAW,CAC7B,IAAIsM,EAAatK,GAAU,KAE1B7D,EAAM,KACCa,EAAegB,gBACjB,CAAE,EACJuM,EAAoBD,EAAWrM,YAAc,GACjDjB,EAAewN,cAAgBF,EAAWxB,QAC1CjM,EAAeG,EAAe2D,aAAe2J,EAAWzN,cAC9B,IAAtBJ,EACHO,EAAeiB,WAAaxB,EAAoB8N,EAEhD9N,EAAkBgO,OAAOxG,MAAMxH,EAAmB,CAAC,EAAG8N,EAAkBnK,QAAQW,OAAOwJ,GACxF,CACF,CAEA,SAASvK,EAAU0K,GAClB,IAAIC,EAAcvO,EACdwO,EAAgBrO,EAEhBsO,EAAsB5N,EACtB6N,EAAoB5N,EACpB6N,EAAiBrO,EAEjBsO,EAAoBpO,EACpBqO,EAAsBtO,EAGtBuO,EAAW,IAAIzK,WAAWtE,EAAIsH,MAAM,EAAGrH,IACvC+O,EAAkB1O,EAClB2O,EAAepO,EACfqO,EAAsB7N,EACtB6D,EAAQqJ,IAeZ,OAdAtO,EAASuO,EACTpO,EAAWqO,EAEX3N,EAAiB4N,EACjB3N,EAAe4N,EACfpO,EAAYqO,EAEZnO,EAAeoO,EACfrO,EAAiBsO,EACjB9O,EAAM+O,EACN1N,EAAiB6N,EACjB5O,EAAoB0O,EACpBnO,EAAiBoO,EACjBtO,EAAW,IAAIuD,SAASlE,EAAImE,OAAQnE,EAAIoE,WAAYpE,EAAIqE,YACjDa,CACR,CACO,SAASpB,IACf9D,EAAM,KACNS,EAAe,KACfH,EAAoB,IACrB,CAMO,MAAMqG,EAAS,IAAIjC,MAAM,KAChC,IAAK,IAAIuC,EAAI,EAAGA,EAAI,IAAKA,IACxBN,EAAOM,KAAO,KAAOoE,KAAK8D,MAAM,MAAY,OAAJlI,IAEzC,IAAI9B,EAAiB,IAAI7D,EAAQ,CAAEH,YAAY,IACnC,MAACwC,EAASwB,EAAexB,OACxBmB,EAAiBK,EAAeL,eAChCsK,EAAkB,CAC9BC,MAAO,EACPC,OAAQ,EACRC,cAAe,EACfC,YAAa,GC/qCd,IAAIC,EAIAC,EAAYC,EAHhB,IACCF,EAAc,IAAIG,WACD,CAAhB,MAAOzP,GAAS,CAElB,MAAMgH,GAAS0I,WAAW1I,OACpB2I,QAAkC,IAAX3I,GACvB4I,GAAoBD,GAAgB3I,GAAO6I,gBAAkB1L,WAC7D2L,GAAYH,GAAgB3I,GAAS7C,WAErC4L,GAAkBJ,GAAgB,WAAc,WAEtD,IAAIK,GACA7D,GACA8D,GAEAC,GADAjQ,GAAW,EAEXI,GAAiB,KACrB,MACM8P,GAAc,kBACdC,GAAgBC,OAAO,aACtB,MAAMC,WAAgBnP,EAC5BC,YAAYC,GAIX,IAAIkG,EACAgJ,EACAC,EACA7O,EACArB,EAPJmQ,MAAMpP,GACNQ,KAAK6O,OAAS,EAOdrP,EAAUA,GAAW,CAAE,EACvB,IAAIsP,EAAab,GAAUlM,UAAUgN,UAAY,SAASvJ,EAAQpH,EAAU4Q,GAC3E,OAAO1E,GAAOyE,UAAUvJ,EAAQpH,EAAU4Q,EAC7C,KAAOvB,IAAeA,EAAYwB,aAC/B,SAASzJ,EAAQpH,GAChB,OAAOqP,EAAYwB,WAAWzJ,EAAQ8E,GAAO/E,SAASnH,IAAW8Q,OACrE,EAEMC,EAAUnP,KACVoP,EAAsB5P,EAAQM,YAAcN,EAAQ6P,eACpDC,EAAsB9P,EAAQ8P,oBAGlC,GAF2B,MAAvBA,IACHA,EAAsBF,EAAsB,IAAM,GAC/CE,EAAsB,KACzB,MAAM,IAAI/M,MAAM,sCACjB,IAAIgN,EAAe/P,EAAQgQ,WACvBD,IACHD,EAAsB,GAElBtP,KAAKF,aACTE,KAAKF,WAAa,IACfE,KAAKqP,iBACRrP,KAAKyP,WAAazP,KAAKqP,gBACxB,IAAIK,EAAsBC,EACtBC,EADuCpN,EAAehD,EAAQgD,aAElE,GAAIA,EAAc,CACjBoN,EAAwBvP,OAAOwP,OAAO,MACtC,IAAK,IAAI5K,EAAI,EAAG2D,EAAIpG,EAAaP,OAAQgD,EAAI2D,EAAG3D,IAC/C2K,EAAsBpN,EAAayC,IAAMA,CAE1C,CACD,IAAI6K,EAAoB,GACpBC,EAAmB,EACnBC,EAAuC,EAE3ChQ,KAAKiQ,UAAY,SAAS/M,EAAOgN,GAEhC,GAAIlQ,KAAKN,UAAYM,KAAKmQ,SAGnB,UADEjN,EAAM3D,YAAY2B,KAExBgC,EAAQA,EAAMlC,KAAIY,GAAK5B,KAAKc,WAAWc,KAQ1C,OAAO5B,KAAKoQ,OAAOlN,EAAOgN,EAC1B,EAEDlQ,KAAKoQ,OAAS,SAASlN,EAAOgN,GA4B7B,GA3BK5F,KACJA,GAAS,IAAIyD,GAAkB,MAC/BK,GAAa,IAAIlM,SAASoI,GAAOnI,OAAQ,EAAG,MAC5C/D,GAAW,GAEZiQ,GAAU/D,GAAOrI,OAAS,GACtBoM,GAAUjQ,GAAW,MAExBkM,GAAS,IAAIyD,GAAkBzD,GAAOrI,QACtCmM,GAAa,IAAIlM,SAASoI,GAAOnI,OAAQ,EAAGmI,GAAOrI,QACnDoM,GAAU/D,GAAOrI,OAAS,GAC1B7D,GAAW,GACD8R,IAAkBG,KAC5BjS,GAAYA,GAAW,EAAK,YAC7BsH,EAAQtH,GACJ+Q,EAAQmB,yBACXlC,GAAWmC,UAAUnS,GAAU,YAC/BA,IAAY,GAEbK,EAAe0Q,EAAQqB,gBAAkB,IAAItQ,IAAQ,KACjDiP,EAAQsB,eAAkC,iBAAVvN,GACnC1E,GAAiB,GACjBA,GAAeyE,KAAOiB,KAEtB1F,GAAiB,KAElBkQ,EAAmBS,EAAQrP,WACvB4O,EAAkB,CACrB,GAAIA,EAAiB3O,cAAe,CACnC,IAAIoM,EAAagD,EAAQtP,aAAe,CAAE,EAC1CsP,EAAQrP,WAAa4O,EAAmBvC,EAAWrM,YAAc,GACjEqP,EAAQ9C,cAAgBF,EAAWxB,QACnC,IAAInI,EAAe2M,EAAQ3M,aAAe2J,EAAWzN,aACrD,GAAI8D,EAAc,CACjBoN,EAAwB,CAAE,EAC1B,IAAK,IAAI3K,EAAI,EAAG2D,EAAIpG,EAAaP,OAAQgD,EAAI2D,EAAG3D,IAC/C2K,EAAsBpN,EAAayC,IAAMA,CAC1C,CACD,CACD,IAAIyL,EAAyBhC,EAAiBzM,OAG9C,GAFIyO,EAAyBpB,IAAwBC,IACpDmB,EAAyBpB,IACrBZ,EAAiBiC,YAAa,CAElCjC,EAAiBiC,YAActQ,OAAOwP,OAAO,MAC7C,IAAK,IAAI5K,EAAI,EAAGA,EAAIyL,EAAwBzL,IAAK,CAChD,IAAI2L,EAAOlC,EAAiBzJ,GAE5B,IAAK2L,EACJ,SACD,IAAIC,EAAgBC,EAAapC,EAAiBiC,YAClD,IAAK,IAAIhI,EAAI,EAAGC,EAAIgI,EAAK3O,OAAQ0G,EAAIC,EAAGD,IAAK,MACVhJ,IAA9BmR,EAAWvC,MACduC,EAAWvC,IAAiBtJ,GAC7B,IAAIvE,EAAMkQ,EAAKjI,GACfkI,EAAiBC,EAAWpQ,GACvBmQ,IACJA,EAAiBC,EAAWpQ,GAAOL,OAAOwP,OAAO,OAElDiB,EAAaD,CACb,CACDC,EAAWvC,IAAqB,QAAJtJ,CAC5B,CACD,CACIsK,IACJb,EAAiBqC,OAASL,EAC3B,CAKD,GAJI/B,IACHA,GAAkB,GACnB7O,EAAa4O,GAAoB,GACjCiB,EAAkBC,EACdpQ,EAAQiD,KAAM,CACjB,IAAI/D,EAAe,IAAIwB,IAOvB,GANAxB,EAAaqE,OAAS,GACtBrE,EAAayQ,QAAUA,EACvBzQ,EAAasS,UAAYxR,EAAQmD,yBAA2BiN,EAAwB,GAAK1L,KACzFxF,EAAauS,UAAYrB,IAAyB,EAClDlR,EAAagR,qBAAuBA,EACpCwB,GAAsBhO,EAAOxE,GACzBA,EAAaqE,OAAOd,OAAS,EAAG,CACnCqI,GAAOlM,MAAc,IACrBkM,GAAOlM,MAAc,GACrB+S,GAAiB,GACjB,IAAIC,EAAc1S,EAAaqE,OAC/BqN,EAAOgB,GACPD,GAAiB,GACjBA,GAAiB,GACjBxB,EAAkBtP,OAAOwP,OAAOD,GAAyB,MACzD,IAAK,IAAI3K,EAAI,EAAG2D,EAAIwI,EAAYnP,OAAQgD,EAAI2D,EAAG3D,IAC9C0K,EAAgByB,EAAYnM,IAAMA,CAEnC,CACD,CACDkJ,GAAkB+B,EAAgBmB,GAClC,IACC,GAAIlD,GACH,OAMD,GALAiC,EAAOlN,GACH1E,IACH8S,GAAa5L,EAAO0K,GAErBjB,EAAQN,OAASzQ,GACbK,GAAgBA,EAAa8S,YAAa,CAC7CnT,IAA8C,EAAlCK,EAAa8S,YAAYtP,OACjC7D,GAAWiQ,IACdmD,EAASpT,IACV+Q,EAAQN,OAASzQ,GACjB,IAAIqT,EAs8BT,SAAmBA,EAAYF,GAE9B,IAAIR,EACAW,EAAsC,EAArBH,EAAYtP,OAC7B0P,EAAUF,EAAWxP,OAASyP,EAClCH,EAAYK,MAAK,CAACzJ,EAAGC,IAAMD,EAAE0G,OAASzG,EAAEyG,OAAS,GAAK,IACtD,IAAK,IAAIxI,EAAK,EAAGA,EAAKkL,EAAYtP,OAAQoE,IAAM,CAC/C,IAAIwL,EAAUN,EAAYlL,GAC1BwL,EAAQxL,GAAKA,EACb,IAAK,IAAIjI,KAAYyT,EAAQC,WAC5BL,EAAWrT,KAAciI,GAAM,EAC/BoL,EAAWrT,GAAiB,IAALiI,CAExB,CACD,KAAO0K,EAASQ,EAAYQ,OAAO,CAClC,IAAIlD,EAASkC,EAAOlC,OACpB4C,EAAWO,WAAWnD,EAAS6C,EAAgB7C,EAAQ8C,GACvDD,GAAkB,EAClB,IAAItT,EAAWyQ,EAAS6C,EACxBD,EAAWrT,KAAc,IACzBqT,EAAWrT,KAAc,GACzBuT,EAAU9C,CACV,CACD,OAAO4C,CACR,CA99BsBQ,CAAU3H,GAAO/E,SAASG,EAAOtH,IAAWK,EAAa8S,aAE1E,OADA9S,EAAe,KACRgT,CACP,CACD,OAAIvB,EAAgBG,IACnB/F,GAAO5E,MAAQA,EACf4E,GAAO5I,IAAMtD,GACNkM,IAEDA,GAAO/E,SAASG,EAAOtH,GAkC9B,CAjCS,QACT,GAAIsQ,EAKH,GAJIsB,EAAuC,IAC1CA,IACGtB,EAAiBzM,OAASqN,IAC7BZ,EAAiBzM,OAASqN,GACvBS,EAAmB,IAEtBrB,EAAiBiC,YAAc,KAC/BX,EAAuC,EACvCD,EAAmB,EACfD,EAAkB7N,OAAS,IAC9B6N,EAAoB,SACf,GAAIA,EAAkB7N,OAAS,IAAMsN,EAAc,CACzD,IAAK,IAAItK,EAAI,EAAG2D,EAAIkH,EAAkB7N,OAAQgD,EAAI2D,EAAG3D,IACpD6K,EAAkB7K,GAAGsJ,SAAiB5O,EAEvCmQ,EAAoB,EAEpB,CAEF,GAAInB,GAAmBQ,EAAQM,WAAY,CACtCN,EAAQrP,WAAWmC,OAASqN,IAC/BH,EAAQrP,WAAaqP,EAAQrP,WAAWwF,MAAM,EAAGgK,IAGlD,IAAI4C,EAAe5H,GAAO/E,SAASG,EAAOtH,IAC1C,OAAmC,IAA/B+Q,EAAQgD,mBACJhD,EAAQiB,OAAOlN,GAChBgP,CACP,CACGhC,EAAgBkC,KACnBhU,GAAWsH,EACZ,CACD,EACD1F,KAAKqS,wBAA0B,KAC9B3C,EAAuB,IAAIxP,IACtB0P,IACJA,EAAwBvP,OAAOwP,OAAO,OAC/BrQ,IACP,IAAI8S,EAAY9S,GAAWA,EAAQ8S,WAAa,EAC5ClU,EAAW4B,KAAKyC,KAAOjD,EAAQmD,wBAA0B,GAAK,EAC7DH,IACJA,EAAexC,KAAKwC,aAAe,IACpC,IAAK,IAAM9B,EAAK6R,KAAY7C,EACvB6C,EAAOC,MAAQF,IAClB1C,EAAsBlP,GAAOtC,IAC7BoE,EAAaY,KAAK1C,GAClBiO,GAAkB,GAGpB,KAAO3O,KAAKyP,aAA0C,IAA5BzP,KAAKmS,qBAC/BzC,EAAuB,IAAI,GAG7B,MAAMU,EAAUlN,IACX9E,GAAWiQ,KACd/D,GAASkH,EAASpT,KAEnB,IACI6D,EADAwQ,SAAcvP,EAElB,GAAa,WAATuP,EAAmB,CACtB,GAAI9C,EAAiB,CACpB,IAAI+C,EAAiB/C,EAAgBzM,GACrC,GAAIwP,GAAkB,EAUrB,YATIA,EAAiB,GACpBpI,GAAOlM,MAAcsU,EAAiB,KAEtCpI,GAAOlM,MAAc,IAEpBgS,EADoB,EAAjBsC,EACK,GAAKA,GAAmB,EAExBA,EAAiB,IAAO,KAiB5B,GAAIhD,IAAyBlQ,EAAQiD,KAAM,CACjD,IAAI8P,EAAS7C,EAAqB/O,IAAIuC,GAClCqP,EACHA,EAAOC,QAEP9C,EAAqBnP,IAAI2C,EAAO,CAC/BsP,MAAO,GAET,CACD,CACD,IA4BIG,EA5BAC,EAAY1P,EAAMjB,OACtB,GAAIzD,IAAkBoU,GAAa,GAAKA,EAAY,KAAO,CAC1D,IAAKpU,GAAeyE,MAAQ2P,GA5RT,MA4RuC,CACzD,IAAIC,EACA7D,GAAYxQ,GAAe,GAAgC,EAA3BA,GAAe,GAAGyD,OAAazD,GAAe,GAAGyD,OAAS,GAAK,GAC/F7D,GAAW4Q,EAAWX,KACzB/D,GAASkH,EAASpT,GAAW4Q,IAC9B1E,GAAOlM,MAAc,IACrBkM,GAAOlM,MAAc,IACrBkM,GAAOlM,MAAc,IAErBkM,GAAOlM,MAAcI,GAAeJ,SAAW,IAAO,IACtDkM,GAAOlM,MAAc,GACrByU,EAAWzU,GAAWsH,EACtBtH,IAAY,EACRI,GAAeJ,UAClBkT,GAAa5L,EAAO0K,GAErB5R,GAAiB,CAAC,GAAI,IACtBA,GAAeyE,KAAO,EACtBzE,GAAeJ,SAAWyU,CAC1B,CACD,IAAIC,EAAUxE,GAAY1G,KAAK1E,GAI/B,OAHA1E,GAAesU,EAAU,EAAI,IAAM5P,EACnCoH,GAAOlM,MAAc0U,EAAU,IAAO,SACtC1C,EAAOwC,EAEP,CAIAD,EADGC,EAAY,GACF,EACHA,EAAY,IACT,EACHA,EAAY,MACT,EAEA,EAEd,IAAI5D,EAAuB,EAAZ4D,EAIf,GAHIxU,GAAW4Q,EAAWX,KACzB/D,GAASkH,EAASpT,GAAW4Q,IAE1B4D,EAAY,KAAS9D,EAAY,CACpC,IAAI7J,EAAG8N,EAAIC,EAAIC,EAAc7U,GAAWuU,EACxC,IAAK1N,EAAI,EAAGA,EAAI2N,EAAW3N,IAC1B8N,EAAK7P,EAAMgQ,WAAWjO,GAClB8N,EAAK,IACRzI,GAAO2I,KAAiBF,EACdA,EAAK,MACfzI,GAAO2I,KAAiBF,GAAM,EAAI,IAClCzI,GAAO2I,KAAsB,GAALF,EAAY,KAElB,QAAZ,MAALA,IAC6C,QAAZ,OAAhCC,EAAK9P,EAAMgQ,WAAWjO,EAAI,MAE5B8N,EAAK,QAAiB,KAALA,IAAgB,KAAY,KAALC,GACxC/N,IACAqF,GAAO2I,KAAiBF,GAAM,GAAK,IACnCzI,GAAO2I,KAAiBF,GAAM,GAAK,GAAO,IAC1CzI,GAAO2I,KAAiBF,GAAM,EAAI,GAAO,IACzCzI,GAAO2I,KAAsB,GAALF,EAAY,MAEpCzI,GAAO2I,KAAiBF,GAAM,GAAK,IACnCzI,GAAO2I,KAAiBF,GAAM,EAAI,GAAO,IACzCzI,GAAO2I,KAAsB,GAALF,EAAY,KAGtC9Q,EAASgR,EAAc7U,GAAWuU,CACvC,MACK1Q,EAAS6M,EAAW5L,EAAO9E,GAAWuU,EAAY3D,GAG/C/M,EAAS,GACZqI,GAAOlM,MAAc,GAAO6D,EAClBA,EAAS,KACf0Q,EAAa,GAChBrI,GAAO0H,WAAW5T,GAAW,EAAGA,GAAW,EAAGA,GAAW,EAAI6D,GAE9DqI,GAAOlM,MAAc,IACrBkM,GAAOlM,MAAc6D,GACXA,EAAS,OACf0Q,EAAa,GAChBrI,GAAO0H,WAAW5T,GAAW,EAAGA,GAAW,EAAGA,GAAW,EAAI6D,GAE9DqI,GAAOlM,MAAc,IACrBkM,GAAOlM,MAAc6D,GAAU,EAC/BqI,GAAOlM,MAAuB,IAAT6D,IAEjB0Q,EAAa,GAChBrI,GAAO0H,WAAW5T,GAAW,EAAGA,GAAW,EAAGA,GAAW,EAAI6D,GAE9DqI,GAAOlM,MAAc,IACrBgQ,GAAWmC,UAAUnS,GAAU6D,GAC/B7D,IAAY,GAEbA,IAAY6D,CAChB,MAAU,GAAa,WAATwQ,EACV,GAAKzS,KAAKmT,gBAAkBjQ,IAAU,IAAMA,EAgBrC,GAAKlD,KAAKmT,gBAAkBjQ,GAAS,IAAMA,EAe3C,CACN,IAAIuB,EACJ,IAAKA,EAAazE,KAAKyE,YAAc,GAAKvB,EAAQ,YAAeA,IAAU,WAAY,CAGtF,IAAIkQ,EACJ,GAHA9I,GAAOlM,MAAc,IACrBgQ,GAAWiF,WAAWjV,GAAU8E,GAE5BuB,EAAa,IAEb2O,EAAWlQ,EAAQyB,GAA4B,IAAnB2F,GAAOlM,MAAqB,EAAMkM,GAAOlM,GAAW,IAAM,KAAQ,IAAOgV,EAExG,YADAhV,IAAY,GAGZA,IACD,CACDkM,GAAOlM,MAAc,IACrBgQ,GAAWkF,WAAWlV,GAAU8E,GAChC9E,IAAY,CACZ,MA/BI8E,IAAU,GACboH,GAAOlM,MAAc,GAAO8E,EAClBA,IAAU,KACpBoH,GAAOlM,MAAc,GACrBkM,GAAOlM,OAAe8E,GACZA,IAAU,OACpBoH,GAAOlM,MAAc,GACrBgQ,GAAWmF,UAAUnV,IAAW8E,GAChC9E,IAAY,IAEZkM,GAAOlM,MAAc,GACrBgQ,GAAWmC,UAAUnS,IAAW8E,GAChC9E,IAAY,QA3BT8E,EAAQ,GACXoH,GAAOlM,MAAc8E,EACXA,EAAQ,KAClBoH,GAAOlM,MAAc,GACrBkM,GAAOlM,MAAc8E,GACXA,EAAQ,OAClBoH,GAAOlM,MAAc,GACrBkM,GAAOlM,MAAc8E,GAAS,EAC9BoH,GAAOlM,MAAsB,IAAR8E,IAErBoH,GAAOlM,MAAc,GACrBgQ,GAAWmC,UAAUnS,GAAU8E,GAC/B9E,IAAY,QAmCR,GAAa,WAATqU,EACV,GAAKvP,EAEA,CACJ,GAAIzE,EAAc,CACjB,IAAIoT,EAAUpT,EAAakC,IAAIuC,GAC/B,GAAI2O,EAAS,CAIZ,GAHAvH,GAAOlM,MAAc,IACrBkM,GAAOlM,MAAc,GACrBkM,GAAOlM,MAAc,IAChByT,EAAQC,WAAY,CACxB,IAAIP,EAAc9S,EAAa8S,cAAgB9S,EAAa8S,YAAc,IAC1EM,EAAQC,WAAa,GACrBP,EAAYnO,KAAKyO,EACjB,CAGD,OAFAA,EAAQC,WAAW1O,KAAKhF,GAAWsH,QACnCtH,IAAY,EAEZ,CACAK,EAAa8B,IAAI2C,EAAO,CAAE2L,OAAQzQ,GAAWsH,GAC9C,CACD,IAAInG,EAAc2D,EAAM3D,YACxB,GAAIA,IAAgBc,OACnBmT,EAAYtQ,GAAO,QACb,GAAI3D,IAAgBmD,MAAO,EACjCT,EAASiB,EAAMjB,QACF,GACZqI,GAAOlM,MAAc,IAAO6D,EAE5BkP,GAAiBlP,GAElB,IAAK,IAAIgD,EAAI,EAAGA,EAAIhD,EAAQgD,IAC3BmL,EAAOlN,EAAM+B,GAEpB,MAAY,GAAI1F,IAAgBW,IAsB1B,IArBIF,KAAKZ,eAA0C,IAA1BY,KAAKyT,iBAA6BzT,KAAKyT,oBAE/DnJ,GAAOlM,MAAc,IACrBkM,GAAOlM,MAAc,EACrBkM,GAAOlM,MAAc,IAEtB6D,EAASiB,EAAMD,MACF,GACZqH,GAAOlM,MAAc,IAAO6D,EAClBA,EAAS,KACnBqI,GAAOlM,MAAc,IACrBkM,GAAOlM,MAAc6D,GACXA,EAAS,OACnBqI,GAAOlM,MAAc,IACrBkM,GAAOlM,MAAc6D,GAAU,EAC/BqI,GAAOlM,MAAuB,IAAT6D,IAErBqI,GAAOlM,MAAc,IACrBgQ,GAAWmC,UAAUnS,GAAU6D,GAC/B7D,IAAY,GAET+Q,EAAQ1P,OACX,IAAK,IAAMiB,EAAKgT,KAAgBxQ,EAC/BkN,EAAOjB,EAAQvO,UAAUF,IACzB0P,EAAOsD,QAGR,IAAK,IAAMhT,EAAKgT,KAAgBxQ,EAC/BkN,EAAO1P,GACP0P,EAAOsD,OAGH,CACN,IAAK,IAAIzO,EAAI,EAAG2D,EAAI8E,EAAWzL,OAAQgD,EAAI2D,EAAG3D,IAAK,CAElD,GAAI/B,aADiByK,EAAiB1I,GACD,CACpC,IAAI8B,EAAY2G,EAAWzI,GACvBgE,EAAMlC,EAAUkC,IAkBpB,OAjBWtJ,MAAPsJ,IACHA,EAAMlC,EAAU4M,QAAU5M,EAAU4M,OAAO3R,KAAKhC,KAAMkD,IACnD+F,EAAM,GACTqB,GAAOlM,MAAc,IAAO6K,EAClBA,EAAM,KAChBqB,GAAOlM,MAAc,IACrBkM,GAAOlM,MAAc6K,GACXA,EAAM,OAChBqB,GAAOlM,MAAc,IACrBkM,GAAOlM,MAAc6K,GAAO,EAC5BqB,GAAOlM,MAAoB,IAAN6K,GACXA,GAAO,IACjBqB,GAAOlM,MAAc,IACrBgQ,GAAWmC,UAAUnS,GAAU6K,GAC/B7K,IAAY,QAEb2I,EAAUqJ,OAAOpO,KAAKhC,KAAMkD,EAAOkN,EAAQoB,EAE3C,CACD,CACD,GAAItO,EAAMsL,OAAOoF,UAAW,CAC3B,GAAIzF,GAAiB,CACpB,IAAIhQ,EAAQ,IAAIoE,MAAM,6CAEtB,MADApE,EAAM0V,oBAAqB,EACrB1V,CACN,CACDmM,GAAOlM,MAAc,IACrB,IAAK,IAAI0V,KAAS5Q,EACjBkN,EAAO0D,GAGR,YADAxJ,GAAOlM,MAAc,IAErB,CACD,GAAI8E,EAAMsL,OAAOuF,gBAAkBC,GAAO9Q,GAAQ,CACjD,IAAI/E,EAAQ,IAAIoE,MAAM,kDAEtB,MADApE,EAAM0V,oBAAqB,EACrB1V,CACN,CAEDqV,EAAYtQ,GAAQA,EAAMrC,eAC1B,CACD,MAhHAyJ,GAAOlM,MAAc,SAiHhB,GAAa,YAATqU,EACVnI,GAAOlM,MAAc8E,EAAQ,IAAO,SAC9B,GAAa,WAATuP,EAAmB,CAC7B,GAAIvP,EAASqG,OAAO,IAAIA,OAAO,KAAQrG,GAAS,EAE/CoH,GAAOlM,MAAc,GACrBgQ,GAAW6F,aAAa7V,GAAU8E,QAC5B,GAAIA,IAAUqG,OAAO,IAAIA,OAAO,MAAQrG,EAAQ,EAEtDoH,GAAOlM,MAAc,GACrBgQ,GAAW6F,aAAa7V,IAAW8E,EAAQqG,OAAO,QAC5C,CAEN,IAAIvJ,KAAKkU,mBAIR,MAAM,IAAIzQ,WAAWP,EAAQ,sGAH7BoH,GAAOlM,MAAc,IACrBgQ,GAAWkF,WAAWlV,GAAU+V,OAAOjR,GAIxC,CACD9E,IAAY,CAChB,KAAU,IAAa,cAATqU,EAGV,MAAM,IAAIlQ,MAAM,iBAAmBkQ,GAFnCnI,GAAOlM,MAAc,GAGrB,GAGIoV,GAAkC,IAApBxT,KAAKb,WAAuBa,KAAKoU,gBAAmBhP,IAEvE,IAAIwL,EAAOvQ,OAAOuQ,KAAKxL,GACnBiP,EAAOhU,OAAO0C,OAAOqC,GACrBnD,EAAS2O,EAAK3O,OAgBlB,GAfIA,EAAS,GACZqI,GAAOlM,MAAc,IAAO6D,EAClBA,EAAS,KACnBqI,GAAOlM,MAAc,IACrBkM,GAAOlM,MAAc6D,GACXA,EAAS,OACnBqI,GAAOlM,MAAc,IACrBkM,GAAOlM,MAAc6D,GAAU,EAC/BqI,GAAOlM,MAAuB,IAAT6D,IAErBqI,GAAOlM,MAAc,IACrBgQ,GAAWmC,UAAUnS,GAAU6D,GAC/B7D,IAAY,GAGT+Q,EAAQ1P,OACX,IAAK,IAAIwF,EAAI,EAAGA,EAAIhD,EAAQgD,IAC3BmL,EAAOxP,UAAUgQ,EAAK3L,KACtBmL,EAAOiE,EAAKpP,SAGb,IAAK,IAAIA,EAAI,EAAGA,EAAIhD,EAAQgD,IAC3BmL,EAAOQ,EAAK3L,IACZmL,EAAOiE,EAAKpP,GAEb,EAEF,CAACG,EAAQkP,KACRhK,GAAOlM,MAAc,IACrB,IAAImW,EAAenW,GAAWsH,EAC9BtH,IAAY,EACZ,IAAI6E,EAAO,EACX,GAAIkM,EAAQ1P,OACX,IAAK,IAAIiB,KAAO0E,GAAYkP,GAAiBlP,EAAOvE,eAAeH,MAClE0P,EAAOjB,EAAQvO,UAAUF,IACzB0P,EAAOhL,EAAO1E,IACduC,UAGD,IAAK,IAAIvC,KAAO0E,GAAYkP,GAAiBlP,EAAOvE,eAAeH,MACjE0P,EAAO1P,GACP0P,EAAOhL,EAAO1E,IACfuC,KAGFqH,GAAOiK,IAAiB7O,GAASzC,GAAQ,EACzCqH,GAAOiK,EAAe7O,GAAgB,IAAPzC,CAAW,EAE3C,CAACmC,EAAQkP,KACR,IAAIzD,EAGA2D,EACA5D,EAJgBE,EAAahR,EAAW6Q,cAAgB7Q,EAAW6Q,YAActQ,OAAOwP,OAAO,OAC/F4E,EAAiB,EACjBxS,EAAS,EAGb,GAAIjC,KAAKP,OAAQ,CAChBmR,EAAOvQ,OAAOuQ,KAAKxL,GAAQpE,KAAIb,GAAKH,KAAKY,UAAUT,KACnD8B,EAAS2O,EAAK3O,OACd,IAAK,IAAIgD,EAAI,EAAGA,EAAIhD,EAAQgD,IAAK,CAChC,IAAIvE,EAAMkQ,EAAK3L,GACf4L,EAAiBC,EAAWpQ,GACvBmQ,IACJA,EAAiBC,EAAWpQ,GAAOL,OAAOwP,OAAO,MACjD4E,KAED3D,EAAaD,CACb,CACL,MACI,IAAK,IAAInQ,KAAO0E,GAAYkP,GAAiBlP,EAAOvE,eAAeH,MAClEmQ,EAAiBC,EAAWpQ,GACvBmQ,IAC4B,QAA5BC,EAAWvC,MACdiG,EAA6C,MAA5B1D,EAAWvC,KAE7BsC,EAAiBC,EAAWpQ,GAAOL,OAAOwP,OAAO,MACjD4E,KAED3D,EAAaD,EACb5O,KAGF,IAAIyS,EAAW5D,EAAWvC,IAC1B,QAAiB5O,IAAb+U,EACHA,GAAY,MACZpK,GAAOlM,MAAc,IACrBkM,GAAOlM,MAAesW,GAAY,EAAK,IACvCpK,GAAOlM,MAAyB,IAAXsW,MACf,CAgBN,GAfK9D,IACJA,EAAOE,EAAW6D,WAAa7D,EAAW6D,SAAWtU,OAAOuQ,KAAKxL,UAC3CzF,IAAnB6U,GACHE,EAAW5U,EAAWiR,SACjB2D,IACJA,EAAW,EACX5U,EAAWiR,OAAS,GAEjB2D,GAzqBc,MA0qBjB5U,EAAWiR,QAAU2D,EAAWpF,GAAuB,IAGxDoF,EAAWF,EAEZ1U,EAAW4U,GAAY9D,IACnB8D,EAAWpF,GAYR,CAaN,GAZAwB,EAAWvC,IAAiBmG,EAC5BtG,GAAWmC,UAAUnS,GAAU,YAC/BA,IAAY,EACRqW,IACH1E,GAAoBC,EAAuCyE,GAExD3E,EAAkB7N,QAnsBJ,IAmsB+BqN,IAChDQ,EAAkB8E,QAAQrG,SAAiB5O,GAC5CmQ,EAAkB1M,KAAK0N,GACvBK,GAAiBlP,EAAS,GAC1BmO,EAAO,MAASsE,GAChBtE,EAAOQ,GACe,OAAlB0D,EAAwB,OAC5B,IAAK,IAAI5T,KAAO0E,GACXkP,GAAiBlP,EAAOvE,eAAeH,KAC1C0P,EAAOhL,EAAO1E,IAChB,MACA,CA7BA4J,GAAOlM,MAAc,IACrBkM,GAAOlM,MAAesW,GAAY,EAAK,IACvCpK,GAAOlM,MAAyB,IAAXsW,EACrB5D,EAAahR,EAAW6Q,YACxB,IAAK,IAAI1L,EAAI,EAAGA,EAAIhD,EAAQgD,UACOtF,IAA9BmR,EAAWvC,KAA6D,QAA5BuC,EAAWvC,OAC1DuC,EAAWvC,IAAiBmG,GAC7B5D,EAAaA,EAAWF,EAAK3L,IAE9B6L,EAAWvC,IAA4B,QAAXmG,EAC5B/F,GAAkB,CAoBnB,CAMD,GALI1M,EAAS,GACZqI,GAAOlM,MAAc,IAAO6D,EAE5BkP,GAAiBlP,GAEI,OAAlBqS,EACJ,IAAK,IAAI5T,KAAO0E,GACXkP,GAAiBlP,EAAOvE,eAAeH,KAC1C0P,EAAOhL,EAAO1E,GAAK,EAEhB8Q,EAAY9P,IACjB,IAAImT,EACJ,GAAInT,EAAM,SAAW,CAEpB,GAAKA,EAAMgE,EAASwI,GACnB,MAAM,IAAI3L,MAAM,2DACjBsS,EAAUxL,KAAKyL,IAAI5G,GACsE,KAAxF7E,KAAKC,MAAMD,KAAK0L,KAAKrT,EAAMgE,IAAUhE,EAAM,SAAY,KAAO,GAAI,SAAY,MAC/E,MACAmT,EAAqE,GAAzDxL,KAAK0L,IAAKrT,EAAMgE,GAAU,EAAG4E,GAAOrI,OAAS,IAAM,KAAY,GAC5E,IAAI+S,EAAY,IAAIjH,GAAkB8G,GAStC,OARAzG,GAAa,IAAIlM,SAAS8S,EAAU7S,OAAQ,EAAG0S,GAC3CvK,GAAO2K,KACV3K,GAAO2K,KAAKD,EAAW,EAAGtP,EAAOhE,GAEjCsT,EAAUzU,IAAI+J,GAAOhF,MAAMI,EAAOhE,IACnCtD,IAAYsH,EACZA,EAAQ,EACR2I,GAAU2G,EAAU/S,OAAS,GACtBqI,GAAS0K,GAEjB,IAAIE,EAAiB,IACjBC,EAA0B,IAQ9B,SAAUC,EAAuBhQ,EAAQiQ,EAAmBC,GAC3D,IAAI/V,EAAc6F,EAAO7F,YACzB,GAAIA,IAAgBc,OAAQ,CAC3B,IAAIlB,GAAoC,IAAvBgQ,EAAQhQ,WACrBA,EACHqU,EAAYpO,EAAQ,MAEpBmQ,GAAkBlV,OAAOuQ,KAAKxL,GAAQnD,OAAQ,KAC/C,IAAK,IAAIvB,KAAO0E,EAAQ,CACvB,IAAIlC,EAAQkC,EAAO1E,GACdvB,GAAYiR,EAAO1P,GACpBwC,GAA0B,iBAAVA,EACfmS,EAAkB3U,SACd0U,EAAuBlS,EAAOmS,EAAkB3U,UAEhD8U,EAAUtS,EAAOmS,EAAmB3U,GACtC0P,EAAOlN,EACd,CACL,MAAU,GAAI3D,IAAgBmD,MAAO,CACjC,IAAIT,EAASmD,EAAOnD,OACpBkP,GAAiBlP,GACjB,IAAK,IAAIgD,EAAI,EAAGA,EAAIhD,EAAQgD,IAAK,CAChC,IAAI/B,EAAQkC,EAAOH,GACf/B,IAA2B,iBAAVA,GAAsB9E,GAAWsH,EAAQwP,GACzDG,EAAkBI,cACdL,EAAuBlS,EAAOmS,EAAkBI,eAEhDD,EAAUtS,EAAOmS,EAAmB,WACtCjF,EAAOlN,EACd,CACD,MAAM,GAAIkC,EAAOoJ,OAAOoF,UAAW,CACnCtJ,GAAOlM,MAAc,IACrB,IAAK,IAAI8E,KAASkC,EACblC,IAA2B,iBAAVA,GAAsB9E,GAAWsH,EAAQwP,GACzDG,EAAkBI,cACdL,EAAuBlS,EAAOmS,EAAkBI,eAEhDD,EAAUtS,EAAOmS,EAAmB,WACtCjF,EAAOlN,GAEfoH,GAAOlM,MAAc,GACzB,MAAc4V,GAAO5O,IACjBmQ,GAAkBnQ,EAAOnC,KAAM,UACzBqH,GAAO/E,SAASG,EAAOtH,UACvBgH,EACNsQ,KACUtQ,EAAOoJ,OAAOuF,gBACxBzJ,GAAOlM,MAAc,UACfkM,GAAO/E,SAASG,EAAOtH,UACvBgH,EACNsQ,IACApL,GAAOlM,MAAc,KAErBgS,EAAOhL,GAEJkQ,GAAiBlX,GAAWsH,QAAa4E,GAAO/E,SAASG,EAAOtH,IAC3DA,GAAWsH,EAAQwP,UACrB5K,GAAO/E,SAASG,EAAOtH,IAC7BsX,IAED,CACD,SAAUF,EAAUtS,EAAOmS,EAAmB3U,GAC7C,IAAIiV,EAAUvX,GAAWsH,EACzB,IACC0K,EAAOlN,GACH9E,GAAWsH,EAAQwP,UAChB5K,GAAO/E,SAASG,EAAOtH,IAC7BsX,IAQD,CANC,MAAOvX,GACR,IAAIA,EAAM0V,mBAIH,MAAM1V,EAHZkX,EAAkB3U,GAAO,GACzBtC,GAAWsH,EAAQiQ,QACZP,EAAuBpT,KAAKhC,KAAMkD,EAAOmS,EAAkB3U,GAEnE,CACD,CACD,SAASgV,IACRR,EAAiBC,EACjBhG,EAAQiB,OAAO,KAAMiB,GACrB,CACD,SAASuE,EAAc1S,EAAO1D,EAASqW,GAKtC,OAHCX,EADG1V,GAAWA,EAAQ0V,eACLC,EAA0B3V,EAAQ0V,eAElC,IACdhS,GAA0B,iBAAVA,GACnBiM,EAAQiB,OAAO,KAAMiB,IACdwE,EAAe3S,EAAOiM,EAAQkG,oBAAsBlG,EAAQkG,kBAAoB,CAAA,IAAK,IAEtF,CAAClG,EAAQiB,OAAOlN,GACvB,CAED4S,eAAgBC,EAA4B7S,EAAOmS,GAClD,IAAK,IAAIW,KAAgBZ,EAAuBlS,EAAOmS,GAAmB,GAAO,CAChF,IAAI9V,EAAcyW,EAAazW,YAC/B,GAAIA,IAAgB0O,IAAa1O,IAAgB+C,iBAC1C0T,OACF,GAAIhC,GAAOgC,GAAe,CAC9B,IACItO,EADAuO,EAASD,EAAaE,SAASC,YAEnC,OAASzO,QAAauO,EAAO3S,QAAQ8S,YAC9B1O,EAAKxE,KAEZ,MAAM,GAAI8S,EAAaxH,OAAOuF,eAC9B,UAAW,IAAIsC,KAAcL,EAC5BN,IACIW,QACIN,EAA4BM,EAAYhB,EAAkBS,QAAUT,EAAkBS,MAAQ,CAAE,UAC7F3G,EAAQiB,OAAOiG,cAGrBL,CAEP,CACD,CA1HDhW,KAAKsW,iBAAmB,SAASpT,EAAO1D,GACvC,OAAOoW,EAAc1S,EAAO1D,EAAS4V,EACrC,EACDpV,KAAKuW,sBAAwB,SAASrT,EAAO1D,GAC5C,OAAOoW,EAAc1S,EAAO1D,EAASuW,EACrC,CAsHD,CACDS,UAAUrU,GAETmI,GAASnI,EACTiM,GAAa,IAAIlM,SAASoI,GAAOnI,OAAQmI,GAAOlI,WAAYkI,GAAOjI,YACnEjE,GAAW,CACX,CACDqY,kBACKzW,KAAKF,aACRE,KAAKF,WAAa,IACfE,KAAKwC,eACRxC,KAAKwC,kBAAe7C,EACrB,CACDwS,mBACC,IAAIuE,EAAc1W,KAAKqM,eAAiB,EACxCrM,KAAKqM,cAAgBqK,EAAc,EACnC,IAAIC,EAAiB3W,KAAKF,WAAWwF,MAAM,GACvC6G,EAAa,IAAIyK,GAAWD,EAAgB3W,KAAKwC,aAAcxC,KAAKqM,eACpEwK,EAAc7W,KAAKyP,WAAWtD,GAChC2K,IAAmBA,GAAkBA,EAAenM,SAAW,IAAM+L,IAavE,OAZoB,IAAhBG,GAEH1K,EAAanM,KAAKH,aAAe,CAAE,EACnCG,KAAKF,WAAaqM,EAAWrM,YAAc,GAC3CE,KAAKwC,aAAe2J,EAAWzN,aAC/BsB,KAAKqM,cAAgBF,EAAWxB,QAChC3K,KAAKF,WAAWiR,OAAS/Q,KAAKF,WAAWmC,QAGzC0U,EAAetV,SAAQ,CAAC6E,EAAWjB,IAAMjF,KAAKF,WAAWmF,GAAKiB,IAGxD2Q,CACP,EAEF,SAAStB,GAAkBtT,EAAQ8U,GAC9B9U,EAAS,GACZqI,GAAOlM,MAAc2Y,EAAa9U,EAC1BA,EAAS,KACjBqI,GAAOlM,MAA2B,GAAb2Y,EACrBzM,GAAOlM,MAAc6D,GACXA,EAAS,OACnBqI,GAAOlM,MAA2B,GAAb2Y,EACrBzM,GAAOlM,MAAc6D,GAAU,EAC/BqI,GAAOlM,MAAuB,IAAT6D,IAErBqI,GAAOlM,MAA2B,GAAb2Y,EACrB3I,GAAWmC,UAAUnS,GAAU6D,GAC/B7D,IAAY,EAGd,CACA,MAAMwY,GACLrX,YAAYO,EAAYiD,EAAQ4H,GAC/B3K,KAAKF,WAAaA,EAClBE,KAAKtB,aAAeqE,EACpB/C,KAAK2K,QAAUA,CACf,EAGF,SAASwG,GAAiBlP,GACrBA,EAAS,GACZqI,GAAOlM,MAAc,IAAO6D,EACpBA,EAAS,KACjBqI,GAAOlM,MAAc,IACrBkM,GAAOlM,MAAc6D,GACXA,EAAS,OACnBqI,GAAOlM,MAAc,IACrBkM,GAAOlM,MAAc6D,GAAU,EAC/BqI,GAAOlM,MAAuB,IAAT6D,IAErBqI,GAAOlM,MAAc,IACrBgQ,GAAWmC,UAAUnS,GAAU6D,GAC/B7D,IAAY,EAEd,CAEA,MAAM4Y,GAAkC,oBAATC,KAAuB,WAAU,EAAKA,KACrE,SAASjD,GAAO5O,GACf,GAAIA,aAAkB4R,GACrB,OAAO,EACR,IAAI/N,EAAM7D,EAAOoJ,OAAO0I,aACxB,MAAe,SAARjO,GAA0B,SAARA,CAC1B,CACA,SAASiI,GAAsBhO,EAAOxE,GACrC,cAAcwE,GACb,IAAK,SACJ,GAAIA,EAAMjB,OAAS,EAAG,CACrB,GAAIvD,EAAauS,UAAU/N,IAAU,GAAKxE,EAAaqE,OAAOd,QAAUvD,EAAasS,UACpF,OACD,IAAImG,EAAezY,EAAaiC,IAAIuC,GACpC,GAAIiU,EACyB,KAAtBA,EAAa3E,OAClB9T,EAAaqE,OAAOK,KAAKF,QAM1B,GAHAxE,EAAa6B,IAAI2C,EAAO,CACvBsP,MAAO,IAEJ9T,EAAagR,qBAAsB,CACtC,IAAI6C,EAAS7T,EAAagR,qBAAqB/O,IAAIuC,GAC/CqP,EACHA,EAAOC,QAEP9T,EAAagR,qBAAqBnP,IAAI2C,EAAO,CAC5CsP,MAAO,GAET,CAEF,CACD,MACD,IAAK,SACJ,GAAItP,EACH,GAAIA,aAAiBR,MACpB,IAAK,IAAIuC,EAAI,EAAG2D,EAAI1F,EAAMjB,OAAQgD,EAAI2D,EAAG3D,IACxCiM,GAAsBhO,EAAM+B,GAAIvG,OAG3B,CACN,IAAI0Y,GAAe1Y,EAAayQ,QAAQhQ,WACxC,IAAK,IAAIuB,KAAOwC,EACXA,EAAMrC,eAAeH,KACpB0W,GACHlG,GAAsBxQ,EAAKhC,GAC5BwS,GAAsBhO,EAAMxC,GAAMhC,GAGpC,CAEF,MACD,IAAK,WAAY2Y,QAAQ3N,IAAIxG,GAE/B,CACA,MAAM0H,GAA0E,GAAlD,IAAItI,WAAW,IAAIuI,YAAY,CAAC,IAAI1I,QAAQ,GAoG1E,SAASmV,GAAkBrO,EAAKhG,GAG/B,OAFK2H,IAAyB3H,EAAO,IACpCgG,GAAO,GACD,CACNA,IAAKA,EACLmH,OAAQ,SAAwBmH,EAAYnH,GAC3C,IAAInO,EAASsV,EAAWlV,WACpBwM,EAAS0I,EAAWnV,YAAc,EAClCD,EAASoV,EAAWpV,QAAUoV,EAClCnH,EAAOtC,GAAgB3I,GAAOqS,KAAKrV,EAAQ0M,EAAQ5M,GAClD,IAAIK,WAAWH,EAAQ0M,EAAQ5M,GAChC,EAEH,CACA,SAASwV,GAAYtV,EAAQqP,GAC5B,IAAIvP,EAASE,EAAOE,WAChBJ,EAAS,GACZqI,GAAOlM,MAAc,GAAO6D,EAClBA,EAAS,KACnBqI,GAAOlM,MAAc,GACrBkM,GAAOlM,MAAc6D,GACXA,EAAS,OACnBqI,GAAOlM,MAAc,GACrBkM,GAAOlM,MAAc6D,GAAU,EAC/BqI,GAAOlM,MAAuB,IAAT6D,IAErBqI,GAAOlM,MAAc,GACrBgQ,GAAWmC,UAAUnS,GAAU6D,GAC/B7D,IAAY,GAETA,GAAW6D,GAAUqI,GAAOrI,QAC/BuP,EAASpT,GAAW6D,GAIrBqI,GAAO/J,IAAI4B,EAAOA,OAASA,EAAS,IAAIG,WAAWH,GAAS/D,IAC5DA,IAAY6D,CACb,CA2BA,SAASqP,GAAa5L,EAAO0K,GAC5BhC,GAAWmC,UAAU/R,GAAeJ,SAAWsH,EAAOtH,GAAWI,GAAeJ,SAAWsH,EAAQ,GACnG,IAAIgS,EAAelZ,GACnBA,GAAiB,KACjB4R,EAAOsH,EAAa,IACpBtH,EAAOsH,EAAa,GACrB,CAzKA/J,EAAmB,CAAExE,KAAMuB,IAAKnI,MAAOyH,OAAQ9C,EAAKyQ,YACnDrV,WAAYyI,kBAAmBF,YAAaG,YACnB,oBAAlBC,eAAgC,WAAW,EAAKA,eAAgBC,UAAWC,WAAYC,WACtE,oBAAjBC,cAA+B,WAAW,EAAKA,cACtDrC,aAAcsC,aAAcsL,IAG7BlJ,EAAa,CAAC,CACbzE,IAAK,EACLmH,OAAOwH,EAAMxH,GACZ,IAAIyH,EAAUD,EAAKE,UAAY,KAC1B9X,KAAK+X,gBAA6C,IAA3BH,EAAKI,oBAA4BH,GAAW,GAAKA,EAAU,YAEtFvN,GAAOlM,MAAc,GACrBgQ,GAAWmC,UAAUnS,GAAUyZ,GAC/BzZ,IAAY,IAGZkM,GAAOlM,MAAc,IACrBgQ,GAAWkF,WAAWlV,GAAUyZ,GAChCzZ,IAAY,EAEb,GACC,CACF6K,IAAK,IACLmH,OAAO7P,EAAK6P,GAEXA,EADY1N,MAAM8U,KAAKjX,GAEvB,GACC,CACF0I,IAAK,GACLmH,OAAOjS,EAAOiS,GACbA,EAAO,CAAEjS,EAAM+C,KAAM/C,EAAMuF,SAC3B,GACC,CACFuF,IAAK,GACLmH,OAAO6H,EAAO7H,GACbA,EAAO,CAAE,SAAU6H,EAAMxW,OAAQwW,EAAMC,OACvC,GACC,CACFvE,OAAO1K,GACCA,EAAIA,IAEZmH,OAAOnH,EAAKmH,GACXA,EAAOnH,EAAI/F,MACX,GACC,CACFkN,OAAO+H,EAAa/H,EAAQoB,GAC3BiG,GAAYU,EAAa3G,EACzB,GACC,CACFmC,OAAO4D,GACN,GAAIA,EAAWhY,cAAgB+C,aAC1BtC,KAAKoY,eAAiBtK,KAAwC,IAAvB9N,KAAKoY,eAC/C,OAAO,EAET,EACDhI,OAAOmH,EAAYnH,EAAQoB,GAC1BiG,GAAYF,EAAY/F,EACxB,GAED8F,GAAkB,GAAI,GACtBA,GAAkB,GAAI,GACtBA,GAAkB,GAAI,GACtBA,GAAkB,GAAI,GACtBA,GAAkB,GAAI,GACtBA,GAAkB,GAAI,GACtBA,GAAkB,GAAI,GACtBA,GAAkB,GAAI,GACtBA,GAAkB,GAAI,GACtBA,GAAkB,GAAI,GACvB,CACClH,OAAOjE,EAAYiE,GAClB,IAAI1R,EAAeyN,EAAWzN,cAAgB,GAC1CgQ,EAAmBvC,EAAWrM,YAAc,GAChD,GAAIpB,EAAaqE,OAAOd,OAAS,EAAG,CACnCqI,GAAOlM,MAAc,IACrBkM,GAAOlM,MAAc,GACrB+S,GAAiB,GACjB,IAAIC,EAAc1S,EAAaqE,OAC/BqN,EAAOgB,GACPD,GAAiB,GACjBA,GAAiB,GACjBxB,gBAAkBtP,OAAOwP,OAAOD,uBAAyB,MACzD,IAAK,IAAI3K,EAAI,EAAG2D,EAAIwI,EAAYnP,OAAQgD,EAAI2D,EAAG3D,IAC9C0K,gBAAgByB,EAAYnM,IAAMA,CAEnC,CACD,GAAIyJ,EAAkB,CACrBN,GAAWmC,UAAUnS,GAAU,YAC/BA,IAAY,EACZ,IAAIia,EAAc3J,EAAiBpJ,MAAM,GACzC+S,EAAYC,QAAQ,OACpBD,EAAYjV,KAAK,IAAI8D,EAAIiF,EAAWxB,QAAS,aAC7CyF,EAAOiI,EACP,MACAjI,EAAO,IAAIlJ,EAAIiF,EAAWxB,QAAS,YACnC,IAmFH,IAAI4N,GAAiB,IAAI9J,GAAQ,CAAEtP,YAAY,IACnC,MAACiR,GAASmI,GAAenI,OACxBkG,GAAmBiC,GAAejC,iBAClCC,GAAwBgC,GAAehC,uBAGvClJ,MAAEA,GAAKC,OAAEA,GAAMC,cAAEA,GAAaC,YAAEA,IAAgBJ,EAChDiD,GAAoB,IACpB+B,GAAoB,KACpBf,GAAoB,2JAlB1B,SAAsBtK,GAC5B,GAAIA,EAAUyR,MAAO,CACpB,IAAKzR,EAAUqJ,OACd,MAAM,IAAI7N,MAAM,oCACjBoL,EAAiB2K,QAAQvR,EAAUyR,OACnC9K,EAAW4K,QAAQvR,EACnB,EDZK,SAAsBA,GAC5B/H,EAAkB+H,EAAUkC,KAAOlC,EAAUpF,MAC9C,CCWC8W,CAAmB1R,EACpB,0CCpoCO,SAAqB2R,EAAgBlZ,EAAU,IACpD,IAAKkZ,GAA4C,iBAAnBA,EAC5B,MAAM,IAAInW,MAAM,8FAGlB,MAAMxE,EAAU,IAAIuB,EAAQE,GAC5B,IAAIgE,EACJ,MAAMmV,EAAUC,IACd,IAAIC,EAEArV,IACFoV,EAAQzT,OAAOvC,OAAO,CAACY,EAAYoV,IACnCpV,OAAa7D,GAGf,IACEkZ,EAAS9a,EAAQ+E,eAAe8V,EAQjC,CAPC,MAAOE,GACP,IAAIA,EAAItV,WAIN,MAAMsV,EAHNtV,EAAaoV,EAAMtT,MAAMwT,EAAI9V,cAC7B6V,EAASC,EAAI/V,MAIhB,CACD,OAAO8V,GAGT,MAA+C,mBAApCH,EAAelK,OAAOoF,UACxB,YACL,IAAK,MAAM1Q,KAASwV,QACVC,EAAOzV,EAElB,CAJM,GAKkD,mBAAzCwV,EAAelK,OAAOuF,eAC/B,kBACL,UAAW,MAAM7Q,KAASwV,QAChBC,EAAOzV,EAElB,CAJM,QADF,CAOT,+FA1EO,SAAqB6V,EAAgBvZ,EAAU,IACpD,GAAKuZ,GAA4C,iBAAnBA,EAEvB,IAA+C,mBAApCA,EAAevK,OAAOoF,UACtC,OAQJ,UAA2BmF,EAAgBvZ,GACzC,MAAM2P,EAAU,IAAIV,GAAQjP,GAC5B,IAAK,MAAM0D,KAAS6V,QACZ5J,EAAQiB,OAAOlN,EAEzB,CAbW8V,CAAeD,EAAgBvZ,GACjC,GAAmC,mBAAxBuZ,EAAeE,MAAuE,mBAAzCF,EAAevK,OAAOuF,eACnF,OAaJ+B,gBAAkCiD,EAAgBvZ,GAChD,MAAM2P,EAAU,IAAIV,GAAQjP,GAC5B,UAAW,MAAM0D,KAAS6V,QAClB5J,EAAQiB,OAAOlN,EAEzB,CAlBWgW,CAAgBH,EAAgBvZ,GAEvC,MAAM,IAAI+C,MAAM,6FACjB,CAPC,MAAM,IAAIA,MAAM,yFAQpB,iCFieyC,iBA6rBlC,SAAsB4W,GAC5B9U,EAAS,GAAK8U,EACd,IAAIzU,EAAaC,GAAsB,IAAbP,EAAQ,KAAc,EAAMA,EAAQ,IAAM,GACpE,OAASM,EAAayU,GAAiBA,EAAgB,EAAI,IAAO,KAAS,GAAKzU,CACjF"}