import { LexValue } from '@atproto/lexicon';
import { CID } from 'multiformats/cid';
export declare class BlockMap {
    private map;
    add(value: LexValue): Promise<CID>;
    set(cid: CID, bytes: Uint8Array): void;
    get(cid: CID): Uint8Array | undefined;
    getMany(cids: CID[]): {
        blocks: BlockMap;
        missing: CID[];
    };
    has(cid: CID): boolean;
    clear(): void;
    forEach(cb: (bytes: Uint8Array, cid: CID) => void): void;
    entries(): Entry[];
    addMap(toAdd: BlockMap): void;
    get size(): number;
    get byteSize(): number;
    equals(other: BlockMap): boolean;
}
declare type Entry = {
    cid: CID;
    bytes: Uint8Array;
};
export default BlockMap;
