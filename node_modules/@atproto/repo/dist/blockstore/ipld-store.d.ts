import { CID } from 'multiformats/cid';
import { BlockWriter } from '@ipld/car/writer';
import { check } from '@atproto/common';
import { BlockReader } from '@ipld/car/api';
import CidSet from '../cid-set';
export declare abstract class IpldStore {
    staged: Map<string, Uint8Array>;
    constructor();
    abstract getSavedBytes(cid: CID): Promise<Uint8Array | null>;
    abstract hasSavedBlock(cid: CID): Promise<boolean>;
    abstract saveStaged(): Promise<void>;
    abstract destroySaved(): Promise<void>;
    stageBytes(k: CID, v: Uint8Array): Promise<void>;
    stage(value: unknown): Promise<CID>;
    getBytes(cid: CID): Promise<Uint8Array>;
    get<T>(cid: CID, schema: check.Def<T>): Promise<T>;
    getUnchecked(cid: CID): Promise<unknown>;
    has(cid: CID): Promise<boolean>;
    isMissing(cid: CID): Promise<boolean>;
    checkMissing(cids: CidSet): Promise<CidSet>;
    clearStaged(): Promise<void>;
    destroy(): Promise<void>;
    addToCar(car: BlockWriter, cid: CID): Promise<void>;
    stageCar(buf: Uint8Array): Promise<CID>;
    stageCarBlocks(car: BlockReader): Promise<void>;
}
export default IpldStore;
