import { CID } from 'multiformats/cid';
import { BlockWriter } from '@ipld/car/writer';
import { Block as CarBlock } from '@ipld/car/api';
import { LexValue, RepoRecord } from '@atproto/lexicon';
import DataDiff from './data-diff';
import { RepoStorage } from './storage';
import { Commit, RecordPath, RecordWriteDescript, UnsignedCommit, WriteLog } from './types';
import BlockMap from './block-map';
import { Keypair } from '@atproto/crypto';
export declare function verifyIncomingCarBlocks(car: AsyncIterable<CarBlock>): AsyncIterable<CarBlock>;
export declare const writeCar: (root: CID | null, fn: (car: BlockWriter) => Promise<void>) => Promise<Uint8Array>;
export declare const blocksToCar: (root: CID | null, blocks: BlockMap) => Promise<Uint8Array>;
export declare const readCar: (bytes: Uint8Array) => Promise<{
    roots: CID[];
    blocks: BlockMap;
}>;
export declare const readCarWithRoot: (bytes: Uint8Array) => Promise<{
    root: CID;
    blocks: BlockMap;
}>;
export declare const getWriteLog: (storage: RepoStorage, latest: CID, earliest: CID | null) => Promise<WriteLog>;
export declare const diffToWriteDescripts: (diff: DataDiff, blocks: BlockMap) => Promise<RecordWriteDescript[]>;
export declare const collapseWriteLog: (log: WriteLog) => RecordWriteDescript[];
export declare const collapseDiffs: (diffs: DataDiff[]) => DataDiff;
export declare const parseDataKey: (key: string) => RecordPath;
export declare const formatDataKey: (collection: string, rkey: string) => string;
export declare const metaEqual: (a: Commit, b: Commit) => boolean;
export declare const signCommit: (unsigned: UnsignedCommit, keypair: Keypair) => Promise<Commit>;
export declare const verifyCommitSig: (commit: Commit, didKey: string) => Promise<boolean>;
export declare const cborToLex: (val: Uint8Array) => LexValue;
export declare const cborToLexRecord: (val: Uint8Array) => RepoRecord;
export declare const cidForRecord: (val: LexValue) => Promise<CID>;
