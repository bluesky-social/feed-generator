import { CID } from 'multiformats/cid';
import { CommitData } from '../types';
import BlockMap from '../block-map';
import RepoStorage from './repo-storage';
export declare class MemoryBlockstore extends RepoStorage {
    blocks: BlockMap;
    head: CID | null;
    constructor(blocks?: BlockMap);
    getHead(): Promise<CID | null>;
    getBytes(cid: CID): Promise<Uint8Array | null>;
    has(cid: CID): Promise<boolean>;
    getBlocks(cids: CID[]): Promise<{
        blocks: BlockMap;
        missing: CID[];
    }>;
    putBlock(cid: CID, block: Uint8Array): Promise<void>;
    putMany(blocks: BlockMap): Promise<void>;
    indexCommits(commits: CommitData[]): Promise<void>;
    updateHead(cid: CID, _prev: CID | null): Promise<void>;
    applyCommit(commit: CommitData): Promise<void>;
    getCommitPath(latest: CID, earliest: CID | null): Promise<CID[] | null>;
    getBlocksForCommits(commits: CID[]): Promise<{
        [commit: string]: BlockMap;
    }>;
    sizeInBytes(): Promise<number>;
    destroy(): Promise<void>;
}
export default MemoryBlockstore;
