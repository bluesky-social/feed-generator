import { CID } from 'multiformats/cid';
import * as crypto from '@atproto/crypto';
import { Commit, DataStore, RecordCreateOp, RecordWriteOp, CommitData } from './types';
import { RepoStorage } from './storage';
import { ReadableRepo } from './readable-repo';
declare type Params = {
    storage: RepoStorage;
    data: DataStore;
    commit: Commit;
    cid: CID;
};
export declare class Repo extends ReadableRepo {
    storage: RepoStorage;
    constructor(params: Params);
    static formatInitCommit(storage: RepoStorage, did: string, keypair: crypto.Keypair, initialWrites?: RecordCreateOp[]): Promise<CommitData>;
    static createFromCommit(storage: RepoStorage, commit: CommitData): Promise<Repo>;
    static create(storage: RepoStorage, did: string, keypair: crypto.Keypair, initialWrites?: RecordCreateOp[]): Promise<Repo>;
    static load(storage: RepoStorage, cid?: CID): Promise<Repo>;
    formatCommit(toWrite: RecordWriteOp | RecordWriteOp[], keypair: crypto.Keypair): Promise<CommitData>;
    applyCommit(commitData: CommitData): Promise<Repo>;
    applyWrites(toWrite: RecordWriteOp | RecordWriteOp[], keypair: crypto.Keypair): Promise<Repo>;
}
export default Repo;
