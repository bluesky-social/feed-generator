import { z } from 'zod';
import { BlockWriter } from '@ipld/car/writer';
import { CID } from 'multiformats';
import BlockMap from './block-map';
import { RepoRecord } from '@atproto/lexicon';
declare const unsignedCommit: z.ZodObject<{
    did: z.ZodString;
    version: z.ZodNumber;
    prev: z.ZodNullable<z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>>;
    data: z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>;
}, "strip", z.ZodTypeAny, {
    data: CID;
    did: string;
    version: number;
    prev: CID | null;
}, {
    data?: any;
    prev?: any;
    did: string;
    version: number;
}>;
export declare type UnsignedCommit = z.infer<typeof unsignedCommit> & {
    sig?: never;
};
declare const commit: z.ZodObject<{
    did: z.ZodString;
    version: z.ZodNumber;
    prev: z.ZodNullable<z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>>;
    data: z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>;
    sig: z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>;
}, "strip", z.ZodTypeAny, {
    data: CID;
    did: string;
    version: number;
    prev: CID | null;
    sig: Uint8Array;
}, {
    data?: any;
    prev?: any;
    did: string;
    version: number;
    sig: Uint8Array;
}>;
export declare type Commit = z.infer<typeof commit>;
export declare const schema: {
    commit: z.ZodObject<{
        did: z.ZodString;
        version: z.ZodNumber;
        prev: z.ZodNullable<z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>>;
        data: z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>;
        sig: z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>;
    }, "strip", z.ZodTypeAny, {
        data: CID;
        did: string;
        version: number;
        prev: CID | null;
        sig: Uint8Array;
    }, {
        data?: any;
        prev?: any;
        did: string;
        version: number;
        sig: Uint8Array;
    }>;
    cid: z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>;
    bytes: z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>;
    string: z.ZodString;
    array: z.ZodArray<z.ZodUnknown, "many">;
    map: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    unknown: z.ZodUnknown;
};
export declare const def: {
    commit: {
        name: string;
        schema: z.ZodObject<{
            did: z.ZodString;
            version: z.ZodNumber;
            prev: z.ZodNullable<z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>>;
            data: z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>;
            sig: z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>;
        }, "strip", z.ZodTypeAny, {
            data: CID;
            did: string;
            version: number;
            prev: CID | null;
            sig: Uint8Array;
        }, {
            data?: any;
            prev?: any;
            did: string;
            version: number;
            sig: Uint8Array;
        }>;
    };
    cid: import("@atproto/common-web/src/check").Def<CID>;
    bytes: import("@atproto/common-web/src/check").Def<Uint8Array>;
    string: import("@atproto/common-web/src/check").Def<string>;
    map: import("@atproto/common-web/src/check").Def<Record<string, unknown>>;
    unknown: import("@atproto/common-web/src/check").Def<unknown>;
};
export declare enum WriteOpAction {
    Create = "create",
    Update = "update",
    Delete = "delete"
}
export declare type RecordCreateOp = {
    action: WriteOpAction.Create;
    collection: string;
    rkey: string;
    record: RepoRecord;
};
export declare type RecordUpdateOp = {
    action: WriteOpAction.Update;
    collection: string;
    rkey: string;
    record: RepoRecord;
};
export declare type RecordDeleteOp = {
    action: WriteOpAction.Delete;
    collection: string;
    rkey: string;
};
export declare type RecordWriteOp = RecordCreateOp | RecordUpdateOp | RecordDeleteOp;
export declare type RecordCreateDescript = RecordCreateOp & {
    cid: CID;
};
export declare type RecordUpdateDescript = RecordUpdateOp & {
    prev: CID;
    cid: CID;
};
export declare type RecordDeleteDescript = RecordDeleteOp & {
    cid: CID;
};
export declare type RecordWriteDescript = RecordCreateDescript | RecordUpdateDescript | RecordDeleteDescript;
export declare type WriteLog = RecordWriteDescript[][];
export declare type CommitBlockData = {
    commit: CID;
    blocks: BlockMap;
};
export declare type CommitData = CommitBlockData & {
    prev: CID | null;
};
export declare type RepoUpdate = CommitData & {
    ops: RecordWriteOp[];
};
export declare type CollectionContents = Record<string, RepoRecord>;
export declare type RepoContents = Record<string, CollectionContents>;
export declare type RecordPath = {
    collection: string;
    rkey: string;
};
export declare type RecordClaim = {
    collection: string;
    rkey: string;
    record: RepoRecord | null;
};
export declare type DataValue = {
    key: string;
    value: CID;
};
export interface DataStore {
    add(key: string, value: CID): Promise<DataStore>;
    update(key: string, value: CID): Promise<DataStore>;
    delete(key: string): Promise<DataStore>;
    get(key: string): Promise<CID | null>;
    list(count?: number, after?: string, before?: string): Promise<DataValue[]>;
    listWithPrefix(prefix: string, count?: number): Promise<DataValue[]>;
    getUnstoredBlocks(): Promise<{
        root: CID;
        blocks: BlockMap;
    }>;
    writeToCarStream(car: BlockWriter): Promise<void>;
    cidsForPath(key: string): Promise<CID[]>;
}
export {};
