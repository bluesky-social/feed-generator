import { CID } from 'multiformats/cid';
import { ReadableBlockstore, RepoStorage } from './storage';
import DataDiff from './data-diff';
import ReadableRepo from './readable-repo';
import CidSet from './cid-set';
import { RecordClaim, RepoContents } from './types';
export declare type VerifiedCheckout = {
    contents: RepoContents;
    newCids: CidSet;
};
export declare const verifyCheckout: (storage: ReadableBlockstore, head: CID, did: string, signingKey: string) => Promise<VerifiedCheckout>;
export declare type VerifiedUpdate = {
    commit: CID;
    prev: CID | null;
    diff: DataDiff;
    newCids: CidSet;
};
export declare const verifyFullHistory: (storage: RepoStorage, head: CID, did: string, signingKey: string) => Promise<VerifiedUpdate[]>;
export declare const verifyUpdates: (repo: ReadableRepo, updateStorage: RepoStorage, updateRoot: CID, did: string, signingKey: string) => Promise<VerifiedUpdate[]>;
export declare const verifyCommitPath: (baseRepo: ReadableRepo, storage: ReadableBlockstore, commitPath: CID[], did: string, signingKey: string) => Promise<VerifiedUpdate[]>;
export declare const verifyProofs: (proofs: Uint8Array, claims: RecordClaim[], did: string, didKey: string) => Promise<{
    verified: RecordClaim[];
    unverified: RecordClaim[];
}>;
export declare const verifyRecords: (proofs: Uint8Array, did: string, signingKey: string) => Promise<RecordClaim[]>;
export declare class RepoVerificationError extends Error {
}
