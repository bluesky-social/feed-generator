import { CID } from 'multiformats/cid';
import { z } from 'zod';
export declare const typedJsonBlobRef: z.ZodObject<{
    $type: z.ZodLiteral<"blob">;
    ref: z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>;
    mimeType: z.ZodString;
    size: z.ZodNumber;
}, "strict", z.ZodTypeAny, {
    $type: "blob";
    ref: CID;
    mimeType: string;
    size: number;
}, {
    ref?: any;
    $type: "blob";
    mimeType: string;
    size: number;
}>;
export declare type TypedJsonBlobRef = z.infer<typeof typedJsonBlobRef>;
export declare const untypedJsonBlobRef: z.ZodObject<{
    cid: z.ZodString;
    mimeType: z.ZodString;
}, "strict", z.ZodTypeAny, {
    mimeType: string;
    cid: string;
}, {
    mimeType: string;
    cid: string;
}>;
export declare type UntypedJsonBlobRef = z.infer<typeof untypedJsonBlobRef>;
export declare const jsonBlobRef: z.ZodUnion<[z.ZodObject<{
    $type: z.ZodLiteral<"blob">;
    ref: z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>;
    mimeType: z.ZodString;
    size: z.ZodNumber;
}, "strict", z.ZodTypeAny, {
    $type: "blob";
    ref: CID;
    mimeType: string;
    size: number;
}, {
    ref?: any;
    $type: "blob";
    mimeType: string;
    size: number;
}>, z.ZodObject<{
    cid: z.ZodString;
    mimeType: z.ZodString;
}, "strict", z.ZodTypeAny, {
    mimeType: string;
    cid: string;
}, {
    mimeType: string;
    cid: string;
}>]>;
export declare type JsonBlobRef = z.infer<typeof jsonBlobRef>;
export declare class BlobRef {
    ref: CID;
    mimeType: string;
    size: number;
    original: JsonBlobRef;
    constructor(ref: CID, mimeType: string, size: number, original?: JsonBlobRef);
    static asBlobRef(obj: unknown): BlobRef | null;
    static fromJsonRef(json: JsonBlobRef): BlobRef;
    ipld(): TypedJsonBlobRef;
    toJSON(): unknown;
}
