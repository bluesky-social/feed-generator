export declare const readFromGenerator: <T>(gen: AsyncGenerator<T, any, unknown>, isDone: (last?: T | undefined) => Promise<boolean> | boolean, waitFor?: Promise<unknown>, maxLength?: number) => Promise<T[]>;
export declare type Deferrable = {
    resolve: () => void;
    complete: Promise<void>;
};
export declare const createDeferrable: () => Deferrable;
export declare const createDeferrables: (count: number) => Deferrable[];
export declare const allComplete: (deferrables: Deferrable[]) => Promise<void>;
export declare class AsyncBuffer<T> {
    maxSize?: number | undefined;
    private buffer;
    private promise;
    private resolve;
    constructor(maxSize?: number | undefined);
    get curr(): T[];
    get size(): number;
    resetPromise(): void;
    push(item: T): void;
    pushMany(items: T[]): void;
    events(): AsyncGenerator<T>;
}
export declare class AsyncBufferFullError extends Error {
    constructor(maxSize: number);
}
