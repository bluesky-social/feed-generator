import { z } from 'zod';
export declare enum FrameType {
    Message = 1,
    Error = -1
}
export declare const messageFrameHeader: z.ZodObject<{
    op: z.ZodLiteral<FrameType.Message>;
    t: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    t?: string | undefined;
    op: FrameType.Message;
}, {
    t?: string | undefined;
    op: FrameType.Message;
}>;
export declare type MessageFrameHeader = z.infer<typeof messageFrameHeader>;
export declare const errorFrameHeader: z.ZodObject<{
    op: z.ZodLiteral<FrameType.Error>;
}, "strip", z.ZodTypeAny, {
    op: FrameType.Error;
}, {
    op: FrameType.Error;
}>;
export declare const errorFrameBody: z.ZodObject<{
    error: z.ZodString;
    message: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message?: string | undefined;
    error: string;
}, {
    message?: string | undefined;
    error: string;
}>;
export declare type ErrorFrameHeader = z.infer<typeof errorFrameHeader>;
export declare type ErrorFrameBody<T extends string = string> = {
    error: T;
} & z.infer<typeof errorFrameBody>;
export declare const frameHeader: z.ZodUnion<[z.ZodObject<{
    op: z.ZodLiteral<FrameType.Message>;
    t: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    t?: string | undefined;
    op: FrameType.Message;
}, {
    t?: string | undefined;
    op: FrameType.Message;
}>, z.ZodObject<{
    op: z.ZodLiteral<FrameType.Error>;
}, "strip", z.ZodTypeAny, {
    op: FrameType.Error;
}, {
    op: FrameType.Error;
}>]>;
export declare type FrameHeader = z.infer<typeof frameHeader>;
export declare class DisconnectError extends Error {
    wsCode: CloseCode;
    xrpcCode?: string | undefined;
    constructor(wsCode?: CloseCode, xrpcCode?: string | undefined);
}
export declare enum CloseCode {
    Normal = 1000,
    Abnormal = 1006,
    Policy = 1008
}
