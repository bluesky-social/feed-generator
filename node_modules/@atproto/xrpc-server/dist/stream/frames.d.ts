import { FrameHeader, FrameType, MessageFrameHeader, ErrorFrameHeader, ErrorFrameBody } from './types';
export declare abstract class Frame {
    header: FrameHeader;
    body: unknown;
    get op(): FrameType;
    toBytes(): Uint8Array;
    isMessage(): this is MessageFrame<unknown>;
    isError(): this is ErrorFrame;
    static fromBytes(bytes: Uint8Array): MessageFrame<unknown> | ErrorFrame<string>;
}
export declare class MessageFrame<T = Record<string, unknown>> extends Frame {
    header: MessageFrameHeader;
    body: T;
    constructor(body: T, opts?: {
        type?: string;
    });
    get type(): string | undefined;
}
export declare class ErrorFrame<T extends string = string> extends Frame {
    header: ErrorFrameHeader;
    body: ErrorFrameBody<T>;
    constructor(body: ErrorFrameBody<T>);
    get code(): T & string;
    get message(): string | undefined;
}
